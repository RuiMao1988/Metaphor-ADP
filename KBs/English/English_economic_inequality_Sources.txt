;; -*- Mode: Lisp -*-

;;
;; Economic Inequality: English Source Axioms
;; Katya Ovchinnikova, Ross Israel, Jonathan Gordon
;;

;; Disease

(B (name disease)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (disease-nn e0 x)))
(B (name illness)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (illness-nn e0 x)))
(B (name disorder)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (disorder-nn e0 x)))
(B (name sickness)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (sickness-nn e0 x)))
(B (name malum)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (malum-nn e0 x)))
(B (name morbus)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (morbus-nn e0 x)))
(B (name malady)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (malady-nn e0 x)))
(B (name malaise)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (malaise-nn e0 x)))
(B (name ailment)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (ailment-nn e0 x)))
(B (name affliction)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (affliction-nn e0 x)))
(B (name medical-condition)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (^ (condition-nn e0 x) (medical-adj e1 x))))
(B (name health-problem)
   (=> (^ (S#DISEASE e1 :0.45) (SS#DISEASE%TYPE y e1 :0.45))
       (^ (health-nn e0 x) (of-in e2 y x) (problem-nn e1 y))))

(B (name plague)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (plague-nn e0 x)))
(B (name cancer)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (cancer-nn e0 x)))
(B (name infection)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (infection-nn e0 x)))
(B (name blight)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (blight-nn e0 x)))
(B (name leprosy)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (leprosy-nn e0 x)))

(B (name spread)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (^ (TS#POVERTY x) (spread-vb e0 x y z))))
;(B (name spread)
;   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
;       (spread-vb e0 x y z)))

(B (name infect)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (infect-vb e0 x y z)))
(B (name cripple)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (cripple-vb e0 x y z)))
(B (name paralyze)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (paralyze-vb e0 x y z)))
(B (name paralyse)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (paralyse-vb e0 x y z)))


;; Sick

(B (name sick)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (sick-adj e0 y)))
(B (name ill)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (ill-adj e0 y)))
(B (name sore)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (sore-adj e0 y)))
(B (name diseased)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (diseased-adj e0 y)))
(B (name handicapped)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (handicapped-adj e0 y)))
(B (name disabled)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (disabled-adj e0 y)))

(B (name crippled)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3))
       (crippled-adj e0 y)))

(B (name invalid)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3))
       (invalid-nn e0 y)))
(B (name patient)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3))
       (patient-nn e0 y)))

(B (name suffer-from)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y x :0.3))
       (^ (suffer-vb e0 y u1 u2) (from-in e1 e0 x))))
(B (name sicken)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y x :0.3))
       (sicken-vb e0 y u1 u2)))


;; Of - Disease

(B (name of-disease)
   (=> (R#SICK  y x :0.9)
       (^ (S#DISEASE x) (of-in e1 x y))))


;; Treatment

(B (name treatment)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (treatment-nn e0 x)))
(B (name operation)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (operation-nn e0 x)))
(B (name therapy)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (therapy-nn e0 x)))
(B (name diagnosis)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (diagnosis-nn e0 x)))
(B (name diagnostic)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (diagnostic-adj e0 x)))
; (B (name examination)
;    (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
;        (examination-nn e0 x)))
(B (name prescription)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (prescription-nn e0 x)))

(B (name doctor)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (doctor-nn e0 x)))
(B (name healer)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (healer-nn e0 x)))
(B (name physician)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (physician-nn e0 x)))
(B (name surgeon)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (surgeon-nn e0 x)))
(B (name medic)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (medic-nn e0 x)))
(B (name medicament)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3)) (medicament-nn e0 x)))
(B (name remedy)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (remedy-nn e0 x)))
(B (name antibiotic)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT x e0 :0.3))
       (antibiotic-nn e0 x)))
(B (name medicine)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT x e0 :0.3))
       (medicine-nn e0 x)))
(B (name drug)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT x e0 :0.3))
       (drug-nn e0 x)))
(B (name pill)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT x e0 :0.3))
       (pill-nn e0 x)))
(B (name bandage)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (bandage-nn e0 x)))
(B (name band-aid)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (band-aid-nn e0 x)))
(B (name bandaid)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT x e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (bandaid-nn e0 x)))

(B (name treat)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (treat-vb e0 y x u2)))
(B (name prescribe)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (prescribe-vb e0 y u1 u2)))
(B (name diagnose)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (diagnose-vb e0 y x u2)))
(B (name misdiagnose)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (misdiagnose-vb e0 y x u2)))
(B (name alleviate)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (alleviate-vb e0 y x u2)))
(B (name dissect)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (dissect-vb e0 y u1 u2)))
(B (name inoculate)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (inoculate-vb e0 y u1 u2)))

(B (name of-treatment)
   (=> (S#DISEASE y e0 :0.9)
       (^ (SS#DISEASE%TREATMENT x y) (of-in e1 x y))))


;; Cure

(B (name cure)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (cure-nn e0 x)))
(B (name panacea)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (panacea-nn e0 x)))
(B (name cure-all)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (cure-all-nn e0 x)))

(B (name cure-vb)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (cure-vb e0 y x u2)))
(B (name heal)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3)
          (R#CURE-AGENT y e0 :0.3))
       (heal-vb e0 y x u2)))

(B (name unrecoverable)
   (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE e0 e0 :0.2) (R#SICK y e0 :0.1))
       (unrecoverable-adj e0 y)))
(B (name incurable)
   (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE e0 e0 :0.2) (R#SICK y e0 :0.1))
       (incurable-adj e0 y)))

(B (name recover)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (recover-vb e0 y u1 u2)))
(B (name recuperate)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (recuperate-vb e0 y u1 u2)))
(B (name convalesce)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y e0 :0.3))
       (convalesce-vb e0 y u1 u2)))

(B (name recovery)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (recovery-nn e1)))
(B (name recuperation)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE x e0 :0.45))
       (recuperation-nn e1)))
(B (name convalescence)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE x e0 :0.45))
       (convalescence-nn e1)))


;; Of - Cure

(B (name for-cure)
   (=> (S#DISEASE y :0.9)
       (^ (SS#DISEASE%CURE x y) (for-in e1 x y))))


;; From/Against - Cure

; (B (name from-cure)
;    (=> (S#DISEASE y :0.9)
;        (^ (SS#DISEASE%CURE e0 y) (from-in e1 e0 y))))
; (B (name against-cure)
;    (=> (S#DISEASE y :0.9)
;        (^ (SS#DISEASE%CURE e0 y) (against-in e1 e0 y))))


;; Epidemic

(B (name epidemic-nn)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45))
       (epidemic-nn e0 y)))
(B (name pandemic-nn)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45))
       (pandemic-nn e0 y)))
(B (name virus)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45))
       (virus-nn e0 y)))

(B (name epidemic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (epidemic-adj e0 y)))
(B (name pandemic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (pandemic-adj e0 y)))
(B (name viral-adj)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (viral-adj e0 y)))


;; Of - Epidemic

(B (name of-epidemic)
   (=> (S#DISEASE y :0.9)
       (^ (SS#DISEASE%TYPE x y u) (of-in e1 x y))))


;; Symptom

(B (name symptom)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (symptom-nn e0 y)))
(B (name symptomatic)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 :0.45))
       (symptomatic-adj e0 y)))

(B (name myopic)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 :0.45))
       (myopic-adj e0 y)))

(B (name bleeding)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 :0.45))
       (bleeding-adj e0 y)))
(B (name wound)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (wound-nn e0 y)))
(B (name pain)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (pain-nn e0 y)))
(B (name scar)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (scar-nn e0 y)))
(B (name fever)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (fever-nn e0 y)))
(B (name swelling)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (swelling-nn e0 y)))

(B (name ache)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%SYMPTOMS e0 e0 :0.3)
          (R#SICK y e0 :0.3))
       (ache-vb e0 y u1 u2)))
(B (name bleed)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%SYMPTOMS e0 e0 :0.3)
          (R#SICK y e0 :0.3))
       (bleed-vb e0 y u1 u2)))
(B (name swell)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%SYMPTOMS e0 e0 :0.3)
          (R#SICK y e0 :0.3))
       (swell-vb e0 y u1 u2)))
(B (name exacerbate)
   (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%SYMPTOMS e0 e0 :0.3)
          (R#SICK y e0 :0.3))
       (exacerbate-vb e0 y u1 u2)))


;; Of - Symptom

;(B (name of-symptom)
;   (=> (S#DISEASE y :0.9)
;       (^ (SS#DISEASE%SYMPTOMS x y) (of-in e1 x y))))


;; Disease: Mapping

(B (name disease-map)
   (=> (I#DISEASE e0 :0.9)
       (S#DISEASE x)))
(B (name disease-type-map)
   (=> (I#DISEASE%TYPE x y :0.9)
       (SS#DISEASE%TYPE x y)))
(B (name cure-map)
   (=> (I#DISEASE%CURE x y :0.9)
       (SS#DISEASE%CURE x y)))
(B (name treatment-map)
   (=> (I#DISEASE%TREATMENT x y :0.9)
       (SS#DISEASE%TREATMENT x y)))
(B (name symptoms-map)
   (=> (I#DISEASE%SYMPTOMS x y :0.9)
       (SS#DISEASE%SYMPTOMS x y)))


;; Crime

;; Crime: Type

(B (name crime)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (crime-nn e0 x)))
(B (name offence)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (offence-nn e0 x)))
(B (name offense)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (offense-nn e0 x)))
(B (name felony)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (felony-nn e0 x)))
(B (name delinquency)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (delinquency-nn e0 x)))

(B (name misdeed)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (misdeed-nn e0 x)))
(B (name malefaction)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (malefaction-nn e0 x)))
(B (name violation)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (violation-nn e0 x)))

(B (name guilty-conduct)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (guilty-adj e1 x) (conduct-nn e0 x))))
(B (name criminal-conduct)
   (=> (^ (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45))
       (^ (criminal-adj e1 x) (conduct-nn e0 x))))
(B (name public-wrong)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (public-adj e1 x) (wrong-nn e0 x))))
(B (name criminal-wrong)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (criminal-adj e1 x) (wrong-nn e0 x))))
(B (name criminal-act)
   (=> (^ (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45))
       (^ (criminal-adj e1 x) (act-nn e0 x))))

(B (name rape-nn)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (rape-nn e0 x)))
(B (name assault-nn)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (assault-nn e0 x)))

(B (name rape-vb)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (rape-vb e0 x y u)))
(B (name violate)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (violate-vb e0 x y u)))
(B (name kill)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (kill-vb e0 x y u)))

(B (name steal)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#THEME z e0 :0.2))
       (steal-vb e0 x z u2)))
(B (name pilfer)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#THEME z e0 :0.2))
       (pilfer-vb e0 x z u2)))
(B (name filch)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#THEME z e0 :0.2))
       (filch-vb e0 x z u2)))
(B (name pinch)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#THEME z e0 :0.2))
       (pinch-vb e0 x z u2)))
(B (name plunder)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#THEME z e0 :0.2))
       (plunder-vb e0 x z u2)))
(B (name pillage)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#THEME z e0 :0.2))
       (pillage-vb e0 x z u2)))

(B (name pimp-vb)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%TYPE e0 e0 :0.3) (R#AGENT x e0 :0.3))
       (pimp-vb e0 x z u2)))

(B (name theft)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (theft-nn e0 x)))
(B (name larceny)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (larceny-nn e0 x)))
(B (name stealing)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (stealing-nn e0 x)))
(B (name thievery)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (thievery-nn e0 x)))

(B (name robbery)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (robbery-nn e0 x)))
(B (name pillage)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (pillage-nn e0 x)))
(B (name plundering)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (plundering-nn e0 x)))
(B (name booty)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (booty-nn e0 x)))
(B (name plunder)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (plunder-nn e0 x)))

(B (name rob)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (rob-vb e0 x y u)))
(B (name mug)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (mug-vb e0 x y u)))
(B (name hijack)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (hijack-vb e0 x y u)))

;; From - Crime

(B (name from-theft)
   (=> (R#CRIME_VICTIM y :0.9)
       (^ (SS#CRIME_TYPE e0) (from-in e1 e0 y))))

(B (name violence)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (violence-nn e0 x)))


;; Crime: Perpetrator

(B (name bandit)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (bandit-nn e0 x)))
(B (name criminal-nn)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (criminal-nn e0 x)))
(B (name criminal-adj)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (criminal-adj e0 x)))
(B (name delinquent)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (delinquent-nn e0 x)))
(B (name offender)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (offender-nn e0 x)))
(B (name convict)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (convict-nn e0 x)))
(B (name outlaw)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (outlaw-nn e0 x)))
(B (name culprit)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (culprit-nn e0 x)))
(B (name malefactor)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (malefactor-nn e0 x)))
(B (name prostitute)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (prostitute-nn e0 x)))
(B (name thief)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (thief-nn e0 x)))
(B (name pilferer)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (pilferer-nn e0 x)))
(B (name mugger)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (mugger-nn e0 x)))
(B (name robber)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (robber-nn e0 x)))
(B (name burglar)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (burglar-nn e0 x)))
(B (name plunderer)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (plunderer-nn e0 x)))
(B (name pimp-nn)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (pimp-nn e0 x)))

(B (name accomplice)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3)
          (R#AGENT x e0 :0.3))
       (accomplice-nn e0 x)))


;; Crime: Punishment

(B (name punishment)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (punishment-nn e0 x)))
(B (name penalty)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (penalty-nn e0 x)))
(B (name sentence)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (sentence-nn e0 x)))
(B (name conviction)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (conviction-nn e0 x)))
;; mulct: a fine or penalty, esp. a pecuniary punishment or penalty.
(B (name mulct)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (mulct-nn e0 x)))
(B (name fine)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (fine-nn e0 x)))
(B (name scourge)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (scourge-nn e0 x)))
(B (name accusation)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (accusation-nn e0 x)))
(B (name verdict)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (verdict-nn e0 x)))
(B (name condemnation)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (condemnation-nn e0 x)))
(B (name indictment)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (indictment-nn e0 x)))

(B (name punitive)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (punitive-adj e0 x)))
(B (name cursed)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (cursed-adj e0 x)))
(B (name guilty)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (guilty-adj e0 x)))

(B (name prison-sentence)
   (=> (^ (S#CRIME y :0.45) (SS#CRIME%PUNISHMENT y y :0.45))
       (^ (prison-nn e0 x) (of-in e1 y x) (sentence-nn e2 y))))
(B (name life-sentence)
   (=> (^ (S#CRIME y :0.45) (SS#CRIME%PUNISHMENT y y :0.45))
       (^ (life-nn e0 x) (of-in e1 y x) (sentence-nn e2 y))))

(B (name condemn)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (condemn-vb e0 x y u)))
(B (name punish)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (punish-vb e0 x y u)))
(B (name convict)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (convict-vb e0 x y u)))
(B (name accuse)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (accuse-vb e0 x y u)))


;; Crime: Victim

(B (name victim)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%VICTIM x e0 :0.3) (R#VICTIM x e0 :0.3))
       (victim-nn e0 x)))
(B (name prey)
   (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%VICTIM x e0 :0.3) (R#VICTIM x e0 :0.3))
       (prey-nn e0 x)))
(B (name sufferer)
   (=> (^ (SS#CRIME%VICTIM x e1 :0.3) (R#VICTIM x e1 :0.3))
       (^ (S#CRIME e1) (SS#TYPE e1) (sufferer-nn e0 x))))


;; Crime: Mapping

(B (name crime-map)
   (=> (I#CRIME x :0.9)
       (S#CRIME x)))
(B (name crime-type-map)
   (=> (I#CRIME%TYPE x y :0.9)
       (SS#CRIME%TYPE x y)))
(B (name crime-perpetrators-map)
   (=> (I#CRIME%PERPETRATOR x y :0.9)
       (SS#CRIME%PERPETRATOR x y)))
(B (name punishment-map)
   (=> (I#CRIME%PUNISHMENT x y :0.9)
       (SS#CRIME%PUNISHMENT x y)))
(B (name crime-perpetrators-map)
   (=> (I#CRIME%VICTIM x y :0.9)
       (SS#CRIME%VICTIM x y)))


;; Confinement

;; Confinement: Confined Space

(B (name prison)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (prison-nn e0 x)))
(B (name jail)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (jail-nn e0 x)))
(B (name gaol)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (gaol-nn e0 x)))
(B (name cage)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (cage-nn e0 x)))
(B (name dungeon)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (dungeon-nn e0 x)))
(B (name penitentiary)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (penitentiary-nn e0 x)))
(B (name dead-end)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (dead-end-nn e0 x)))
(B (name alcatraz)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (alcatraz-nn e0 x)))
(B (name cell)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (cell-nn e0 x)))
(B (name closet)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (closet-nn e0 x)))
;; TODO: Add prison cell, jail cell. Will this show up as nn nn or as jj nn?

(B (name stuck)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.45))
       (stuck-adj e0 x)))

(B (name imprison)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (imprison-vb e0 x y u)))
(B (name confine)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (confine-vb e0 x y u)))
(B (name incarcerate)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (incarcerate-vb e0 x y u)))
(B (name lock)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (lock-vb e0 x y u)))
(B (name constrain)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (constrain-vb e0 x y u)))
(B (name jail-vb)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (jail-vb e0 x y u)))


;; Confinement: Restraints

(B (name trap)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (trap-nn e0 x)))
(B (name net)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (net-nn e0 x)))
(B (name handcuffs)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (handcuff-nn e0 x)))
(B (name chain)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (chain-nn e0 x)))
(B (name bondage)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (bondage-nn e0 x)))
(B (name bond)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (bond-nn e0 x)))
(B (name grip)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45))
       (grip-nn e0 x)))

;; bound-adj too ambiguous?

(B (name catch)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (catch-vb e0 x y u)))
(B (name grip)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (grip-vb e0 x y u)))
(B (name handcuff)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (handcuff-vb e0 x y u)))


;; Confinement: Exit

(B (name door)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (door-nn e0 x)))
(B (name ladder)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (ladder-nn e0 x)))
(B (name rope)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (rope-nn e0 x)))
(B (name trampoline)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (trampoline-nn e0 x)))
(B (name lifeline)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (lifeline-nn e0 x)))
(B (name escape)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (escape-nn e0 x)))

(B (name freedom-from)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (^ (freedom-nn e0 x) (from-in e1 x y))))

(B (name escape)
   (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3)
          (R#ESCAPE-AGENT x e0 :0.3))
       (escape-vb e0 x y u)))
(B (name get-out-of)
   (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3)
          (R#ESCAPE-AGENT x e0 :0.3))
       (^ (get-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 w))))
(B (name get-out)
   (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3)
          (R#ESCAPE-AGENT x e0 :0.3))
       (^ (get-vb e0 x y u) (out-in e1 e0 z))))
(B (name break-out-of)
   (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3)
          (R#ESCAPE-AGENT x e0 :0.3))
       (^ (break-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 w))))
(B (name break-out)
   (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3)
          (R#ESCAPE-AGENT x e0 :0.3))
       (^ (break-vb e0 x y u) (out-in e1 e0 z))))
(B (name liberate)
   (=> (^ (S#CONFINEMENT u1 :0.3) (SS#CONFINEMENT%EXIT e0 u1 :0.3)
          (R#EXIT-AGENT x e0 :0.3) (R#EXIT-PATIENT y e0 :0.3))
       (liberate-vb e0 x y u)))

(B (name liberate)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (liberation-nn e0 x)))

(B (name break-restraints)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT e0 e0 :0.45))
       (^ (S#CONFINEMENT e1) (SS#RESTRAINTS y e1) (break-vb e0 x y z))))


;; Confinement: Mapping

(B (name confinement-map)
   (=> (I#CONFINEMENT x :0.9)
       (S#CONFINEMENT x)))
(B (name confined-space-map)
   (=> (I#CONFINEMENT%CONFINED_SPACE x y :0.9)
       (SS#CONFINEMENT%CONFINED_SPACE x y)))
(B (name confinement-restraints-map)
   (=> (I#CONFINEMENT%RESTRAINTS x y :0.9)
       (SS#CONFINEMENT%RESTRAINTS x y)))
(B (name exit-map)
   (=> (I#CONFINEMENT%EXIT x y :0.9)
       (SS#CONFINEMENT%EXIT x y)))


;; Enslavement

;; Enslavement: Servant

(B (name slave)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (slave-nn e0 x)))
(B (name vassal)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (vassal-nn e0 x)))
(B (name thrall)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (thrall-nn e0 x)))
(B (name servant)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (servant-nn e0 x)))
(B (name minion)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (minion-nn e0 x)))
(B (name butler)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (butler-nn e0 x)))
(B (name subject)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3)
          (R#ENSLAVEMENT-PATIENT x e0 :0.3))
       (subject-nn e0 x)))


;; Enslavement: Oppression

(B (name slavery)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (slavery-nn e0 x)))
(B (name enslavement)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (enslavement-nn e0 x)))
(B (name oppression)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (oppression-nn e0 x)))

(B (name enslave)
   (=> (^ (S#ENSLAVEMENT e0 :0.2) (SS#ENSLAVEMENT%OPPRESSION e0 e0 :0.2)
          (R#ENSLAVEMENT-PATIENT y e0 :0.2) (R#ENSLAVEMENT-AGENT x e0 :0.2))
       (enslave-vb e0 x y u)))
(B (name oppress)
   (=> (^ (S#ENSLAVEMENT e0 :0.2) (SS#ENSLAVEMENT%OPPRESSION e0 e0 :0.2)
          (R#ENSLAVEMENT-PATIENT y e0 :0.2) (R#ENSLAVEMENT-AGENT x e0 :0.2))
       (oppress-vb e0 x y u)))

(B (name oppressive)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (oppressive-adj e0 x)))


;; Enslavement: Master

(B (name master)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%MASTER e0 e0 :0.3)
          (R#ENSLAVEMENT-AGENT x e0 :0.3)) (master-nn e0 x)))
(B (name ruler)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%MASTER e0 e0 :0.3)
          (R#ENSLAVEMENT-AGENT x e0 :0.3)) (ruler-nn e0 x)))
(B (name slave-driver)
   (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%MASTER e0 e0 :0.3)
          (R#ENSLAVEMENT-AGENT x e0 :0.3))
       (^ (slave-nn e0 x) (driver-nn e1 y))))

(B (name reign-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33)
          (R#ENSLAVEMENT-AGENT x e0 :0.33))
       (reign-vb e0 x y u)))
(B (name rule)
   (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33)
          (R#ENSLAVEMENT-AGENT x e0 :0.33))
       (rule-vb e0 x y u)))
(B (name subject-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33)
          (R#ENSLAVEMENT-AGENT x e0 :0.33))
       (subject-vb e0 x y u)))


;; Enslavement: Mapping

(B (name enslavement-map)
   (=> (I#ENSLAVEMENT x :0.9)
       (S#ENSLAVEMENT x)))
(B (name servant-map)
   (=> (I#CONFINEMENT%SERVANT x y :0.9)
       (SS#CONFINEMENT%SERVANT x y)))
(B (name oppression-map)
   (=> (I#CONFINEMENT%OPPRESSION x y :0.9)
       (SS#CONFINEMENT%OPPRESSION x y)))
(B (name master-map)
   (=> (I#CONFINEMENT%MASTER x y :0.9)
       (SS#CONFINEMENT%MASTER x y)))


;; Body of Water

(B (name water)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (water-nn e0 x)))
(B (name sea-water)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (sea-water-nn e0 x)))
(B (name seawater)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (seawater-nn e0 x)))

(B (name sea)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (sea-nn e0 x)))
(B (name ocean)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (ocean-nn e0 x)))
(B (name river)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (river-nn e0 x)))

;; Of - Body of Water
(B (name of-body-of-water)
   (=> (R#MATTER x y :0.9)
       (^ (SS#BODY_OF_WATER_TYPE y) (of-in e1 y x))))


;; Body of Water: Drink
;; Not in current government list.

; (B (name drink-vb)
;    (=> (^ (S#BODY_OF_WATER u :0.2) (SS#BODY_OF_WATER%DRINK e0 u y :0.2)
;           (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))
;        (drink-vb e0 x y u2)))
; (B (name gulp)
;    (=> (^ (S#BODY_OF_WATER u :0.2) (SS#BODY_OF_WATER%DRINK e0 u y :0.2)
;           (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))
;    (gulp-vb e0 x y u2)))
; (B (name imbibe)
;    (=> (^ (S#BODY_OF_WATER u :0.2) (SS#BODY_OF_WATER%DRINK e0 u y :0.2)
;        (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))
;    (imbibe-vb e0 x y u2)))
; (B (name quaff)
;    (=> (^ (S#BODY_OF_WATER u :0.2) (SS#BODY_OF_WATER%DRINK e0 u y :0.2)
;           (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))
;        (quaff-vb e0 x y u2)))
; (B (name sip-vb)
;    (=> (^ (S#BODY_OF_WATER u :0.2) (SS#BODY_OF_WATER%DRINK e0 u y :0.2)
;           (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))
;        (sip-vb e0 x y u2)))
; (B (name swig-vb)
;    (=> (^ (S#BODY_OF_WATER u :0.2) (SS#BODY_OF_WATER%DRINK e0 u y :0.2)
;           (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))
;        (swig-vb e0 x y u2)))

; (B (name drink-nn)
;    (=> (^ (S#BODY_OF_WATER y :0.45) (SS#BODY_OF_WATER%DRINK x y y :0.45))
;        (drink-nn e0 x)))
; (B (name gulp-nn)
;    (=> (^ (S#BODY_OF_WATER y :0.45) (SS#BODY_OF_WATER%DRINK x y y :0.45))
;        (gulp-nn e0 x)))
; (B (name sip-nn)
;    (=> (^ (S#BODY_OF_WATER y :0.45) (SS#BODY_OF_WATER%DRINK x y y :0.45))
;        (sip-nn e0 x)))
; (B (name swig-nn)
;    (=> (^ (S#BODY_OF_WATER y :0.45) (SS#BODY_OF_WATER%DRINK x y y :0.45))
;        (swig-nn e0 x)))


;; Body of Water: Thirst
;; Not in current government list.

; (B (name thirst)
;    (=> (^ (S#BODY_OF_WATER y :0.3) (SS#BODY_OF_WATER%THIRST x y :0.3)
;           (R#DRINKER x e0 :0.3))
;        (thirst-nn e0 x)))
; (B (name thirsty)
;    (=> (^ (S#BODY_OF_WATER y :0.3) (SS#BODY_OF_WATER%THIRST e0 y :0.3)
;           (R#DRINKER x e0 :0.3))
;        (thirsty-adj e0 x)))
; (B (name thirstier)
;    (=> (^ (S#BODY_OF_WATER y :0.3) (SS#BODY_OF_WATER%THIRST e0 y :0.3)
;           (R#DRINKER x e0 :0.3))
;        (thirstier-adj e0 x)))

;; Of - Thirst
(B (name of-thirst)
   (=> (R#THIRST-OBJECT y e0 :0.9)
       (^ (SS#BODY_OF_WATER_THIRST x) (of-in e1 x y))))


;; Body of Water: Movement

(B (name flow)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#STREAMING x e0 :0.3))
       (flow-vb e0 x y z)))
(B (name leak)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#STREAMING x e0 :0.3))
       (leak-vb e0 x u1 u2)))
(B (name stream)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#STREAMING x e0 :0.3))
       (stream-vb e0 x u1 u2)))
(B (name swell2)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#STREAMING x e0 :0.3))
       (swell-vb e0 x u1 u2)))
(B (name stagnate)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#DAMPENING x e0 :0.3))
       (stagnate-vb e0 x u1 u2)))
(B (name absorb)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#ABSORBING x e0 :0.3))
       (absorb-vb e0 x u1 u2)))
(B (name dampen)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.3)
          (R#DAMPENING x e0 :0.3))
       (dampen-vb e0 x u1 u2)))

(B (name stream-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (stream-nn e0 y)))
(B (name flow-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (flow-nn e0 y)))
(B (name leak-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (leak-nn e0 y)))
(B (name wave)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (wave-nn e0 y)))
(B (name swell-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (swell-nn e0 y)))
(B (name tide)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (tide-nn e0 y)))
(B (name rising-tide)
   (=> (^ (S#BODY_OF_WATER e1 :0.45) (SS#BODY_OF_WATER%MOVEMENT x e1 :0.45))
       (^ (rising-adj e0 x) (tide-nn e1 x))))
(B (name flood-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (flood-nn e0 y)))
(B (name absorption)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (absorption-nn e0 y)))
(B (name fountain)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (fountain-nn e0 y)))

(B (name awash)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.45))
       (awash-adj e0 y)))
(B (name stagnant)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.45))
       (stagnant-adj e0 y)))

;; Of - Movement
(B (name of-stream)
   (=> (R#STREAMING y e0 :0.9)
       (^ (SS#MOVEMENT x e) (of-in e1 x y))))


;; Body of Water: Danger

(B (name tsunami)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (tsunami-nn e0 y)))
(B (name swamp)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (swamp-nn e0 y)))
(B (name mire)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (mire-nn e0 y)))
(B (name underwater)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (underwater-nn e0 y)))
(B (name whirlpool)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (whirpool-nn e0 y)))

(B (name inundation)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (inundation-nn e0 y)))

(B (name drown)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%DANGER e0 e0 :0.3)
          (R#DROWN-PATIENT x e0 :0.3)) (drown-vb e0 x u1 u2)))
(B (name swamp-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%DANGER e0 e0 :0.3)
          (R#DROWN-PATIENT y e0 :0.3))
       (swamp-vb e0 x y u2)))
(B (name mire-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%DANGER e0 e0 :0.3)
          (R#DROWN-PATIENT x e0 :0.3))
       (mire-vb e0 x u1 u2)))
(B (name mired)
   (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%DANGER e0 e0 :0.3)
          (R#DROWN-PATIENT x e0 :0.3))
       (mired-adj e0 x)))


;; Body of Water: Mapping

(B (name water-map)
   (=> (I#BODY_OF_WATER x :0.9)
       (S#BODY_OF_WATER x)))
(B (name water-type-map)
   (=> (I#BODY_OF_WATER%TYPE x y :0.9)
       (SS#BODY_OF_WATER%TYPE x y)))
;(B (name drink-map)
;   (=> (I#BODY_OF_WATER%DRINK x y :0.9)
;       (SS#BODY_OF_WATER%DRINK x y )))
;(B (name thirst-map)
;   (=> (I#BODY_OF_WATER%THIRST x y :0.9)
;       (SS#BODY_OF_WATER%THIRST x y )))
(B (name movement-map)
   (=> (I#BODY_OF_WATER%MOVEMENT x y :0.9)
       (SS#BODY_OF_WATER%MOVEMENT x y)))
(B (name danger-map)
   (=> (I#BODY_OF_WATER%DANGER x y :0.9)
       (SS#BODY_OF_WATER%DANGER x y)))


;; Material
;; Not in current government list

;; Material: Cut

;(B (name cut-vb)
;   (=> (^ (S#MATERIAL y :0.3) (SS#MATERIAL%MATERIAL-CUT e0 y y :0.3)
;          (R#CUT-AGENT x e0 :0.3))
;       (cut-vb e0 x y u2)))
;(B (name cut-nn)
;   (=> (^ (S#MATERIAL y :0.45) (SS#MATERIAL%MATERIAL-CUT e0 y y :0.45))
;       (^ (nn e1 x y) (cut-nn e0 x))))
;(B (name cut-nn2)
;   (=> (^ (S#MATERIAL y :0.45) (SS#MATERIAL%MATERIAL-CUT e0 y y :0.45))
;       (^ (of-in e1 x y) (cut-nn e0 x))))
;(B (name cut-nn3)
;   (=> (^ (S#MATERIAL y :0.48) (SS#MATERIAL%MATERIAL-CUT e0 y y :0.48))
;       (cut-nn e0 x)))

;(B (name material-map)
;   (=> (I#MATERIAL x :0.9)
;       (S#MATERIAL x)))
;(B (name cut-map)
;   (=> (I#MATERIAL-CUT x y y :0.9)
;       (SS#MATERIAL-CUT x y y)))


;; Organism

;; Organism: Grow

;(B (name grow-vb)
;   (=> (^ (S#ORGANISM x :0.45) (SS#ORGANISM%GROW e0 x x :0.45))
;       (grow-vb e0 x u1 u2)))
;(B (name growth-nn)
;   (=> (^ (S#ORGANISM y :0.45) (SS#ORGANISM%GROW e0 y y :0.45))
;       (^ (nn e1 x y) (growth-nn e0 x))))
;(B (name of-growth)
;   (=> (^ (S#ORGANISM y :0.45) (SS#ORGANISM%GROW e0 y y :0.45))
;       (^ (of-in e1 x y) (growth-nn e0 x))))
;(B (name growth)
;   (=> (^ (S#ORGANISM y :0.47) (SS#ORGANISM%GROW e0 y y :0.47))
;       (growth-nn e0 x)))


;; Organism: Mapping

;(B (name organism-map)
;   (=> (I#ORGANISM x :0.9)
;       (S#ORGANISM x)))
;(B (name grow-map)
;   (=> (I#GROW x y y :0.9)
;       (SS#GROW x y y)))


;; Struggle

(B (name war) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (war-nn e0 x)))
(B (name fight) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (fight-nn e0 x)))
(B (name struggle) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (struggle-nn e0 x)))
(B (name combat) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (combat-nn e0 x)))
(B (name battle) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (battle-nn e0 x)))
(B (name gunfight) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (gunfight-nn e0 x)))
(B (name gunshot) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (gunshot-nn e0 x)))
;(B (name chaos) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (chaos-nn e0 x)))
(B (name crusade) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (crusade-nn e0 x)))

(B (name attack) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (attack-nn e0 x)))
(B (name assault) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (assault-nn e0 x)))
(B (name blitz) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (blitz-nn e0 x)))
(B (name barrage) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (barrage-nn e0 x)))
; I'm not sure this fits here
;(B (name insult) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (insult-nn e0 x)))
(B (name invasion) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (invasion-nn e0 x)))

(B (name combat) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)) (combat-vb e0 x u1 u2)))
(B (name struggle) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)) (struggle-vb e0 x u1 u2)))
(B (name battle) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)) (battle-vb e0 x u1 u2)))
(B (name fight) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)) (fight-vb e0 x u1 u2)))
(B (name combat) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#STRUGGLE-AGENT x e0 :0.3)) (combat-vb e0 x u1 u2)))

(B (name attack) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2)) (attack-vb e0 x y u2)))
(B (name bombvb) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2)) (bomb-vb e0 x y u2)))
(B (name assail) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2)) (assail-vb e0 x y u2)))
(B (name insult) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (insult-vb e0 x y u2)))
(B (name charge) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2)) (charge-vb e0 x y u2)))
(B (name invade) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2)) (invade-vb e0 x y u2)))
(B (name defeat) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2)) (defeat-vb e0 x y u2)))

(B (name fight-with) (=> (S#STRUGGLE y x :0.90) (^ (SS#STRUGGLE%TYPE x y) (with-in x y))))
(B (name fight-against) (=> (S#STRUGGLE y x :0.90) (^ (SS#STRUGGLE%TYPE x y) (against-in x y))))
(B (name fight-of) (=> (R#STRUGGLE-AGENT y x :0.90) (^ (SS#STRUGGLE_TYPE x) (of-in x y))))
(B (name fight-on) (=> (R#STRUGGLE-AGENT y x :0.90) (^ (SS#STRUGGLE_TYPE x) (on-in x y))))
(B (name fight-at) (=> (R#STRUGGLE-AGENT y x :0.90) (^ (SS#STRUGGLE_TYPE x) (at-in x y))))

(B (name enemy) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3)) (enemy-nn e1 x)))
(B (name adversary) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3)) (adversary-nn e1 x)))
(B (name rival) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3)) (rival-nn e1 x)))
(B (name opponent) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3)) (opponent-nn e1 x)))
(B (name enemy) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3)) (foe-nn e1 x)))
(B (name enemy) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3)) (combatant-nn e1 x)))

(B (name enemy-of) (=> (R#STRUGGLE-AGENT y e0 :0.90) (^ (SS#STRUGGLE_ADVERSARY x e0) (of-in e1 x y))))

(B (name soldier) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY x e0 :0.45)) (soldier-nn e0 x)))
(B (name officer) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY x e0 :0.45)) (officer-nn e0 x)))
(B (name army) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY x e0 :0.45)) (army-nn e0 x)))
(B (name gunner) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY x e0 :0.45)) (gunner-nn e0 x)))
(B (name shooter) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY x e0 :0.45)) (shooter-nn e0 x)))


;; ##RI: Weapon is not a government approved sub-dimension

;(B (name weapon) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (weapon-nn e0 y)))
;(B (name gun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (gun-nn e0 y)))
;(B (name knife) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (knife-nn e0 y)))
;(B (name bomb) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (bomb-nn e0 y)))
;(B (name shotgun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (shotgun-nn e0 y)))
;(B (name firearm) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (firearm-nn e0 y)))
;(B (name artillery) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (artillery-nn e0 y)))
;(B (name revolver) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (revolver-nn e0 y)))
;(B (name sword) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (sword-nn e0 y)))
;(B (name rapier) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (rapier-nn e0 y)))
;(B (name ammunition) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (ammunition-nn e0 x)))
;(B (name barrel) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (barrel-nn e0 x)))
;(B (name bayonet) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (bayonet-nn e0 x)))
;(B (name bb-gun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (^ (bb-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
;(B (name blowgun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (blowgun-nn e0 x)))
;(B (name bomb) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (bomb-nn e0 x)))
;(B (name bullet) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (bullet-nn e0 x)))
;(B (name cannon) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (cannon-nn e0 x)))
;(B (name cap-gun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (^ (cap-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
;(B (name glock) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (glock-nn e0 x)))
;(B (name handgun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (handgun-nn e0 x)))
;(B (name holster) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (holster-nn e0 x)))
;(B (name laser) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (laser-nn e0 x)))
;(B (name machine-gun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (^ (machine-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
;(B (name minigun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (minigun-nn e0 x)))
;(B (name musket) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (musket-nn e0 x)))
;(B (name pistol) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (pistol-nn e0 x)))
;(B (name popgun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (popgun-nn e0 x)))
;(B (name rifle) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (rifle-nn e0 x)))
;(B (name spear) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (spear-nn e0 x)))
;(B (name trigger) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (trigger-nn e0 x)))
;(B (name uzi) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (uzi-nn e0 x)))
;(B (name zipgun) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (zipgun-nn e0 x)))

;(B (name armory) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (armory-nn e0 x)))
;(B (name arsenal) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON x e0 :0.45)) (arsenal-nn e0 x)))

(B (name weapon) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (weapon-nn e0 x)))
(B (name gun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (gun-nn e0 x)))
(B (name knife) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (knife-nn e0 x)))
(B (name bomb) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (bomb-nn e0 x)))
(B (name shotgun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (shotgun-nn e0 x)))
(B (name firearm) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (firearm-nn e0 x)))
(B (name artillery) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (artillery-nn e0 x)))
(B (name revolver) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (revolver-nn e0 x)))
(B (name sword) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (sword-nn e0 x)))
(B (name rapier) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (rapier-nn e0 x)))
(B (name ammunition) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (ammunition-nn e0 x)))
(B (name barrel) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (barrel-nn e0 x)))
(B (name bayonet) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (bayonet-nn e0 x)))
(B (name bb-gun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (^ (bb-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
(B (name blowgun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (blowgun-nn e0 x)))
(B (name bomb) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (bomb-nn e0 x)))
(B (name bullet) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (bullet-nn e0 x)))
(B (name cannon) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (cannon-nn e0 x)))
(B (name cap-gun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (^ (cap-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
(B (name glock) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (glock-nn e0 x)))
(B (name handgun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (handgun-nn e0 x)))
(B (name holster) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (holster-nn e0 x)))
(B (name laser) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (laser-nn e0 x)))
(B (name machine-gun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (^ (machine-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
(B (name minigun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (minigun-nn e0 x)))
(B (name musket) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (musket-nn e0 x)))
(B (name pistol) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (pistol-nn e0 x)))
(B (name popgun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (popgun-nn e0 x)))
(B (name rifle) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (rifle-nn e0 x)))
(B (name spear) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (spear-nn e0 x)))
(B (name trigger) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (trigger-nn e0 x)))
(B (name uzi) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (uzi-nn e0 x)))
(B (name zipgun) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (zipgun-nn e0 x)))

(B (name armory) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (armory-nn e0 x)))
(B (name arsenal) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (arsenal-nn e0 x)))

(B (name strugglemap) (=> (I#STRUGGLE x :0.9) (S#STRUGGLE x)))
(B (name struggle-typemap) (=> (I#STRUGGLE%TYPE x e0 :0.9) (SS#STRUGGLE%TYPE x e0)))
(B (name adversarymap) (=> (I#STRUGGLE%ADVERSARY x u :0.9) (SS#STRUGGLE%ADVERSARY x u)))
;(B (name weaponmap) (=> (I#STRUGGLE%WEAPON x e0 :0.9) (SS#STRUGGLE%WEAPON x e0)))


;; Abyss

(B (name abyss) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (abyss-nn e0 x)))
(B (name hell) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (hell-nn e0 x)))
(B (name sinkhole) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (sinkhole-nn e0 x)))
(B (name hole) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (hole-nn e0 x)))
(B (name chasm) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (chasm-nn e0 x)))
(B (name pit) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (pit-nn e0 x)))
(B (name cave) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (cave-nn e0 x)))
(B (name abysm) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (abysm-nn e0 x)))
(B (name trench) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (trench-nn e0 x)))
(B (name black-hole) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (^ (black-adj e0 x) (hole-nn e1 x))))
(B (name gaping-maw) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (^ (gap-vb e0 x u1 u2) (maw-nn e1 x))))
(B (name dark-hole) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (^ (dark-adj e0 x) (hole-nn e1 x))))
(B (name bottomless-pit) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (^ (bottomless-adj e0 x) (pit-nn e1 x))))

(B (name abyssal) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 e0 :0.45)) (abyssal-adj e0 x)))
(B (name abysmal) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 e0 :0.45)) (abysmal-adj e0 x)))


;; Abyss: Depth

(B (name depth) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45)) (depth-nn e0 x)))
(B (name deep) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45)) (deep-nn e0 x)))
(B (name deep2) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH x e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (deep-adj e0 x)))
(B (name bottomless) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH x e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (bottomless-adj e0 x)))
(B (name deeper) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH x e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (deeper-adj e0 x)))
(B (name deepest) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH x e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (deepest-adj e0 x)))
(B (name deep3) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45)) (deeply-rb e0 x)))
(B (name ever-deepening) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH x e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (ever-deepening-adj e0 x)))

(B (name deep) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH e0 e0 :0.45)) (deepen-vb e0 x y z)))

(B (name depth-of) (=> (R#ABYSS-THEME y e0 :0.90) (^ (SS#ABYSS_DEPTH x) (of-in e1 x y))))


;; Abyss: Entrance

;; ##RI: Should these nouns look for an ABYSS-TYPE to trigger?

(B (name verge) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (verge-nn e0 x)))
(B (name edge) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (edge-nn e0 x)))
(B (name border) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (border-nn e0 x)))
(B (name borderline) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (borderline-nn e0 x)))
(B (name brink) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (brink-nn e0 x)))
(B (name cliff) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (cliff-nn e0 x)))
(B (name precipice) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (precipice-nn e0 x)))
(B (name precipice) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45)) (entrance-nn e0 x)))

(B (name push-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (push-vb e0 x y u2) (into-in e1 e0 z))))
(B (name push-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (push-vb e0 x y u2) (into-in e1 e0 z))))
(B (name shove-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (shove-vb e0 x y u2) (into-in e1 e0 z))))
(B (name shove-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (shove-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drive-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (drive-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drive-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (drive-vb e0 x y u2) (into-in e1 e0 z))))
(B (name suck-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (suck-vb e0 x y u2) (into-in e1 e0 z))))
(B (name suck-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (suck-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drag-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (drag-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drag-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (drag-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name throw-into) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (throw-vb e0 x y u2) (into-in e1 e0 z))))
(B (name throw-into-pov) (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1) (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2)) (^ (TS#POVERTY z) (throw-vb e0 x y u2) (into-in e1 e0 z))))

(B (name throw-into-pov) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE e0 e0 :0.45)) (enter-vb e0 x y u2)))

(B (name descend-into) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%ENTRANCE e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (descend-vb e0 x y u2) (into-in e1 e0 z))))
(B (name sink-into) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%ENTRANCE e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (sink-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into2) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%ENTRANCE e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name fall-into) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%ENTRANCE e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (fall-vb e0 x y u2) (into-in e1 e0 z))))


;; Abyss: Exit

(B (name climb-out-of) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%EXIT e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (climb-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name jump-out-of) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%EXIT e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (jump-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))

(B (name pull-out-of) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2) (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^ (pull-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name lift-out-of) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2) (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^ (lift-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name yank-out-of) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2) (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^ (yank-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name dig-out-of) (=> (^ (S#ABYSSan  e0 :0.2) (SS#ABYSSan%EXIT e0 e0 :0.2) (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^ (dig-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name emerge-from) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%EXIT e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (emerge-vb e0 x y u) (out-in e1 e0 w) (from-in e2 e1 z))))
(B (name help-out-of) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2) (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2)) (^ (help-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))

(B (name abyssmap) (=> (I#ABYSS x :0.9) (S#ABYSS x)))
(B (name abysstypemap) (=> (I#ABYSS%TYPE x e0 :0.9) (SS#ABYSS%TYPE x e0)))
(B (name abyssentrancemap) (=> (I#ABYSS%ENTRANCE x y :0.9) (SS#ABYSS%ENTRANCE x y)))
(B (name abyssexitmap) (=> (I#ABYSS%EXIT x y :0.9) (SS#ABYSS%EXIT x y)))


;; Physical Burden

;; Physical Burden: Weight

(B (name burden) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (burden-nn e0 x)))
(B (name weight) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (weight-nn e0 x)))
(B (name load) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (load-nn e0 x)))
(B (name loading) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (loading-nn e0 x)))
(B (name millstone) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (millstone-nn e0 x)))
(B (name encumbrance) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (encumbrance-nn e0 x)))
(B (name burden) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (pressure-nn e0 x)))
(B (name anchor) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (anchor-nn e0 x)))

(B (name heavy) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45)) (heavy-adj e0 x)))
(B (name heavy) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45)) (weighty-adj e0 x)))
(B (name heavy-weight) (=> (^ (S#PHYSICAL_BURDEN y :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y y :0.45)) (^ (heavy-adj e0 x) (weight-nn e1 y))))
(B (name heavy-load) (=> (^ (S#PHYSICAL_BURDEN y :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y y :0.45)) (^ (heavy-adj e0 x) (load-nn e1 y))))

(B (name loadvb) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2) (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (load-vb e0 x y u)))
(B (name burthen) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2) (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (burthen-vb e0 x y u)))
(B (name burdenvb) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2) (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (burden-vb e0 x y u)))

(B (name weightvb) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45)) (weight-vb e0 x y u)))


;; Physical Burden: Relief

(B (name relief) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (relief-nn e0 x)))
(B (name ease) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (ease-nn e0 x)))
(B (name easing) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (easing-nn e0 x)))
;(B (name lightening) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (lightening-nn e0 x)))
(B (name tax-shift) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (^ (TS#TAXATION x) (shift-nn e1 y) (of-in e2 y x))))

(B (name lighten) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2) (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (lighten-vb e0 x y u)))
(B (name easevb) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2) (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (ease-vb e0 x y u)))
(B (name relieve) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2) (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (relieve-vb e0 x y u)))
(B (name shift) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2) (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (^ (TS#TAXATION y) (shift-vb e0 x y u))))

;(B (name aid) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2) (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2)) (aid-vb e0 x y u)))

(B (name evasion) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (evasion-nn e0 x)))
(B (name tax-evasion) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (^ (TS#TAXATION x) (of-in e1 y x) (evasion-nn e2 y))))

(B (name evade) (=> (^ (S#PHYSICAL_BURDEN e0 :0.3) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.3) (R#EVADE-AGENT x e0 :0.3)) (evade-vb e0 x y u)))


;; Physical Burden: Physical Distress

(B (name unsustainable) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45)) (unsustainable-adj e0 y)))

(B (name overwhelm) (=> (^ (S#PHYSICAL_BURDEN e0 :0.3) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.3) (R#PHYSICAL_BURDEN-CAUSE x e0 :0.3)) (overwhelm-vb e0 x y u)))
(B (name crush) (=> (^ (S#PHYSICAL_BURDEN e0 :0.3) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.3) (R#PHYSICAL_BURDEN-CAUSE x e0 :0.3)) (crush-vb e0 x y u)))
(B (name suffer) (=> (^ (S#PHYSICAL_BURDEN e0 :0.3) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.3) (R#PHYSICAL_BURDEN-PATIENT x e0 :0.3)) (suffer-vb e0 x y u)))

(B (name physical-burdenmap) (=> (I#PHYSICAL_BURDEN  e0 :0.9) (S#PHYSICAL_BURDEN x)))
(B (name weightmap) (=> (I#PHYSICAL_BURDEN%WEIGHT  x y :0.9) (SS#PHYSICAL_BURDEN%WEIGHT x y)))
(B (name reliefmap) (=> (I#PHYSICAL_BURDEN%RELIEF  x y :0.9) (SS#PHYSICAL_BURDEN%RELIEF x y)))
(B (name physical-distressmap) (=> (I#PHYSICAL_BURDEN%PHYSICAL_DISTRESS  x y :0.9) (SS#PHYSICAL_BURDEN%xPHYSICAL_DISTRESS x y)))


;; Physical Harm

;; Physical Harm: Type

(B (name hurt) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (hurt-vb e0 x y u2)))
(B (name beat) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (beat-vb e0 x y u2)))
(B (name bite) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (bite-vb e0 x y u2)))
;(B (name crush) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (crush-vb e0 x y u2)))
(B (name harm) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (harm-vb e0 x y u2)))
(B (name screw) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (screw-vb e0 x y u2)))
(B (name torture) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (torture-vb e0 x y u2)))
(B (name maim) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (maim-vb e0 x y u2)))
(B (name traumatize) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (traumatize-vb e0 x y u2)))
(B (name injure) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (injure-vb e0 x y u2)))
(B (name poison) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (poison-vb e0 x y u2)))
(B (name sting) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (sting-vb e0 x y u2)))
(B (name strangle) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (strangle-vb e0 x y u2)))
(B (name slash) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (slash-vb e0 x y u2)))
(B (name cut) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (cut-vb e0 x y u2)))
(B (name erode) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (erode-vb e0 x y u2)))
(B (name hobble) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (hobble-vb e0 x y u2)))
(B (name target) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (target-vb e0 x y u2)))
(B (name target) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (grind-vb e0 x y u2)))
(B (name target) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (break-vb e0 x y u2)))

(B (name target) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (damage-vb e0 x y u2)))

(B (name hit) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (hit-vb e0 x y u2)))
(B (name grind) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (grind-vb e0 x y u2)))
(B (name impact) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (impact-vb e0 x y u2)))

(B (name hurtn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (hurt-nn e0 x)))
(B (name cutn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (cut-nn e0 x)))
(B (name impactn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (impact-nn e0 x)))
(B (name slashn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (slash-nn e0 x)))
(B (name biten) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (bite-nn e0 x)))
;(B (name crushn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (crush-nn e0 x)))
(B (name harmn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (harm-nn e0 x)))
(B (name torturen) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (torture-nn e0 x)))
(B (name maimn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (maim-nn e0 x)))
(B (name trauman) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (trauma-nn e0 x)))
(B (name injuryn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (injury-nn e0 x)))
;(B (name screwn) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2)) (screw-nn e0 x)))
(B (name poisonn) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (poison-nn e0 x)))
(B (name venom) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (venom-nn e0 x)))
(B (name stingn) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (sting-nn e0 x)))

(B (name hitn) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (hit-nn e0 x)))
(B (name hitn) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (damage-nn e0 x)))

(B (name crippling) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.45)) (crippling-adj e0 x)))
(B (name soul-crushing) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.45)) (soul-crushing-adj e0 x)))
(B (name toxic) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (toxic-adj e0 x)))
(B (name targeted) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (targeted-adj e0 x)))
(B (name poisonous) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (poisonous-adj e0 x)))


;; Physical Harm: Restraint

(B (name hobble) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (hobble-vb e0 x y u)))
(B (name overwhelmed) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (overwhelm-vb e0 x y u)))
(B (name hamstring) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (hamstring-vb e0 x y u)))
(B (name held-back) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (^ (hold-vb e0 x y u) (back-rb e1 e0))))
(B (name bring-to-knees) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (^ (bring-vb e0 x y u) (to-in e1 e0 z) (knees-nn e2 z))))
(B (name bury) (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (bury-vb e0 x y u)))
(B (name curb) (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (curb-vb e0 x y u)))
(B (name impair) (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (impair-vb e0 x y u)))
(B (name impede) (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (impede-vb e0 x y u)))
(B (name constrict) (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (constrict-vb e0 x y u)))


;; Physical Harm: Protection

(B (name shield) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (shield-nn e0 x)))
(B (name shelter) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (shelter-nn e0 x)))
(B (name protection) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (protection-nn e0 x)))
(B (name cushion) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (cushion-nn e0 x)))
(B (name buffer) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (buffer-nn e0 x)))
(B (name dodge) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (dodge-nn e0 x)))
(B (name dodging) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (dodging-nn e0 x)))
(B (name evasion) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (evasion-nn e0 x)))
(B (name evasion) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (security-nn e0 x)))


(B (name shieldvb) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.2) (R#PROTECT-PATIENT y e0 :0.2) (R#PROTECT-AGENT x e0 :0.2)) (shield-vb e0 x y u2)))
(B (name cushionvb) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.2) (R#PROTECT-PATIENT y e0 :0.2) (R#PROTECT-AGENT x e0 :0.2)) (cushion-vb e0 x y u2)))
(B (name buffervb) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.2) (R#PROTECT-PATIENT y e0 :0.2) (R#PROTECT-AGENT x e0 :0.2)) (buffer-vb e0 x y u2)))
(B (name dodgevb) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.3) (R#PROTECT-AGENT x e0 :0.3)) (dodge-vb e0 x y u2)))
(B (name evadevb) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.3) (R#PROTECT-AGENT x e0 :0.3)) (evade-vb e0 x y u2)))
(B (name evadevb) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.3) (R#PROTECT-AGENT x e0 :0.3)) (secure-vb e0 x y u2)))
(B (name evadevb) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.3) (R#PROTECT-AGENT x e0 :0.3)) (^ (ward-vb e0 x y u2) (off-in e1 e0))))


(B (name from-theft) (=> (R#HARM-VICTIM y :0.9) (^ (S#PHYSICAL_HARM-PROTECTION e0) (from-in e1 e0 y))))

(B (name physical-harm-map) (=> (I#PHYSICAL_HARM  x :0.9) (S#PHYSICAL_HARM x)))
(B (name physical-harm-typemap) (=> (I#PHYSICAL_HARM%TYPE x y :0.9) (SS#PHYSICAL_HARM%TYPE x y)))
(B (name physical-harm-restraintmap) (=> (I#PHYSICAL_HARM%RESTRAINT x y :0.9) (SS#PHYSICAL_HARM%RESTRAINT x y)))
(B (name physical-harm-protectionmap) (=> (I#PHYSICAL_HARM%PROTECTION x y :0.9) (SS#PHYSICAL_HARM%PROTECTION x y)))


;; Maze

;; Maze: Confusing Pathways

(B (name web) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (web-nn e0 x)))
(B (name knot) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (knot-nn e0 x)))
; Katya and Ross decided to change these based on illogical output
(B (name maze) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (maze-nn e0 x)))
(B (name labyrinth) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (labyrinth-nn e0 x)))

(B (name labyrinth) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS e0 e0 :0.45)) (knot-vb e0 x y z)))


;; Maze: Navigation

(B (name navigate) (=> (^ (S#MAZE z :0.3) (SS#MAZE%NAVIGATION e0 z :0.3) (R#NAVIGATION-AGENT x e0 :0.3)) (navigate-vb e0 x y u)))


;; Maze: Obstruction

(B (name tangle) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45)) (tangle-nn e0 x)))
(B (name snarl) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45)) (snarl-nn e0 x)))
(B (name catch) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45)) (catch-nn e0 x)))

(B (name catchvb) (=> (^ (S#MAZE z :0.23) (SS#MAZE%OBSTRUCTION e0 z :0.23) (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23)) (catch-vb e0 x y u)))
(B (name catchvb) (=> (^ (S#MAZE z :0.23) (SS#MAZE%OBSTRUCTION e0 z :0.23) (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23)) (ensnare-vb e0 x y u)))
(B (name tanglevb) (=> (^ (S#MAZE z :0.3) (SS#MAZE%OBSTRUCTION e0 z :0.3) (R#OBSTRUCTION-PATIENT y e0 :0.3)) (tangle-vb e0 u y u1)))
(B (name entanglevb) (=> (^ (S#MAZE z :0.3) (SS#MAZE%OBSTRUCTION e0 z :0.3) (R#OBSTRUCTION-PATIENT y e0 :0.3)) (entangle-vb e0 u y u1)))
(B (name snarlvb) (=> (^ (S#MAZE z :0.3) (SS#MAZE%OBSTRUCTION e0 z :0.3) (R#OBSTRUCTION-PATIENT y e0 :0.3)) (snarl-vb e0 u y u1)))
(B (name hindervb) (=> (^ (S#MAZE z :0.3) (SS#MAZE%OBSTRUCTION e0 z :0.3) (R#OBSTRUCTION-PATIENT y e0 :0.3)) (hinder-vb e0 u y u1)))

(B (name entanglement) (=> (^ (S#MAZE e0 :0.3) (SS#MAZE%OBSTRUCTION x e0 :0.3)) (entanglement-nn e0 x)))

(B (name mazemap) (=> (I#MAZE x :0.9) (S#MAZE x)))
(B (name maze-confusing-pathwaysmap) (=> (I#MAZE%CONFUSING_PATHWAYS x y :0.9) (SS#MAZE%CONFUSING_PATHWAYS x y)))
(B (name maze-navigationmap) (=> (I#MAZE%NAVIGATION x y :0.9) (SS#MAZE%NAVIGATION x y)))
(B (name maze-obstructionmap) (=> (I#MAZE%OBSTRUCTION x y :0.9) (SS#MAZE%OBSTRUCTION x y)))


;; Low Point

;; Low Point: Bottom of Economic Scale

(B (name the-pits) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x e0 :0.45)) (pits-nn e0 x)))
;(B (name low) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x e0 :0.45)) (low-nn e0 x)))
;(B (name low) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE e0 e0 :0.45)) (low-adj e0 x)))
(B (name low) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE e0 e0 :0.45)) (^ (low-adj e0 x) (point-nn e1 x))))
(B (name rock-bottom) (=> (^ (S#LOW_POINT e2 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE y e2 :0.45)) (^ (rock-nn e0 x) (of-in e1 y x) (bottom-nn e2 y))))
(B (name bottom-of-the-heap) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x e0 :0.45)) (^ (bottom-nn e0 x) (of-in e1 x y) (heap-nn e2 y))))
(B (name bottom-of-the-totem-pole) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x e0 :0.45)) (^ (bottom-nn e0 x) (of-in e1 x z) (totem-nn e2 y) (pole-nn e3 z))))


;; Low Point: Movement Downward

(B (name slide) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (slide-vb e0 x y z))))
(B (name drop) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (drop-vb e0 x y z))))
(B (name slip) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (slip-vb e0 x y z))))
(B (name fall) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (fall-vb e0 x y z))))
(B (name tumble) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (tumble-vb e0 x y z))))
(B (name plummet) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (plummet-vb e0 x y z))))
(B (name sink) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (sink-vb e0 x y z))))
(B (name plunge) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (plunge-vb e0 x y z))))
(B (name dig-self-deeper) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e2 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e2) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1) (dig-vb e0 x y z) (deeper-adj e1 y))))


;; Low Point: Movement Upward

(B (name hover-above) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT a) (SS#BOTTOM_OF_ECONOMIC_SCALE u a) (hover-vb e0 x y z) (above-in e1 e0 w))))
(B (name rise-above) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT a) (SS#BOTTOM_OF_ECONOMIC_SCALE u a) (rise-vb e0 x y z) (above-in e1 e0 w))))
(B (name rise-above) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT a) (SS#BOTTOM_OF_ECONOMIC_SCALE u a) (rise-vb e0 x y z) (from-in e1 e0 w))))
(B (name rise-up-from) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT a) (SS#BOTTOM_OF_ECONOMIC_SCALE u a) (rise-vb e0 x y z) (up-in e1 e0 e2) (from-in e2 e1 w))))
;(B (name rise) (=> (^ (S#LOW_POINT a :0.3) (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (rise-vb e0 x y z)))
(B (name leap) (=> (^ (S#LOW_POINT a :0.3) (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (leap-vb e0 x y z)))
;(B (name skyrocket) (=> (^ (S#LOW_POINT a :0.3) (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (skyrocket-vb e0 x y z)))
(B (name jump) (=> (^ (S#LOW_POINT a :0.3) (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (jump-vb e0 x y z)))
(B (name boost) (=> (^ (S#LOW_POINT a :0.3) (SS#LOW_POINT%MOVEMENT_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (boost-vb e0 x y z)))

(B (name lowpointmap) (=> (I#LOW_POINT x :0.9) (S#LOW_POINT x)))
(B (name bottom-of-econ-scale-map) (=> (I#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x y :0.9) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x y)))
(B (name movement-downwardmap) (=> (I#LOW_POINT%MOVEMENT_DOWNWARD x y :0.9) (SS#LOW_POINT%MOVEMENT_DOWNWARD x y)))
(B (name movement-upwardmap) (=> (I#LOW_POINT%MOVEMENT_UPWARD x y :0.9) (SS#LOW_POINT%MOVEMENT_UPWARD x y)))


;; High Point

;; High Point: Top of Economic Scale

(B (name peak)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (peak-nn e0 x)))
(B (name pinnacle)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (pinnacle-nn e0 x)))
(B (name top)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (top-nn e0 x)))
(B (name summit)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (summit-nn e0 x)))
(B (name crest)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (crest-nn e0 x)))
(B (name cap)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (cap-nn e0 x)))
(B (name soar)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (soar-nn e0 x)))
(B (name high-point)
   (=> (^ (S#HIGH_POINT e0 :0.45)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (^ (high-adj e1 x) (point-nn e0 x))))

(B (name crest2)
   (=> (^ (S#HIGH_POINT e0 :0.3)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (crest-vb e0 x y u1)))
(B (name cap2)
   (=> (^ (S#HIGH_POINT e0 :0.3)
          (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45))
       (cap-vb e0 x y u1)))


;; High Point: Movement Backward/Downward

(B (name drop)
   (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3)
          (R#MOVE-D-PATIENT x e0 :0.3))
       (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a)
          (drop-vb e0 x y u1))))
(B (name fall)
   (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3)
          (R#MOVE-D-PATIENT x e0 :0.3))
       (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a)
          (fall-vb e0 x y u1))))
(B (name slide)
   (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3)
          (R#MOVE-D-PATIENT x e0 :0.3))
       (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a)
          (slide-vb e0 x y u1))))
(B (name slip)
   (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3)
          (R#MOVE-D-PATIENT x e0 :0.3))
       (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a)
          (slip-vb e0 x y u1))))


;; High Point: Movement Forward/Upward

(B (name climb)
   (=> (^ (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD e0 a :0.3)
          (R#MOVE-U-PATIENT x e0 :0.3))
       (^ (S#HIGH_POINT z) (SS#TOP_OF_ECONOMIC_SCALE z a) (climb-vb e0 x y u1)
          (to-in e1 e0 z))))
(B (name rise)
   (=> (^ (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD e0 a :0.3)
          (R#MOVE-U-PATIENT x e0 :0.3))
       (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (rise-vb e0 x y u1)
          (to-in e1 e0 z))))
(B (name boost)
   (=> (^ (S#HIGH_POINT a :0.3)
          (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD e0 a :0.3)
          (R#MOVE-U-PATIENT x e0 :0.3)) (boost-vb e0 x y z)))


;; High Point: Mapping Axioms

(B (name highpoint-map)
   (=> (I#HIGH_POINT x :0.9)
       (S#HIGH_POINT x)))
(B (name top-of-econ-scale-map)
   (=> (I#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x y :0.9)
       (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x y)))
(B (name movement-downward-map)
   (=> (I#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD x y :0.9)
       (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD x y)))
(B (name movement-upward-map)
   (=> (I#HIGH_POINT%MOVEMENT_FORWARD_UPWARD x y :0.9)
       (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD x y)))


:; Resource

;; Resource: Substance

(B (name mass)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (mass-nn e0 x)))
(B (name material)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (material-nn e0 x)))
(B (name concentration)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (concentration-nn e0 x)))
(B (name concentrate)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (concentrate-nn e0 x)))

(B (name dilute)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE e0 e0 :0.45))
       (dilute-vb e0 x y z)))


;; Resource: Quantity/Size

;(B (name fortune)
;   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.45))
;       (fortune-nn e0 x)))
(B (name sliver)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.3)
          (R#SMALL-AMOUNT x e0 :0.3))
       (sliver-nn e0 x)))

(B (name sparse)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%QUANTITY_SIZE e0 e0 :0.3)
          (R#SMALL-AMOUNT x e0 :0.3))
       (sparse-adj e0 x)))

(B (name deplete)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (disperse-vb e0 x y u)))
(B (name deplete)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (deplete-vb e0 x y u)))
(B (name cut)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (cut-vb e0 x y u) (TS#TAXATION y))))
(B (name increase)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (increase-vb e0 x y u) (TS#TAXATION y))))
(B (name reduce)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (reduce-vb e0 x y u) (TS#TAXATION y))))


;; Resource: Develop Resources

(B (name invest)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.3)
          (R#DEVELOPER x e0 :0.3))
       (invest-vb e0 x y u)))
(B (name deposit)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.3)
          (R#DEVELOPER x e0 :0.3))
       (deposit-vb e0 x y u)))
;(B (name grow)
;   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.3)
;          (R#DEVELOPER x e0 :0.3))
;       (grow-vb e0 x y u)))
(B (name accumulate)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.3)
          (R#DEVELOPER x e0 :0.3))
       (accumulate-vb e0 x y u)))
(B (name bank-vb)
   (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.3)
          (R#DEVELOPER x e0 :0.3))
       (bank-vb e0 x y u)))

(B (name bank)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (bank-nn e0 x)))
(B (name investment)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (investment-nn e0 x)))
(B (name accumulation)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (accumulation-nn e0 x)))
(B (name growth)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (growth-nn e0 x)))
(B (name growth)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (mine-nn e0 x)))


;; Resource: Distribution

(B (name transfer)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (transfer-vb e0 x y u)))
(B (name distribute)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (distribute-vb e0 x y u)))
(B (name spread)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (^ (TS#WEALTH y) (spread-vb e0 x y u))))
(B (name spread)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (spread-vb e0 x y u)))
(B (name underwrite)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#SUPPORTER x e0 :0.33))
       (underwrite-vb e0 x y u)))
(B (name sort)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (sort-vb e0 x y u)))

(B (name distribution)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DISTRIBUTION x e0 :0.45))
       (distribution-nn e0 x)))


;; Resource: Mapping

(B (name resource-map)
   (=> (I#RESOURCE x :0.9)
       (S#RESOURCE x)))
(B (name substance-map)
   (=> (I#RESOURCE%SUBSTANCE x y :0.9)
       (SS#RESOURCE%SUBSTANCE x y)))
(B (name quantity-map)
   (=> (I#RESOURCE%QUANTITY_SIZE x y :0.9)
       (SS#RESOURCE%QUANTITY_SIZE x y)))
(B (name distribution-map)
   (=> (I#RESOURCE%DISTRIBUTION x y :0.9)
       (SS#RESOURCE%DISTRIBUTION x y)))
(B (name develop-resources-map)
   (=> (I#RESOURCE%DEVELOP_RESOURCES x y :0.9)
       (SS#RESOURCE%DEVELOP_RESOURCES x y)))


;; Human Body

;; Human Body: Death

; (B (name dying)
;    (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3)
;           (R#DEATH-PATIENT x e0 :0.3))
;        (die-vb e0 x y u)))
; (B (name breathe-last-breath)
;    (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3)
;           (R#DEATH-PATIENT x e0 :0.3))
;        (^ (breathe-vb e0 x y u) (last-adj e1 y) (breath-nn e2 y))))
; (B (name buy-the-farm)
;    (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3)
;           (R#DEATH-PATIENT x e0 :0.3))
;        (^ (buy-vb e0 x y u) (farm-nn e1 y))))
; (B (name croak)
;    (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3)
;           (R#DEATH-PATIENT x e0 :0.3))
;        (croak-vb e0 x y u)))
; (B (name decay)
;    (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3)
;        (R#DEATH-PATIENT x e0 :0.3))
;    (decay-vb e0 x y u)))
; (B (name expire) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (expire-vb e0 x y u)))
; (B (name pass-away) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (pass-vb e0 x y u) (away-rb e1 e0))))
; (B (name perish) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (perish-vb e0 x y u)))
; (B (name rot) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (rot-vb e0 x y u)))
; (B (name rot-away) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (rot-vb e0 x y u) (away-rb e1 e0))))
; (B (name take-last-breath) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (take-vb e0 x y u) (last-adj e1 y) (breath-nn e2 y))))
; (B (name wither) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (wither-vb e0 x y u)))

; (B (name dead) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (dead-adj e0 x)))
; (B (name deceased) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (deceased-adj e0 x)))

; (B (name death) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATHe0 :0.3 x)) (death-nn e0 x)))
; (B (name deceased-nn) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (deceased-nn e0 x)))
; (B (name fatality) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%DEATHe0 :0.3 x) (R#DEATH-PATIENT x e0 :0.3)) (fatality-nn e0 x)))


;; Human Body: Living

; (B (name live) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (live-vb e0 x y u)))
; (B (name thrive) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (thrive-vb e0 x y u)))
; (B (name flourish) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (flourish-vb e0 x y u)))

; (B (name alive) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (alive-adj e0 y)))


;; Human Body: Health

; (B (name reviving) (=> (^ (S#HUMAN_BODY e0 :0.3) (SS#HUMAN_BODY%HEALTH x e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (revive-vb e0 x y u)))


;; Human Body: Component

(B (name backbone) (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45)) (backbone-nn e0 x)))
(B (name face) (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45)) (face-nn e0 x)))
(B (name hand) (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45)) (hand-nn e0 x)))
(B (name hand) (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45)) (skin-nn e0 x)))
(B (name hand) (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45)) (heart-nn e0 x)))
(B (name hand) (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45)) (brain-nn e0 x)))

(B (name human-bodymap) (=> (I#HUMAN_BODY x :0.9) (S#HUMAN_BODY x)))
; (B (name human-body-deathmap) (=> (I#DEATHx :0.9) (SS#DEATH x y)))
; (B (name human-body-livingmap) (=> (I#LIVINGx :0.9) (SS#LIVING x y)))
; (B (name human-body-healthmap) (=> (I#HEALTH x y :0.9) (SS#HEALTH x y)))
(B (name human-body-componentmap) (=> (I#HUMAN_BODY%COMPONENT x y :0.9) (SS#HUMAN_BODY%COMPONENT x y)))


;; Victim

;; Victim: Sufferer

; (B (name threatened) (=> (^ (S#VICTIM e0 :0.3) (SS#VICTIM%SUFFERER x e0 :0.3) (R#VICTIMIZE-PATIENT x e0 :0.3)) (threatened-adj e0 x)))
; (B (name victim) (=> (^ (S#VICTIM e0 :0.3) (SS#VICTIM%SUFFERER x e0 :0.3) (R#VICTIMIZE-PATIENT x e0 :0.3)) (victim-nn e0 x)))
; (B (name prey) (=> (^ (S#VICTIM e0 :0.3) (SS#VICTIM%SUFFERER x e0 :0.3) (R#VICTIMIZE-PATIENT x e0 :0.3)) (prey-nn e0 x)))
; (B (name sufferer) (=> (^ (S#VICTIM e0 :0.3) (SS#VICTIM%SUFFERER x:0.3 x) (R#VICTIMIZE-PATIENT x e0 :0.3)) (sufferer-nn e0 x)))


;; Victim: Victimizer

; (B (name vampire) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%VICTIMIZER x z :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (vampire-nn e0 x)))
; (B (name victimizer) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%VICTIMIZER x z :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (victimizer-nn e0 x)))
; (B (name dracula) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%VICTIMIZER x z :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (dracula-nn e0 x)))

; (B (name victimize) (=> (^ (S#VICTIM y :0.3) (SS#VICTIM%VICTIMIZER e0 y :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (victimize-vb e0 x y u)))


;; Victim: Champion

; (B (name champion) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%CHAMPION x z :0.3) (R#CHAMPION x e0 :0.3)) (champion-nn e0 x)))
; (B (name knight) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%CHAMPION x z :0.3) (R#CHAMPION x e0 :0.3)) (knight-nn e0 x)))
; (B (name superman) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%CHAMPION x z :0.3) (R#CHAMPION x e0 :0.3)) (superman-nn e0 x)))
; (B (name superhero) (=> (^ (S#VICTIM z :0.3) (SS#VICTIM%CHAMPION x z :0.3) (R#CHAMPION x e0 :0.3)) (superhero-nn e0 x)))

; (B (name save) (=> (^ (S#VICTIM y :0.3) (SS#VICTIM%CHAMPION e0 y :0.3) (R#CHAMPION x e0 :0.3)) (victimize-vb e0 x y u)))

; (B (name victimmap) (=> (I#VICTIM x :0.9) (S#VICTIM x)))
; (B (name sufferermap) (=> (I#VICTIM%SUFFERER x y :0.9) (SS#VICTIM%SUFFERER x y)))
; (B (name victimizermap) (=> (I#VICTIM%VICTIMIZER x y :0.9) (SS#VICTIM%VICTIMIZER x y)))
; (B (name championmap) (=> (I#VICTIM%CHAMPION x y :0.9) (SS#VICTIM%CHAMPION x y)))


;; Building

;; Building: Type

(B (name house) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (house-nn e0 x)))
(B (name home) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (home-nn e0 x)))
(B (name skyscraper) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (skyscraper-nn e0 x)))
(B (name mansion) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (mansion-nn e0 x)))
(B (name palace) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (palace-nn e0 x)))
(B (name castle) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (castle-nn e0 x)))


;; Building: Structure

(B (name building) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (building-nn e0 x)))
(B (name structure) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (structure-nn e0 x)))
(B (name honeycomb) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (honeycomb-nn e0 x)))
(B (name edifice) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (edifice-nn e0 x)))
(B (name basement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (basement-nn e0 x)))

(B (name basement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (architechture-nn e0 x)))

(B (name honeycomb) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE e0 e0 :0.45)) (honeycomb-vb e0 x y z)))


;; Building: Creation/Destruction

(B (name build) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3 ) (R#CREATING e0 e0 :0.3)) (build-vb e0 x y u)))
(B (name construct) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (construct-vb e0 x y u)))
(B (name fix) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (fix-vb e0 x y u)))

(B (name destroy) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#DESTRUCTION e0 e0 :0.3)) (^ (SS#BUILDING%TYPE y) (destroy-vb e0 x y u))))
(B (name destroy) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#DESTRUCTION e0 e0 :0.3)) (^ (SS#BUILDING%STRUCTURE y) (destroy-vb e0 x y u))))
(B (name create) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATION e0 e0 :0.3)) (^ (SS#BUILDING%TYPE y) (create-vb e0 x y u))))
(B (name create) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATION e0 e0 :0.3)) (^ (SS#BUILDING%STRUCTURE y) (create-vb e0 x y u))))
(B (name create) (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33) (R#CREATION e0 e0 :0.33)) (create-vb e0 x y u)))
(B (name create) (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33) (R#DESTRUCTION e0 e0 :0.33)) (destroy-vb e0 x y u)))
(B (name demolish) (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33) (R#DESTRUCTION e0 e0 :0.33)) (demolish-vb e0 x y u)))

(B (name deconstruct) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#DESTRUCTION e0 e0 :0.3)) (deconstruct-vb e0 x y u)))
(B (name ruin) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#DESTRUCTION e0 e0 :0.3)) (ruin-vb e0 x y u)))

(B (name deconstruction) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.3) (R#DESTRUCTION x e0 :0.3)) (deconstruction-nn e0 x)))
(B (name destruction) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.3) (R#DESTRUCTION x e0 :0.3)) (destruction-nn e0 x)))
(B (name demolition) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.3) (R#DESTRUCTION x e0 :0.3)) (demolition-nn e0 x)))


;; Building: Components

(B (name foundation) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (foundation-nn e0 x)))
(B (name base) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (base-nn e0 x)))

(B (name building-block) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (^ (building-nn e0 x) (of-in e1 y x) (block-nn e2 y))))
(B (name support-beam) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (^ (support-nn e0 x) (of-in e1 y x) (beam-nn e2 y))))
(B (name cement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (cement-nn e0 x)))
(B (name brick) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (brick-nn e0 x)))
(B (name concrete) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (concrete-nn e0 x)))
(B (name mortar) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (mortar-nn e0 x)))
;; ##RI: sand might evoke weakness as opposed to support?
;(B (name sand) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (sand-nn e0 x)))
(B (name stone) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (stone-nn e0 x)))
(B (name keystone) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (keystone-nn e0 x)))
(B (name wall) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (wall-nn e0 x)))
(B (name wall) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (ceiling-nn e0 x)))
(B (name wall) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (elevator-nn e0 x)))

(B (name support-structure) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (^ (support-nn e0 x) (of-in e1 y x) (structure-nn e2 y))))


;; Building: Support

(B (name cement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45)) (support-nn e0 x)))
(B (name ruin) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.3 :0.45)) (support-vb e0 x y u)))

(B (name cement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45)) (buttress-nn e0 x)))
(B (name ruin) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.3 :0.45)) (buttress-vb e0 x y u)))

(B (name cement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45)) (pillar-nn e0 x)))
(B (name cement) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45)) (underpinning-nn e0 x)))

(B (name ruin) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.3 :0.45)) (underpin-vb e0 x y u)))

(B (name buildingmap) (=> (I#BUILDING x :0.9) (S#BUILDING x)))
(B (name structuremap) (=> (I#BUILDING%STRUCTURE x y :0.9) (SS#BUILDING%STRUCTURE x y)))
(B (name creation_destructionmap) (=> (I#BUILDING%CREATION-DESTRUCTION x y :0.9) (SS#BUILDING%CREATION_DESTRUCTION x y)))
(B (name componentsmap) (=> (I#BUILDING%COMPONENTS x y :0.9) (SS#BUILDING%COMPONENTS x y)))


;; Pathway

;; Pathway: Type

(B (name pathway) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (pathway-nn e0 x)))
(B (name road-to) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (^ (road-nn e0 x) (to-in e1 x z))))
(B (name road) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (road-nn e0 x)))
(B (name path) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (path-nn e0 x)))
(B (name bridge) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (bridge-nn e0 x)))
(B (name passage) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (passage-nn e0 x)))
(B (name route) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (route-nn e0 x)))
(B (name street) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (street-nn e0 x)))
(B (name avenue) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (avenue-nn e0 x)))
(B (name trail) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (trail-nn e0 x)))
(B (name corridor) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (corridor-nn e0 x)))
(B (name walkway) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (walkway-nn e0 x)))
(B (name trajectory) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (trajectory-nn e0 x)))
(B (name trajectory) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (highway-nn e0 x)))
(B (name trajectory) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (avenue-nn e0 x)))


;; Pathway: Open Path

(B (name clear-path) (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE x e1) (clear-adj e0 x))))
(B (name open-path) (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE x e1) (open-adj e0 x))))

(B (name open-path) (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (clear-vb e0 x y z))))
(B (name open-path) (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (open-vb e0 x y z))))
(B (name build-path) (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (build-vb e0 x y z))))
(B (name forge-path) (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (forge-vb e0 x y z))))


;; Pathway: Obstructed Path

(B (name obstructed-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)  (^ (S#PATHWAY e1) (SS#TYPE x e1) (obstructed-adj e0 x))))
(B (name blocked-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)  (^ (S#PATHWAY e1) (SS#TYPE x e1) (blocked-adj e0 x))))
(B (name closed-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)  (^ (S#PATHWAY e1) (SS#TYPE x e1) (closed-adj e0 x))))
(B (name clogged-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)  (^ (S#PATHWAY e1) (SS#TYPE x e1) (clogged-adj e0 x))))
(B (name jammed-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)  (^ (S#PATHWAY e1) (SS#TYPE x e1) (jammed-adj e0 x))))

(B (name close-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (close-vb e0 x y z))))
(B (name block-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (block-vb e0 x y z))))
(B (name obstruct-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (obstruct-vb e0 x y z))))
(B (name clog-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (clog-vb e0 x y z))))
(B (name jam-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9) (^ (S#PATHWAY e1) (SS#TYPE y e1) (jam-vb e0 x y z))))

(B (name barricade) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.45)) (barricade-vb e0 x y z)))
(B (name bar) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.45)) (bar-vb e0 x y z)))
(B (name hinder) (=> (^ (S#PATHWAY e0 :0.4) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.4)) (hinder-vb e0 x y z)))

(B (name barricadenn) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45)) (barricade-nn e0 x )))
(B (name roadblock) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45)) (roadblock-nn e0 x)))
(B (name impedement) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45)) (impedement-nn e0 x)))


(B (name pathwaymap) (=> (I#PATHWAY x :0.9) (S#PATHWAY x)))
(B (name pathway-typemap) (=> (I#PATHWAY%TYPE x y :0.9) (SS#PATHWAY%TYPE x y)))
(B (name open-pathmap) (=> (I#PATHWAY%OPEN_PATH x y :0.9) (SS#PATHWAY%OPEN_PATH x y)))
(B (name obstructed-pathmap) (=> (I#PATHWAY%OBSTRUCTED_PATH x y :0.9) (SS#PATHWAY%OBSTRUCTED_PATH x y)))


;; Portal

;; Portal: Means of Entry

(B (name gateway) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (gateway-nn e0 x)))
(B (name door) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (door-nn e0 x)))
(B (name threshold) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (threshold-nn e0 x)))
(B (name doorway) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (doorway-nn e0 x)))
(B (name entrance) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (entrance-nn e0 x)))
(B (name entry) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (entry-nn e0 x)))
(B (name entryway) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (entryway-nn e0 x)))
(B (name gate) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (gate-nn e0 x)))
(B (name portal) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (portal-nn e0 x)))
(B (name turnstile) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (turnstile-nn e0 x)))


;; Portal: Obstacles

(B (name narrow) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.90) (^ (S#PORTAL e1) (SS#MEANS_OF_ENTRY x e1) (narrow-adj e0 x))))

(B (name obstructed-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)  (^ (S#PORTAL e1) (SS#TYPE x e1) (obstructed-adj e0 x))))
(B (name blocked-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)  (^ (S#PORTAL e1) (SS#TYPE x e1) (blocked-adj e0 x))))
(B (name closed-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)  (^ (S#PORTAL e1) (SS#TYPE x e1) (closed-adj e0 x))))
(B (name clogged-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)  (^ (S#PORTAL e1) (SS#TYPE x e1) (clogged-adj e0 x))))
(B (name jammed-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)  (^ (S#PORTAL e1) (SS#TYPE x e1) (jammed-adj e0 x))))

(B (name close-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9) (^ (S#PORTAL e1) (SS#TYPE y e1) (close-vb e0 x y z))))
(B (name block-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9) (^ (S#PORTAL e1) (SS#TYPE y e1) (block-vb e0 x y z))))
(B (name obstruct-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9) (^ (S#PORTAL e1) (SS#TYPE y e1) (obstruct-vb e0 x y z))))
(B (name clog-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9) (^ (S#PORTAL e1) (SS#TYPE y e1) (clog-vb e0 x y z))))
(B (name jam-path) (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9) (^ (S#PORTAL e1) (SS#TYPE y e1) (jam-vb e0 x y z))))

(B (name portalmap) (=> (I#PORTAL e0 :0.9) (S#PORTAL x)))
(B (name meansofentrymap) (=> (I#PORTAL%MEANS_OF_ENTRY x y :0.9) (SS#PORTAL%MEANS_OF_ENTRY x y)))
(B (name obstaclesmap) (=> (I#PORTAL%OBSTACLES x y :0.9) (SS#PORTAL%OBSTACLES x y)))


;; Physical Object

;; Physical Object: Type

;(B (name mass) (=> (^ (S#PHYSICAL_OBJECT e0 :0.45) (SS#PHYSICAL_OBJECT%TYPE x e0 :0.45)) (mass-nn e0 x)))
(B (name adhere) (=> (^ (S#PHYSICAL_OBJECT e0 :0.45) (SS#PHYSICAL_OBJECT%TYPE x e0 :0.45)) (adhere-vb e0 x y z)))


;; Physical Object: Possession

;; ##RI: "have" is likely very important here, but might generate a lot of
;; false positives.

;(B (name have) (=> (^ (S#PHYSICAL_OBJECT y :0.33) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.33) (R#POSSESSOR x :0.33)) (have-vb e0 x y u)))
(B (name possess) (=> (^ (S#PHYSICAL_OBJECT y :0.33) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.33) (R#POSSESSOR x e0 :0.33)) (possess-vb e0 x y u)))
(B (name own) (=> (^ (S#PHYSICAL_OBJECT y :0.33) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.33) (R#POSSESSOR x e0 :0.33)) (own-vb e0 x y u)))

(B (name ownership) (=> (^ (S#PHYSICAL_OBJECT y :0.45) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.45)) (ownership-n e0 x)))
(B (name possession) (=> (^ (S#PHYSICAL_OBJECT y :0.45) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.45)) (possession-n e0 x)))


;; Physical Object: Transfer

;(B (name receive) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.33) (R#RECEIVER x e0 :0.33)) (receive-vb e0 x y u)))
;(B (name obtain) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.33) (R#RECEIVER x e0 :0.33)) (obtain-vb e0 x y u)))
;(B (name deliver) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (deliver-vb e0 x y u)))
;(B (name hand) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (hand-vb e0 x y u)))
;(B (name toss) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (toss-vb e0 x y u)))
;(B (name throw) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (throw-vb e0 x y u)))
;; ##RI: These will overgenerate like crazy, so I'm not adding them.
;(B (name get) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.33) (R#RECEIVER x e0 :0.33)) (get-vb e0 x y u)))
;(B (name give) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (give-vb e0 x y u)))

(B (name physical-objectmap) (=> (I#PHYSICAL_OBJECT x :0.9) (S#PHYSICAL_OBJECT x)))
(B (name physical-object-typemap) (=> (I#PHYSICAL_OBJECT%TYPE x y :0.9) (SS#PHYSICAL_OBJECT%TYPE x y)))
(B (name possessionmap) (=> (I#PHYSICAL_OBJECT%POSSESSION x y :0.9) (SS#PHYSICAL_OBJECT%POSSESSION x y)))
(B (name transfermap) (=> (I#PHYSICAL_OBJECT%TRANSFER x y :0.9) (SS#PHYSICAL_OBJECT%TRANSFER x y)))


;; Darkness

(B (name darkness) (=> (^ (S#DARKNESS e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (darkness-nn e0 x)))
(B (name blackness) (=> (^ (S#DARKNESS e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (blackness-nn e0 x)))
(B (name cave) (=> (^ (S#DARKNESS e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (cave-nn e0 x)))
(B (name dark-days) (=> (^ (S#DARKNESS e0 :0.3) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.3) (R#DARK x e0 :0.3)) (^ (dark-adj e0 x) (day-nn e1 x))))
(B (name dark-cloud) (=> (^ (S#DARKNESS e0 :0.3) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.3) (R#DARK x e0 :0.3)) (^ (dark-adj e0 x) (cloud-nn e1 x))))


(B (name dark) (=> (^ (S#DARKNESS x e0 :0.3) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#DARK x e0 :0.3)) (dark-adj e0 x)))

(B (name dark) (=> (^ (S#DARKNESS e0 e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.45)) (benight-vb e0 x y z)))


;; Darkness: Movement in the Range

(B (name darken) (=> (^ (S#DARKNESS x e0 :0.3) (SS#DARKNESS%MOVEMENT_IN_THE_RANGE x e0 :0.3) (R#DARK y e0 :0.3)) (darken-vb e0 x y u)))

(B (name darknessmap) (=> (I#DARKNESS x :0.9) (S#DARKNESS x)))
(B (name dark-end-of-rangemap) (=> (I#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x y :0.9) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x y)))
(B (name darkness-movementmap) (=> (I#DARKNESS%MOVEMENT x y :0.9) (SS#DARKNESS%MOVEMENT x y)))


;; Light

(B (name light) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (light-nn e0 x)))
(B (name light) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (illumination-nn e0 x)))
(B (name sun) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (sun-nn e0 x)))
(B (name brilliance) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (brilliance-nn e0 x)))
(B (name radiance) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (radiance-nn e0 x)))
(B (name gleam) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (gleam-nn e0 x)))
(B (name glare) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (glare-nn e0 x)))
(B (name luster) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (luster-nn e0 x)))

(B (name light-a) (=> (^ (S#LIGHT x e0 :0.3) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#LIGHT x e0 :0.3)) (light-adj e0 x)))
(B (name sunny) (=> (^ (S#LIGHT x e0 :0.3) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#LIGHT x e0 :0.3)) (sunny-adj e0 x)))
(B (name bright) (=> (^ (S#LIGHT x e0 :0.3) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#LIGHT x e0 :0.3)) (bright-adj e0 x)))

(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%MOVEMENT e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (enlighten-vb e0 x y z)))
(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%MOVEMENT e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (lighten-vb e0 x y z)))
(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%MOVEMENT e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (brighten-vb e0 x y z)))


;; Light: Illumination

(B (name shine) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (shine-vb e0 x y z)))
(B (name illuminate) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (illuminate-vb e0 x y z)))
(B (name illuminate) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (reflect-vb e0 x y z)))
(B (name illuminate) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (radiate-vb e0 x y z)))

(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (shining-nn e0 x)))
(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (illumination-nn e0 x)))
(B (name reflection) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (reflection-nn e0 x)))
(B (name reflection) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (brightness-nn e0 x)))

(B (name lightmap) (=> (I#LIGHT x :0.9) (S#LIGHT x)))
(B (name dark-end-of-rangemap) (=> (I#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x y :0.9) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x y)))
(B (name light-movementmap) (=> (I#LIGHT%MOVEMENT x y :0.9) (SS#LIGHT%MOVEMENT x y)))


;; Obesity

;; Obesity: Excess Body Weight

(B (name bloated) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (bloated-adj e0 x)))
(B (name engorged) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (engorged-adj e0 x)))
(B (name fatter) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (fatter-adj e0 x)))

(B (name fatter) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.45)) (obesity-nn e0 x)))

(B (name girth) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.45)) (girth-nn e0 x)))
(B (name fat-cat) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (^ (fat-adj e0 x) (cat-nn e1 x))))


;; Obesity: Excess Consumption

(B (name gluttony) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.45)) (gluttony-nn e0 x)))
(B (name hogs-at-trough) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.45)) (^ (hogs-nn e0 x) (at-in e1 x y) (trough-nn e2 y))))

(B (name gobble) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (^ (gobble-vb e0 x y u) (up-in e1 e0 z))))
(B (name eat) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (^ (eat-vb e0 x y u) (up-in e1 e0 z))))
(B (name feast) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (feast-vb e0 x y u)))
(B (name overeat) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (overeat-vb e0 x y u)))
;; ##RI: This will probably over-generate
;(B (name eat) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (eat-vb e0 x y u)))

(B (name ravenous) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (ravenous-adj e0 x)))

(B (name obesitymap) (=> (I#OBESITY x :0.9) (S#OBESITY x)))
(B (name excess-body-weightmap) (=> (I#OBESITY%BODY-WEIGHT x y :0.9) (SS#OBESITY%EXCESS_BODY_WEIGHT x y)))
(B (name excess-consumptionmap) (=> (I#OBESITY%CONSUMPTION x y :0.9) (SS#OBESITY%EXCESS_CONSUMPTION x y)))


;; Parasite

;; Parasite: Destructive Being

(B (name leech) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (leech-nn e0 x)))
(B (name parasite) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (parasite-nn e0 x)))
(B (name louse) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (louse-nn e0 x)))
(B (name mosquito) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (mosquito-nn e0 x)))
(B (name bloodsucker) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (bloodsucker-nn e0 x)))

(B (name drain-the-lifeblood) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (drain-vb e0 x y u) (lifeblood-nn e1 y))))
(B (name suck-the-lifeblood) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (suck-vb e0 x y u) (lifeblood-nn e1 y))))
(B (name drain-the-blood) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (drain-vb e0 x y u) (blood-nn e1 y))))
(B (name suck-the-blood) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (suck-vb e0 x y u) (blood-nn e1 y))))
(B (name leech) (=> (^ (S#PARASITE e0 :0.3) (SS#PARASITE%ACTION e0 e0 :0.3) (R#PARASITE-AGENT x e0 :0.3)) (leech-vb e0 x y u)))

(B (name leech) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%ACTION x e0 :0.45)) (infestation-nn e0 x)))

(B (name parasitemap) (=> (I#PARASITE x :0.9) (S#PARASITE x)))
(B (name destructive-beingmap) (=> (I#PARASITE%DESTRUCTIVE_BEING x y :0.9) (SS#PARASITE%DESTRUCTIVE_BEING x y)))
(B (name destructive-beingmap) (=> (I#PARASITE%ACTION x y :0.9) (SS#PARASITE%ACTION x y)))


;; Vision

;; Vision: Blindness

(B (name blind) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#BLIND x e0 :0.3)) (blind-adj e0 x)))
(B (name myopic) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#BLIND x e0 :0.3)) (myopic-adj e0 x)))

(B (name blindness) (=> (^ (S#VISION e0 :0.45) (SS#VISION%BLINDNESS x e0 :0.45)) (blindness-nn e0 x)))
(B (name dazzle) (=> (^ (S#VISION e0 :0.45) (SS#VISION%BLINDNESS x e0 :0.45)) (dazzle-nn e0 x)))

(B (name blindvb) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#BLIND y e0 :0.3)) (blind-vb e0 x y z)))
(B (name dazzlevb) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#BLIND y e0 :0.3)) (dazzle-vb e0 x y z)))

(B (name invisible) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#INVISIBLE x e0 :0.3)) (invisible-adj e0 x)))
(B (name hidden) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#INVISIBLE x e0 :0.3)) (hidden-adj e0 x)))


;; Vision: Seeing

(B (name picture) (=> (^ (S#VISION e0 :0.45) (SS#VISION%SEEING x e0 :0.45)) (picture-nn e0 x)))

(B (name open-eyes) (=> (^ (S#VISION e1 :0.45) (SS#VISION%SEEING x e1 :0.45)) (^ (open-adj e0 x) (eye-nn e1 x))))

;(B (name see) (=> (^ (S#VISION e0 :0.3) (SS#VISION%SEEING x e0 e0 :0.3) (R#SIGHTED y e0 :0.3)) (see-vb e0 x y z)))
(B (name see) (=> (^ (S#VISION e0 :0.3) (SS#VISION%SEEING x e0 e0 :0.3) (R#SIGHTED y e0 :0.3)) (picture-vb e0 x y z)))

(B (name visionmap) (=> (I#VISION x :0.9) (S#VISION x)))
(B (name blindnessmap) (=> (I#VISION%BLINDNESS x y :0.9) (SS#VISION%BLINDNESS x y)))
(B (name seeingmap) (=> (I#VISION%SEEING x y :0.9) (SS#VISION%SEEING x y)))


;; Monster

;; Monster: Type

(B (name monster) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (monster-nn e0 x)))
(B (name frankenstein) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (frankenstein-nn e0 x)))
(B (name frankensteins-monster) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (^ (monster-nn e0 x) (of-in e1 x y) (frankenstein-nn e2 y))))
(B (name beast) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (beast-nn e0 x)))
(B (name creature) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (creature-nn e0 x)))
(B (name fiend) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (fiend-nn e0 x)))
(B (name giant) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (giant-nn e0 x)))
(B (name troll) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (troll-nn e0 x)))
(B (name werewolf) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (werewolf-nn e0 x)))
(B (name zombie) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (zombie-nn e0 x)))
;(B (name specter) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (specter-nn e0 x)))
(B (name vampire) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (vampire-nn e0 x)))
(B (name dragon) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (dragon-nn e0 x)))
(B (name godzilla) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (godzilla-nn e0 x)))


;; Monster: Action

(B (name scare) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (scare-vb e0 x y u)))
(B (name threaten) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (threaten-vb e0 x y u)))
(B (name terrify) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (terrify-vb e0 x y u)))
(B (name devour) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (devour-vb e0 x y u)))
;(B (name suck) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (suck-vb e0 x y u)))
(B (name suck) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (terrorize-vb e0 x y u)))

(B (name monstermap) (=> (I#MONSTER x :0.9) (S#MONSTER x)))
(B (name monster-typemap) (=> (I#MONSTER%TYPE x y :0.9) (SS#MONSTER%TYPE x y)))
(B (name monster-typemap) (=> (I#MONSTER%ACTION x y :0.9) (SS#MONSTER%ACTION x y)))


;; Schism

;; Schism: Type

(B (name schism) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (schism-nn e0 x)))
(B (name schism) (=> (SS#SCHISM%TYPE x e1 :0.9) (^ (deep-adj e1 x) (SS#SCHISM%TYPE x e0))))
(B (name gap) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (gap-nn e0 x)))
(B (name chasm) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (chasm-nn e0 x)))
(B (name separation) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (separation-nn e0 x)))
(B (name divide) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (divide-nn e0 x)))
(B (name expanse) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (expanse-nn e0 x)))
(B (name polarization) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (polarization-nn e0 x)))


;; Schism: Distances

(B (name schism) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%DISTANCES x e0 :0.45)) (^ (distance-nn e0 x) (between-in e1 x y))))

(B (name schismmap) (=> (I#SCHISM x :0.9) (S#SCHISM x)))
(B (name schism-typemap) (=> (I#SCHISM%TYPE x y :0.9) (SS#SCHISM%TYPE x y)))
(B (name schism-distancesmap) (=> (I#SCHISM%DISTANCES x y :0.9) (SS#SCHISM%DISTANCES x y)))


;; Forceful Extraction

;; Forceful Extraction: Type

(B (name squeeze) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (squeeze-vb e0 x y u)))
(B (name wring) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (wring-vb e0 x y u)))
(B (name vacuum) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (vacuum-vb e0 x y u)))
(B (name extract) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (extract-vb e0 x y u)))
(B (name wrest) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (wrest-vb e0 x y u)))
(B (name tug) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (tug-vb e0 x y u)))
(B (name milk) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (milk-vb e0 x y u)))
(B (name skin) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (skin-vb e0 x y u)))
(B (name fleece) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (fleece-vb e0 x y u)))
(B (name shear) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (shear-vb e0 x y u)))
(B (name wring) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (wring-vb e0 x y u)))
(B (name wring) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (pluck-vb e0 x y u)))

(B (name extraction) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (extraction-nn e0 x)))
(B (name extortion) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (extortion-nn e0 x)))

;(B (name leech) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (leech-nn e0 x)))
;(B (name parasite) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (parasite-nn e0 x)))
;(B (name bloodsucker_fe) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (bloodsucker-nn e0 x)))
;(B (name blood-sucker) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (blood-sucker-nn e0 x)))
;(B (name blood-sucker2) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (^ (blood-nn e0 x) (sucker-nn e1 y))))


(B (name forceful-extractionmap) (=> (I#FORCEFUL_EXTRACTION x :0.9) (S#FORCEFUL_EXTRACTION x)))
(B (name forceful-extraction-typemap) (=> (I#FORCEFUL_EXTRACTION%TYPE x y :0.9) (SS#FORCEFUL_EXTRACTION%TYPE x y)))


;; Natural Physical Force

;; Natural Physical Force: Type

(B (name avalanche) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (avalanche-nn e0 x)))
(B (name tsunami) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (tsunami-nn e0 x)))
(B (name deluge) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (deluge-nn e0 x)))
(B (name flood) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (flood-nn e0 x)))
(B (name tornado) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (tornado-nn e0 x)))
(B (name hurricane) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (hurricane-nn e0 x)))
(B (name cyclone) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (cyclone-nn e0 x)))
(B (name natural-disaster) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (natural-adj e0 x) (disaster-nn e1 x))))
(B (name twister) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (twister-nn e0 x)))
(B (name typhoon) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (typhoon-nn e0 x)))
(B (name earthquake) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (earthquake-nn e0 x)))
(B (name eruption) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (eruption-nn e0 x)))
(B (name hailstorm) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (hailstorm-nn e0 x)))
(B (name storm) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (storm-nn e0 x)))
(B (name drought) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (drought-nn e0 x)))
(B (name chaos) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (chaos-nn e0 x)))
(B (name chaotic) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45)) (chaotic-adj e0 x)))
(B (name heat-wave) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (heat-adj e0 x) (wave-nn e1 x))))
(B (name rock-slide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (rock-adj e0 y) (slide-nn e1 x))))
(B (name mud-slide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (mud-adj e0 y) (slide-nn e1 x))))
(B (name mudslide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (mudslide-nn e0 x)))

(B (name disastrous) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45)) (disastrous-adj e0 x)))

(B (name mudslide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45)) (seismic-adj e0 x)))
(B (name mudslide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45)) (flood-vb e0 x y z)))
(B (name mudslide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45)) (erupt-vb e0 x y z)))


;; Natural Physical Force: Result

(B (name destroy) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.23) (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.23) (R#DESTROY-AGENT x e0 :0.23) (R#DESTROY-PATIENT y e0 :0.23)) (destroy-vb e0 x y u)))
(B (name destroy) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.23) (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.23) (R#DESTROY-AGENT x e0 :0.23) (R#DESTROY-PATIENT y e0 :0.23)) (devastate-vb e0 x y u)))

(B (name disappearing) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.3) (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.3) (R#DESTROY-PATIENT x e0 :0.3)) (disappearing-adj e0 x)))

(B (name destruction-of-class) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%RESULT x e0 :0.45)) (^ (destruction-nn e0 x) (of-in e1 x y) (TS#WEALTH_AND_SOCIAL_CLASS y))))

(B (name natural-physical-forcemap) (=> (I#NATURAL_PHYSICAL_FORCE x :0.9) (S#NATURAL_PHYSICAL_FORCE x)))
(B (name natural-physical-force-typemap) (=> (I#NATURAL_PHYSICAL_FORCE%TYPE x y :0.9) (SS#NATURAL_PHYSICAL_FORCE%TYPE x y)))
(B (name natural-physical-force-resultmap) (=> (I#NATURAL_PHYSICAL_FORCE%RESULT x y :0.9) (SS#NATURAL_PHYSICAL_FORCE%RESULT x y)))


;; Physical Region

;; Physical Region: Defined Region

(B (name boundary) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (boundary-nn e0 x)))
(B (name destination) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (destination-nn e0 x)))
(B (name edge) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (edge-nn e0 x)))
(B (name margin) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (margin-nn e0 x)))
(B (name fringe) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (fringe-nn e0 x)))
(B (name borderline) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (borderline-nn e0 x)))

(B (name region) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (region-nn e0 x)))

(B (name live-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (live-vb e0 x y z) (in-in e1 e0 w))))
(B (name grow-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (grow-vb e0 x y z) (in-in e1 e0 w))))
(B (name reside-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (reside-vb e0 x y z) (in-in e1 e0 w))))
(B (name stay-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (stay-vb e0 x y z) (in-in e1 e0 w))))
(B (name born-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (bear-vb e0 x y z) (into-in e1 e0 w))))


;; Physical Location: Movement Into

(B (name pushnn) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.45)) (push-nn e0 x)))

;(B (name push-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (push-vb e0 x y z) (into-in e1 e0 w))))
(B (name push-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (push-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name drive-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (drive-vb e0 x y z) (into-in e1 e0 w))))
(B (name drive-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (drive-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name draw-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (draw-vb e0 x y z) (into-in e1 e0 w))))
(B (name draw-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (draw-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name drag-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (drag-vb e0 x y z) (into-in e1 e0 w))))
(B (name drag-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (drag-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name force-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (force-vb e0 x y z) (into-in e1 e0 w))))
(B (name force-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (force-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name move-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (move-vb e0 x y z) (into-in e1 e0 w))))
(B (name move-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (move-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name nudge-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (nudge-vb e0 x y z) (into-in e1 e0 w))))
(B (name nudge-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (nudge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name pull-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (rush-vb e0 x y z) (into-in e1 e0 w))))
;(B (name pull-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (pull-vb e0 x y z) (into-in e1 e0 w))))

(B (name shove-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (shove-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name throw-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (throw-vb e0 x y z) (into-in e1 e0 w))))
(B (name throw-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (throw-vb e0 x y u2) (into-in e1 e0 z))))
;(B (name tug-into) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (tug-vb e0 x y z) (into-in e1 e0 w))))
(B (name tug-into-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23)) (^ (TS#POVERTY z) (tug-vb e0 x y u2) (into-in e1 e0 z))))

(B (name enter) (=> (^ (S#PHYSICAL_LOCATION e0 :0.4) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.4)) (enter-vb e0 x y u2)))
(B (name entrance) (=> (^ (S#PHYSICAL_LOCATION e0 :0.4) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.4)) (entrance-nn e0 x)))

(B (name cycle-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (cycle-vb e0 x y z) (in-in e1 e0 w))))
(B (name cycle-in-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.2) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.2) (R##PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.2)) (^ (TS#POVERTY z) (cycle-vb e0 x y u2) (in-in e2 e0) (of-in e1 e0 z))))


;; Physical Location: Exit

(B (name emerge) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%EXIT x e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23)) (emerge-vb e0 x y u)))
(B (name exit) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%EXIT x e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23)) (exit-vb e0 x y u)))

(B (name cycle-out) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%EXIT x e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (cycle-vb e0 x y z) (out-in e1 e0))))
(B (name cycle-out-pov) (=> (^ (S#PHYSICAL_LOCATION e0 :0.2) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.2) (R##EXIT-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.2)) (^ (TS#POVERTY z) (cycle-vb e0 x y u2) (out-in e2 e0) (of-in e1 e0 z))))

(B (name passport) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (passport-nn e0 x)))
(B (name ticket) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (ticket-nn e0 x)))
(B (name free-pass) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (^ (free-adj e0 x) (pass-nn e1 x))))
(B (name pathway-out-of) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (^ (pathway-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))
(B (name pathway-out-of) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (^ (way-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))
(B (name pathway-out-of) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (^ (road-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))

(B (name enter) (=> (^ (S#PHYSICAL_LOCATION e0 :0.4) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.4)) (exit-vb e0 x y u2)))
(B (name entrance) (=> (^ (S#PHYSICAL_LOCATION e0 :0.4) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.4)) (exit-nn e0 x)))

(B (name physical-locationmap) (=> (I#PHYSICAL_LOCATION x :0.9) (S#PHYSICAL_LOCATION x)))
(B (name defined-regionmap) (=> (I#PHYSICAL_LOCATION%DEFINED_REGION x y :0.9) (SS#PHYSICAL_LOCATION%DEFINED_REGION x y)))
(B (name movement-intomap) (=> (I#PHYSICAL_LOCATION%MOVEMENT_INTO x y :0.9) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x y)))
(B (name physical-location-exitmap) (=> (I#PHYSICAL_LOCATION%EXIT x y :0.9) (SS#PHYSICAL_LOCATION%EXIT x y)))


;; Vertical Scale

;; Vertical Scale: Position on a Scale

;(B (name level) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (level-nn e0 x)))
(B (name level) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (level-nn e0 x)))
(B (name line) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (line-nn e0 x)))
;(B (name point) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (point-nn e0 x)))


(B (name low) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (low-adj e0 x) (TS#TAXATION x))))
(B (name high) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (high-adj e0 x) (TS#TAXATION x))))
(B (name low) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (low-adj e0 x) (TS#WEALTH_AND_SOCIAL_CLASS x))))
(B (name high) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (high-adj e0 x) (TS#WEALTH_AND_SOCIAL_CLASS x))))
(B (name middle) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (middle-adj e0 x) (TS#WEALTH_AND_SOCIAL_CLASS x))))


;; Vertical Scale: Movement on the Scale

(B (name raise) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (raise-vb e0 x y u)))
(B (name go-up) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (^ (go-vb e0 x y u) (up-rb e1 e0))))
(B (name tax-hike) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (^ (TS#TAXATION x) (hike-vb e0 x y u))))
(B (name rise) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (rise-vb e0 x y u)))
(B (name leap) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (leap-vb e0 x y u)))
(B (name skyrocket) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (skyrocket-vb e0 x y u)))
(B (name increase) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (increase-vb e0 x y u)))
(B (name jump) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (jump-vb e0 x y u)))
(B (name spiral) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (spiral-vb e0 x y u)))
(B (name spiral) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (soar-vb e0 x y u)))

(B (name decrease) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (decrease-vb e0 x y u)))
;(B (name reduce) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (reduce-vb e0 x y u)))
(B (name go-down) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (^ (go-vb e0 x y u) (down-rb e1 e0))))

(B (name fall) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (fall-vb e0 x y u)))
(B (name drop) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (drop-vb e0 x y u)))
(B (name plummet) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (plummet-vb e0 x y u)))

(B (name freeze) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-STOP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (freeze-vb e0 x y u)))
(B (name flatten) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-STOP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (flatten-vb e0 x y u)))

(B (name increase) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x e0 :0.3) (R#MOVE-UP x e0 :0.3)) (increase-nn e0 x)))

(B (name decrease) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x e0 :0.3) (R#MOVE-DOWN x e0 :0.3)) (decrease-nn e0 x)))

(B (name decrease) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x e0 :0.3) (R#MOVE-DOWN x e0 :0.3)) (drop-nn e0 x)))


;; Vertical Scale: Contrast of Positions

(B (name higher) (=> (^ (S#VERTICAL_SCALE e0 :0.33) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.33) (R#ABOVE x e0 :0.33)) (higher-adj e0 x)))
(B (name higher-taxes) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#ABOVE x e0 :0.3)) (^ (higher-adj e0 x) (TS#TAXATION x))))
(B (name steep) (=> (^ (S#VERTICAL_SCALE e0 :0.45) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.45)) (steep-adj e0 x)))
(B (name steeper) (=> (^ (S#VERTICAL_SCALE e0 :0.45) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.45)) (steeper-adj e0 x)))
(B (name above) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#ABOVE x e0 :0.3)) (above-in e0 x)))

(B (name lower) (=> (^ (S#VERTICAL_SCALE e0 :0.33) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.33) (R#BELOW x e0 :0.33)) (lower-adj e0 x)))
(B (name lower-taxes) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#BELOW x e0 :0.3)) (^ (lower-adj e0 x) (TS#TAXATION x))))
(B (name below) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#BELOW x e0 :0.3)) (below-in e0 x y)))

(B (name vertical-scalemap) (=> (I#VERTICAL_SCALE x :0.9) (S#VERTICAL_SCALE x)))
(B (name position-on-a-scalemap) (=> (I#VERTICAL_SCALE%POSITION_ON_A_SCALE x y :0.9) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x y)))
(B (name movement-on-the-scalemap) (=> (I#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x y :0.9) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x y)))
(B (name contrast-of-positionsmap) (=> (I#VERTICAL_SCALE%CONTRAST-OF-POSITIONS x y :0.9) (SS#VERTICAL_SCALE%CONTRAST-OF-POSITIONS x y)))


;; Moral Duty

;; Moral Duty: Remuneration

(B (name duty) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (duty-nn e0 x)))
(B (name due) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (due-nn e0 x)))
(B (name obligation) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (obligation-nn e0 x)))

(B (name MORAL_DUTYmap) (=> (I#MORAL_DUTY e0 :0.9) (S#MORAL_DUTY x)))
(B (name remunerationmap) (=> (I#MORAL_DUTY%REMUNERATION x y :0.9) (SS#MORAL_DUTY%REMUNERATION x y)))


;; Medicine

;; Medicine: Administration

(B (name inject) (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45) (R#ADMINISTRATION-AGENT x e0 :0.33)) (inject-vb e0 x y z)))

;(B (name shot) (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45)) (shot-nn e0 x)))
(B (name injection) (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45)) (injection-nn e0 x)))

(B (name medicinemap) (=> (I#MEDICINE x :0.9) (S#MEDICINE x)))
(B (name administrationmap) (=> (I#MEDICINE%ADMINISTRATION x y :0.9) (SS#MEDICINE%ADMINISTRATION x y)))


;; Right

;; Right: Type

(B (name right-to) (=> (^ (S#RIGHT e0 :0.45) (SS#RIGHT%TYPE x e0 :0.45)) (^ (right-nn e0 x) (to-in e1 x y ))))
(B (name inalienable-right) (=> (^ (S#RIGHT e0 :0.45) (SS#RIGHT%TYPE x e0 :0.45)) (^ (inalienable-adj e0 x) (right-nn e1 x ))))


(B (name rightmap) (=> (I#RIGHT x :0.9) (S#RIGHT x)))
(B (name right-typemap) (=> (I#RIGHT%TYPE x y :0.9) (SS#RIGHT%TYPE x y)))


;; Competition

;; Competition: Type

(B (name contest) (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%TYPE x e0 :0.45)) (contest-nn e0 x)))
(B (name fair-shot-at) (=> (^ (S#COMPETITION e1 :0.45) (SS#COMPETITION%COMPONENT x e1 :0.45)) (^ (fair-adj e0 x) (shot-nn e1 x) (at-in e3 x y))))


;; Competition: Component

(B (name winner) (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45)) (winner-nn e0 x)))
(B (name loser) (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45)) (loser-nn e0 x)))
(B (name player) (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45)) (player-nn e0 x)))

(B (name competitionmap) (=> (I#COMPETITION x :0.9) (S#COMPETITION x)))
(B (name competition-componentmap) (=> (I#COMPETITION%COMPONENT x y :0.9) (SS#COMPETITION%COMPONENT x y)))


;; Goal Directed

;; Goal Directed: Type

;(B (name goal) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (goal-nn e0 x)))
;(B (name force) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (force-nn e0 x)))
;(B (name achievement) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (achievement-nn e0 x)))
(B (name reach) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE e0 e0 :0.45)) (reach-vb e0 x y z)))
(B (name strive) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE e0 e0 :0.45)) (strive-vb e0 x y z)))


;; Goal Directed: Risk

(B (name high-stakes-bet) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%RISK x e0 e0 :0.45)) (^ (high-stakes-adj e0 x) (bet-nn e1 x))))


(B (name goal-directedmap) (=> (I#GOAL_DIRECTED x :0.9) (S#GOAL_DIRECTED x)))
(B (name goal-directed-riskmap) (=> (I#GOAL_DIRECTED%RISK x y :0.9) (SS#GOAL_DIRECTED%RISK x y)))
(B (name goal-directed-obstaclesmap) (=> (I#GOAL_DIRECTED%OBSTACLES x y :0.9) (SS#GOAL_DIRECTED%OBSTACLES x y)))


;; Food

;; Food: Type

(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (food-nn e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (bread-nn e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (meat-nn e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (carrot-nn e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (steak-nn e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (potato-nn e0 x)))


;; Food: Consumption

(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION x e0 :0.45)) (taste-nn e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION x e0 :0.45)) (savor-nn e0 x)))

(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION e0 e0 :0.45)) (tasty-adj e0 x)))
(B (name taste) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION e0 e0 :0.45)) (luscious-adj e0 x)))

(B (name taste-of) (=> (^ (S#FOOD e0 :0.3) (SS#FOOD%CONSUMPTION x e0 :0.3) (R#TASTE-OBJECT y e0 :0.3)) (^ (taste-nn e0 x) (of-in e1 x y))))

(B (name taste) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (taste-vb e0 x y u)))
(B (name taste) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (savor-vb e0 x y u)))
(B (name consume) (=> (^ (S#FOOD e0 :0.2) (SS#FOOD%CONSUMPTION e0 e0 :0.2) (R#TASTE-AGENT x e0 :0.2) (R#TASTE-OBJECT y e0 :0.2)) (^ (TS#WEALTH y) (consume-vb e0 x y u))))
(B (name consume) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (consume-vb e0 x y u)))
(B (name eat) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (eat-vb e0 x y u))))
(B (name swallow) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (swallow-vb e0 x y u))))
(B (name chew) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (chew-vb e0 x y u))))


(B (name foodmap) (=> (I#FOOD x :0.9) (S#FOOD x)))
(B (name food-typemap) (=> (I#FOOD%TYPE x y :0.9) (SS#FOOD%TYPE x y)))
(B (name food-consumptionmap) (=> (I#FOOD%CONSUMPTION x y :0.9) (SS#FOOD%CONSUMPTION x y)))


;; Addiction

;; Addiction: Type

; (B (name addiction) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45)) (addiction-nn e0 x)))
(B (name drug) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%TYPE x e0 :0.3) (R#SUBSTANCE x e0 :0.3)) (drug-nn e0 x)))
(B (name intoxication) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45)) (intoxication-nn e0 x)))
(B (name intoxication) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45)) (cocaine-nn e0 x)))
(B (name intoxication) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45)) (opium-nn e0 x)))


;; Addiction: Compulsion

(B (name addiction) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45)) (addiction-nn e0 x)))
(B (name habit) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45)) (habit-nn e0 x)))
(B (name addicted) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45)) (addicted-adj e0 x)))


;; Addiction: Result

(B (name drunk) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%RESULT e0 e0 :0.3) (R#ADDICTED x e0 :0.3)) (drunk-adj e0 x)))
(B (name drunk) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%RESULT e0 e0 :0.3) (R#ADDICTED x e0 :0.3)) (intoxicated-adj e0 x)))
(B (name drunk) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%RESULT x e0 :0.3)) (overdose-nn e0 x)))
(B (name drunk) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%RESULT e0 e0 :0.3)) (overdose-vb e0 x y z)))

(B (name addictionmap) (=> (I#ADDICTION x :0.9) (S#ADDICTION x)))
(B (name addiction-typemap) (=> (I#ADDICTION%TYPE x y :0.9) (SS#TYPE x y)))
(B (name addiction-compulsionmap) (=> (I#ADDICTION%COMPULSION x y :0.9) (SS#ADDICTION%COMPULSION x y)))
(B (name addiction-resultmap) (=> (I#ADDICTION%RESULT x y :0.9) (SS#ADDICTION%RESULT x y)))


;; Blood System

;; Blood System: Component

(B (name blood) (=> (^ (S#BLOOD_SYSTEM e0 :0.3) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.3) (R#BLOOD x e0 :0.3)) (blood-nn e0 x)))
(B (name vein) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.45)) (vein-nn e0 x)))
(B (name artery) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.45)) (artery-nn e0 x)))
(B (name artery) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.45)) (arterial-adj e0 x)))

;; Blood System: Movement

(B (name flow) (=> (SS#BLOOD_SYSTEM%MOVEMENT e0 e1 :0.9) (^ (flow-vb e0 x y z) (S#BLOOD_SYSTEM e1) (SS#COMPONENT x e1))))
(B (name hemorrhage) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%MOVEMENT e0 e0 :0.45)) (hemorrhage-vb e0 x y z)))
(B (name hemorrhage) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%MOVEMENT e0 e0 :0.45)) (coagulate-vb e0 x y z)))

(B (name transfusion) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%MOVEMENT x e0 :0.45)) (transfusion-nn e0 x)))


(B (name blood-systemmap) (=> (I#BLOOD_SYSTEM x :0.9) (S#BLOOD_SYSTEM x)))
(B (name blood-system-componentmap) (=> (I#BLOOD_SYSTEM%COMPONENT x y :0.9) (SS#BLOOD_SYSTEM%COMPONENT x y)))
(B (name blood-system-movementmap) (=> (I#BLOOD_SYSTEM%MOVEMENT x y :0.9) (SS#BLOOD_SYSTEM%MOVEMENT x y)))


;; Energy

;; Energy: Type

(B (name energy) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (energy-nn e0 x)))
(B (name jolt) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (jolt-nn e0 x)))
(B (name electricity) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (electricity-nn e0 x)))
(B (name energy) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (fuel-nn e0 x)))
(B (name energy) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (battery-nn e0 x)))

(B (name energy) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE e0 e0 :0.45)) (energetic-adj e0 x)))


;; Energy: Result

(B (name fuel) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (fuel-vb e0 x y z)))
(B (name charge) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (charge-vb e0 x y z)))
(B (name energize) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (energize-vb e0 x y z)))
(B (name energize) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (warm-vb e0 x y z)))
(B (name energize) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (overheat-vb e0 x y z)))
(B (name energize) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (heat-vb e0 x y z)))

(B (name energize) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45)) (warm-adj e0 x)))
(B (name energize) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45)) (torrid-adj e0 x)))
(B (name energize) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45)) (hot-adj e0 x)))

(B (name charged) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)) (charged-adj e0 x)))

(B (name energy) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT x e0 :0.45)) (charge-nn e0 x)))

(B (name energymap) (=> (I#ENERGY x :0.9) (S#ENERGY x)))
(B (name energy-typemap) (=> (I#ENERGY%TYPE x y :0.9) (SS#ENERGY%TYPE x y)))
(B (name energy-resultmap) (=> (I#ENERGY%RESULT x y :0.9) (SS#ENERGY%RESULT x y)))


;; A God

;; A God: Type

(B (name god) (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45)) (god-nn e0 x)))
(B (name idol) (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45)) (idol-nn e0 x)))
(B (name idol) (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45)) (goddess-nn e0 x)))


;; A God: Veneration

(B (name worship) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (worship-vb e0 x y u)))
(B (name pray) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (pray-vb e0 x y u)))
(B (name bow-to) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (^ (bow-vb e0 x y u) (to-in e1 e0 z))))

(B (name godmap) (=> (I#A_GOD x :0.9) (S#A_GOD x)))
(B (name god-typemap) (=> (I#A_GOD%TYPE x y :0.9) (SS#A_GOD%TYPE x y)))
(B (name god-venerationmap) (=> (I#A_GOD%VENERATION x y :0.9) (SS#A_GOD%VENERATION x y)))


;; Accident

;; Accident: Type

(B (name accident) (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45)) (accident-nn e0 x)))
(B (name accident) (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45)) (disaster-nn e0 x)))
(B (name accident) (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45)) (catastrophe-nn e0 x)))
(B (name accident) (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45)) (crash-nn e0 x)))

(B (name accidentmap) (=> (I#ACCIDENT x :0.9) (S#ACCIDENT x)))
(B (name accident-typemap) (=> (I#ACCIDENT%TYPE x y :0.9) (SS#ACCIDENT%TYPE x y)))


;; Plant

;; Plant: Type

(B (name plant) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (plant-nn e0 x)))
(B (name tree) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (tree-nn e0 x)))
(B (name weed) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%TYPE x e0 :0.3) (R#UNWANTED x e0 :0.3)) (weed-nn e0 x)))
(B (name flower) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (flower-nn e0 x)))
(B (name grass) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (grass-nn e0 x)))


;; Plant: Parts

(B (name root) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-ROOT x e0 :0.3)) (root-nn e0 x)))
(B (name fruit) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-EXTERNAL x e0 :0.3)) (fruit-nn e0 x)))
(B (name seed) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-GENESIS x e0 :0.3)) (seed-nn e0 x)))
(B (name leaf) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-EXTERNAL x e0 :0.3)) (leaf-nn e0 x)))
(B (name leaf) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-EXTERNAL x e0 :0.3)) (branch-nn e0 x)))
(B (name leaf) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-EXTERNAL x e0 :0.3)) (trunk-nn e0 x)))


;; Plant: Change of State

(B (name growx) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#POVERTY x) (grow-vb e0 x y u))))
(B (name grow) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH x) (grow-vb e0 x y u))))
(B (name grow) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH_AND_SOCIAL_CLASS x) (grow-vb e0 x y u))))
(B (name grow) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH_AND_SOCIAL_CLASS x) (blossom-vb e0 x y u))))
(B (name grow) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH_AND_SOCIAL_CLASS x) (shrivel-vb e0 x y u))))

(B (name dry-up) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (dry-vb e0 x y u) (up-in e1 e0))))

(B (name grow) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE x e0 :0.3)) (growth-nn e0 x)))

(B (name plant-typemap) (=> (I#PLANT x  :0.9) (SS#PLANT x)))
(B (name plant-typemap) (=> (I#PLANT%TYPE x y :0.9) (SS#PLANT%TYPE x y)))
(B (name plant-partsmap) (=> (I#PLANT%PARTS x y :0.9) (SS#PLANT%PARTS x y)))
(B (name plant-change-of-statemap) (=> (I#PLANT%CHANGE_OF_STATE x y :0.9) (SS#PLANT%CHANGE_OF_STATE x y)))


;; Animal

;; Animal: Type

(B (name animal) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (animal-nn e0 x)))
(B (name beast) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (beast-nn e0 x)))
(B (name bear) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (bear-nn e0 x)))
(B (name dog) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (dog-nn e0 x)))
(B (name cat) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (cat-nn e0 x)))
(B (name lion) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (lion-nn e0 x)))
(B (name tiger) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (tiger-nn e0 x)))
(B (name shark) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (shark-nn e0 x)))
(B (name whale) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (whale-nn e0 x)))
(B (name bird) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (bird-nn e0 x)))
(B (name wolf) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (wolf-nn e0 x)))
(B (name lamb) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (lamb-nn e0 x)))
(B (name sheep) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (sheep-nn e0 x)))
(B (name deer) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (deer-nn e0 x)))
(B (name gorilla) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (canary-nn e0 x)))

(B (name gorilla) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (gorilla-nn e0 x)))
(B (name monkey) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (monkey-nn e0 x)))
(B (name goat) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (goat-nn e0 x)))
(B (name horse) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (horse-nn e0 x)))
(B (name turtle) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (turtle-nn e0 x)))
(B (name cow) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (cow-nn e0 x)))
(B (name bull) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (bull-nn e0 x)))
(B (name snake) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (snake-nn e0 x)))
(B (name fox) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (fox-nn e0 x)))
(B (name beaver) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (beaver-nn e0 x)))
(B (name bee) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (bee-nn e0 x)))
(B (name hornet) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (hornet-nn e0 x)))
(B (name wasp) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (wasp-nn e0 x)))
(B (name mole) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (mole-nn e0 x)))
(B (name owl) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (owl-nn e0 x)))
(B (name elephant) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (elephant-nn e0 x)))
(B (name hound) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (hound-nn e0 x)))
(B (name cuckoo) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (cuckoo-nn e0 x)))
(B (name otter) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (otter-nn e0 x)))
(B (name hyena) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (hyena-nn e0 x)))
(B (name chicken) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (chicken-nn e0 x)))
(B (name eagle) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (^ (eagle-nn e0 x) (eye-nn e1 y))))

(B (name chicken) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (predator-nn e0 x)))
(B (name chicken) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (herd-nn e0 x)))

(B (name chicken) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE e0 e0 :0.45)) (domesticated-adj e0 x)))


;; Animal: Component

(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (muzzle-nn e0 x)))
(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (snout-nn e0 x)))
(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (jaws-nn e0 x)))
(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (fang-nn e0 x)))
;(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (клык-nn e0 x)))
;(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (fell-nn e0 x)))
(B (name face) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (tail-nn e0 x)))


;; Animal: Function

(B (name swallow) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%FUNCTION e0 e0 :0.45)) (domesticate-vb e0 x y u)))


;; Animal: Action

(B (name eat) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (eat-vb e0 x y u))))
(B (name eat) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION x) (eat-vb e0 x y u))))
(B (name bite) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (bite-vb e0 x y u))))
(B (name bite) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION x) (bite-vb e0 x y u))))
(B (name swallow) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (swallow-vb e0 x y u))))
(B (name swallow) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION x) (swallow-vb e0 x y u))))
(B (name chew) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (chew-vb e0 x y u))))
(B (name chew) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION x) (chew-vb e0 x y u))))
(B (name digest) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (digest-vb e0 x y u))))
(B (name digest) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION x) (digest-vb e0 x y u))))

;(B (name grow) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (grow-vb e0 x y u)))
(B (name touch) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (touch-vb e0 x y u)))
(B (name outlive) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (outlive-vb e0 x y u)))
(B (name roar) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (roar-vb e0 x y u)))
(B (name bark) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (bark-vb e0 x y u)))
(B (name scratch) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (scratch-vb e0 x y u)))
(B (name swim) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (swim-vb e0 x y u)))
(B (name stampede) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (stampede-vb e0 x y u)))
(B (name gallop) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (gallop-vb e0 x y u)))
(B (name herd-vb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%ACTION e0 e0 :0.45))
       (herd-vb e0 x y u)))
(B (name breed-vb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%ACTION e0 e0 :0.45))
       (breed-vb e0 x y u)))

(B (name gallop)
   (=> (^ (S#ANIMAL e0 :0.3) (SS#ANIMAL%ACTION x e0 :0.3)
          (R#ACTION-AGENT x e0 :0.3))
       (gallop-nn e0 x)))
(B (name galloping)
   (=> (^ (S#ANIMAL e0 :0.3) (SS#ANIMAL%ACTION e0 e0 :0.3)
          (R#ACTION-AGENT x e0 :0.3))
       (galloping-adj e0 x)))


;; Animal: Mapping

(B (name animal-map)
   (=> (I#ANIMAL x :0.9)
       (S#ANIMAL x)))
(B (name animal-type-map)
   (=> (I#ANIMAL%TYPE x y :0.9)
       (SS#ANIMAL%TYPE x y)))
(B (name animal-component-map)
   (=> (I#ANIMAL%COMPONENT x y :0.9)
       (SS#ANIMAL%COMPONENT x y)))
(B (name animal-function-map)
   (=> (I#ANIMAL%FUNCTION x y :0.9)
       (SS#ANIMAL%FUNCTION x y)))
(B (name animal-action-map)
   (=> (I#ANIMAL%ACTION x y :0.9)
       (SS#ANIMAL%ACTION x y)))


;; Machine

;; Machine: Type

(B (name machine)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (machine-nn e0 x)))
(B (name bulldozer)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (bulldozer-nn e0 x)))
(B (name steamroller)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (steamroller-nn e0 x)))
(B (name car)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (car-nn e0 x)))
(B (name truck)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (truck-nn e0 x)))
(B (name dumptruck)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (dumptruck-nn e0 x)))
(B (name crane)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (crane-nn e0 x)))
(B (name mechanism)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (mechanism-nn e0 x)))


;; Machine: Parts

(B (name engine)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (engine-nn e0 x)))
(B (name motor-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (motor-nn e0 x)))
(B (name wheel-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (wheel-nn e0 x)))
(B (name brake-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (brake-nn e0 x)))
(B (name lever)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (lever-nn e0 x)))


;; Machine: Function

(B (name turn)
   (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23)
          (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))
       (^ (engine-nn e1 x) (turn-vb e0 x y u))))
(B (name repair)
   (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23)
          (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))
       (repair-vb e0 x y u)))


;; Machine: Mapping

(B (name machine-map)
   (=> (I#MACHINE x :0.9)
       (S#MACHINE x)))
(B (name machine-type-map)
   (=> (I#MACHINE%TYPE x y :0.9)
       (SS#MACHINE%TYPE x y)))
(B (name machine-parts-map)
   (=> (I#MACHINE%PARTS x y :0.9)
       (SS#MACHINE%PARTS x y)))
(B (name machine-function-map)
   (=> (I#MACHINE%FUNCTION x y :0.9)
       (SS#MACHINE%FUNCTION x y)))


;; Destroyer

;; Destroyer: Destructive Force

(B (name destroyer)
   (=> (^ (S#DESTROYER e0 :0.45) (SS#DESTROYER%DESTRUCTIVE_FORCE x e0 :0.45))
       (destroyer-nn e0 x)))
(B (name destruction)
   (=> (^ (S#DESTROYER e0 :0.45) (SS#DESTROYER%DESTRUCTIVE_FORCE x e0 :0.45))
       (destruction-nn e0 x)))
(B (name destructiveness)
   (=> (^ (S#DESTROYER e0 :0.45) (SS#DESTROYER%DESTRUCTIVE_FORCE x e0 :0.45))
       (destructiveness-nn e0 x)))

(B (name destroy)
   (=> (^ (S#DESTROYER e0 :0.23) (SS#DESTROYER%DESTRUCTIVE_FORCE e0 e0 :0.23)
          (R#DESTRUCTIVE_FORCE-AGENT x e0 :0.23)
          (R#DESTRUCTIVE_FORCE-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (destroy-vb e0 x y u))))


;; Destroyer: Mapping

(B (name destroyer-map)
   (=> (I#DESTROYER x :0.9)
       (S#DESTROYER x)))
(B (name destroyer-DESTRUCTIVE_FORCE-map)
   (=> (I#DESTROYER%DESTRUCTIVE_FORCE x y :0.9)
       (SS#DESTROYER%DESTRUCTIVE_FORCE x y)))


;; Geographic Feature

;; Geographic Feature: Type

(B (name mountain)
   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3)
          (R#MOUNTAIN x e0 :0.3))
       (mountain-nn e0 x)))
(B (name himalayas)
   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3)
          (R#MOUNTAIN x e0 :0.3))
       (himalayas-nn e0 x)))
(B (name alps)
   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3)
          (R#MOUNTAIN x e0 :0.3))
       (alps-nn e0 x)))
;; Conflict with Body of Water, presumably
;(B (name ocean)
;   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3)
;          (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#OCEAN x e0 :0.3))
;       (ocean-nn e0 x)))
;(B (name sea)
;   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3)
;          (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#OCEAN x e0 :0.3))
;       (sea-nn e0 x)))
(B (name prairie)
   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3)
          (R#VALLEY x e0 :0.3))
       (prairie-nn e0 x)))
(B (name valley)
   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3)
          (R#VALLEY x e0 :0.3))
       (valley-nn e0 x)))
(B (name oasis)
   (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3)
          (R#VALLEY x e0 :0.3))
       (oasis-nn e0 x)))


;; Geographic Feature: Mapping

(B (name geographic-feature-map)
   (=> (I#GEOGRAPHIC_FEATURE x :0.9)
       (S#GEOGRAPHIC_FEATURE x)))
(B (name geographic-feature-type-map)
   (=> (I#GEOGRAPHIC_FEATURE%TYPE x y :0.9)
       (SS#GEOGRAPHIC_FEATURE%TYPE x y)))


;; Enabler

;; Enabler: Lubricant

(B (name lubrication)
   (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45))
       (lubrication-nn e0 x)))
(B (name lubricant)
   (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45))
       (lubricant-nn e0 x)))
(B (name oil-nn)
   (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45))
       (oil-nn e0 x)))
(B (name grease-nn)
   (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45))
       (grease-nn e0 x)))

(B (name grease-vb)
   (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3)
          (R#LUBRICATED y e0 :0.3))
       (grease-vb e0 x y u)))
(B (name lubricate)
   (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3)
          (R#LUBRICATED y e0 :0.3))
       (lubricate-vb e0 x y u)))
(B (name oil-vb)
   (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3)
          (R#LUBRICATED y e0 :0.3))
       (oil-vb e0 x y u)))
(B (name grease-the-wheels)
   (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3)
          (R#LUBRICATED y e0 :0.3))
       (^ (grease-vb e0 x y u) (wheel-nn e1 y))))


;; Enabler: Mapping

(B (name enabler-map)
   (=> (I#ENABLER x :0.9)
       (S#ENABLER x)))
(B (name enabler-lubricant-map)
   (=> (I#ENABLER%LUBRICANT x y :0.9)
       (SS#ENABLER%LUBRICANT x y)))


;; Game

;; Game: Type

(B (name chess)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (chess-nn e0 x)))
(B (name chess-game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (chess-nn e0 x) (of-in e1 y x) (game-nn e2 y))))
(B (name chess-match)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (chess-nn e0 x) (of-in e1 y x) (match-nn e2 y))))
(B (name poker)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (poker-nn e0 x)))
(B (name poker-game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (poker-nn e0 x) (of-in e1 y x) (game-nn e2 y))))
(B (name uno)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (uno-nn e0 x)))
(B (name game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (game-nn e0 x)))
(B (name puzzle)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (puzzle-nn e0 x)))
(B (name gamble)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (gamble-nn e0 x)))


;; Game: Components

(B (name chip)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (chip-nn e0 x)))
(B (name pawn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (pawn-nn e0 x)))
(B (name trump-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (trump-nn e0 x)))
(B (name puzzle)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (^ (puzzle-nn e0 x) (of-in e1 y x) (piece-nn e2 y))))


;; Game: Actions

(B (name play-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS x e0 :0.45))
       (play-nn e0 x)))
(B (name playing)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS x e0 :0.45))
       (playing-nn e0 x)))
(B (name play-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (play-vb e0 x y z)))
(B (name gamble-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (gamble-vb e0 x y z)))
(B (name trump-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (trump-vb e0 x y z)))

(B (name play-vb)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%ACTIONS e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (play-vb e0 x y u)))
(B (name assist-vb)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%ACTIONS e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (assist-vb e0 x y u)))
(B (name tilt-the-field)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%ACTIONS e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (^ (tilt-vb e0 x y u) (field-nn e1 y))))


;; Game: Outcomes

(B (name win)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (win-vb e0 x y u)))
(B (name lose)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (lose-vb e0 x y u)))
(B (name defeat)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (defeat-vb e0 x y u)))
(B (name triumph)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES e0 e0 :0.3) (R#PLAYER x e0 :0.3))
       (triumph-vb e0 x y u)))

(B (name winner)
   (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45))
       (^ (S#GAME a) (SS#TYPE b a) (winner-nn e0 x))))
(B (name loser)
   (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45))
       (^ (S#GAME a) (SS#TYPE b a) (loser-nn e0 x))))

(B (name victory)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%OUTCOMES x e0 :0.45))
       (victory-nn e0 x)))
(B (name triumph)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%OUTCOMES x e0 :0.45))
       (triumph-nn e0 x)))

(B (name defeat-nn)
   (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES x e0 :0.3))
       (defeat-nn e0 x)))


;; Game: Mapping

(B (name game-map)
   (=> (I#GAME x :0.9)
       (S#GAME x)))
(B (name game-type-map)
   (=> (I#GAME%TYPE x y :0.9)
       (SS#GAME%TYPE x y)))
(B (name game-components-map)
   (=> (I#GAME%COMPONENTS x y :0.9)
       (SS#GAME%COMPONENTS x y)))
(B (name game-actions-map)
   (=> (I#GAME%ACTIONS x y :0.9)
       (SS#GAME%ACTIONS x y)))
(B (name game-outcomes-map)
   (=> (I#GAME%OUTCOMES x y :0.9)
       (SS#GAME%OUTCOMES x y)))


;; Crop

;; Crop: Planting

(B (name seed)
   (=> (^ (S#CROP e0 :0.3) (SS#CROP%PLANTING x e0 :0.3)
          (R#CROP x e0 :0.3)) (seed-nn e0 x)))
(B (name crop)
   (=> (^ (S#CROP e0 :0.3) (SS#CROP%PLANTING x e0 :0.3) (R#CROP x e0 :0.3))
       (crop-nn e0 x)))

(B (name sow)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (sow-vb e0 x y u)))
(B (name plant)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (plant-vb e0 x y u)))


;; Crop: Cultivation

(B (name grow)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (^ (TS#WEALTH y) (grow-vb e0 x y u))))
;; (B (name grow)
;;    (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
;;           (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
;;        (^ (TS#WEALTH_AND_SOCIAL_CLASS y) (grow-vb e0 x y u))))
(B (name fertilize)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (fertilize-vb e0 x y u)))
(B (name fertilise)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (fertilise-vb e0 x y u)))
(B (name water)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (water-vb e0 x y u)))
(B (name prune)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (prune-vb e0 x y u)))
(B (name root-out)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (^ (root-vb e0 x y u) (out-in e1 e0))))

(B (name grow)
   (=> (^ (S#CROP e0 :0.45) (SS#CROP%CULTIVATION x e0 :0.45))
       (cultivation-nn e0 x)))


;; Crop: Outcome

(B (name reap)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23))
       (reap-vb e0 x y u)))
(B (name harvest)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23))
       (harvest-vb e0 x y u)))

(B (name bumper-crop)
   (=> (^ (S#CROP e0 :0.3) (SS#CROP%OUTCOME x e0 :0.3) (R#CROP y e0 :0.3))
       (^ (bumper-nn e0 x) (of-in e1 y x) (crop-nn e2 y))))
(B (name harvest-nn)
   (=> (^ (S#CROP e0 :0.3) (SS#CROP%OUTCOME x e0 :0.3) (R#CROP y e0 :0.3))
       (harvest-nn e0 x)))


;; Crop: Mapping

(B (name crop-map)
   (=> (I#CROP x :0.9)
       (S#CROP x)))
(B (name crop-planting-map)
   (=> (I#CROP%PLANTING x y :0.9)
       (SS#CROP%PLANTING x y)))
(B (name crop-cultivation-map)
   (=> (I#CROP%CULTIVATION x y :0.9)
       (SS#CROP%CULTIVATION x y)))
(B (name crop-outcome-map)
   (=> (I#CROP%OUTCOME x y :0.9)
       (SS#CROP%OUTCOME x y)))


;; A Right

;; A Right: Type

(B (name right)
   (=> (^ (S#A_RIGHT e0 :0.45) (SS#A_RIGHT%TYPE x e0 :0.45))
       (right-nn e0 x)))
(B (name right-for)
   (=> (^ (S#A_RIGHT e0 :0.45) (SS#A_RIGHT%TYPE x e0 :0.45))
       (^ (right-nn e0 x) (for-in e1 x y))))

(B (name a_right-map)
   (=> (I#A_RIGHT x :0.9)
       (S#A_RIGHT x)))
(B (name a_right-type-map)
   (=> (I#A_RIGHT%TYPE x y :0.9)
       (SS#A_RIGHT%TYPE x y)))


;; Impurity

;; Impurity: Type

(B (name dirt)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE x e0 :0.45))
       (dirt-nn e0 x)))
(B (name dust)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE x e0 :0.45))
       (dust-nn e0 x)))
(B (name trash)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE x e0 :0.45))
       (trash-nn e0 x)))

(B (name dirty-adj)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE e0 e0 :0.45))
       (dirty-adj e0 x)))

(B (name dirty-nn)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE e0 e0 :0.45))
       (dirty-nn e0 x)))
(B (name stain)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE e0 e0 :0.45))
       (stain-nn e0 x)))

(B (name sully)
   (=> (^ (S#IMPURITY e0 :0.45) (SS#IMPURITY%TYPE e0 e0 :0.45))
       (sully-vb e0 x y z)))


;; Impurity: Mapping

(B (name impurity-map)
   (=> (I#IMPURITY x :0.9)
       (S#IMPURITY x)))
(B (name impurity-type-map)
   (=> (I#IMPURITY%TYPE x y :0.9)
       (SS#IMPURITY%TYPE x y)))


;; Movement

;; Movement: Movement

(B (name movement)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45))
       (movement-nn e0 x)))
(B (name move)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45))
       (move-nn e0 x)))
(B (name mobility)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45))
       (mobility-nn e0 x)))

(B (name move-vb)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45))
       (move-vb e0 x y z)))
(B (name circle-vb)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45))
       (circle-vb e0 x y z)))
(B (name cycle-vb)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45))
       (cycle-vb e0 x y z)))


;; Movement: Mapping

(B (name movement-map)
   (=> (I#MOVEMENT x :0.9)
       (S#MOVEMENT x)))
(B (name movement-movement-map)
   (=> (I#MOVEMENT%MOVEMENT x y :0.9)
       (SS#MOVEMENT%MOVEMENT x y)))
