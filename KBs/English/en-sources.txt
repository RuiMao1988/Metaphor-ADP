;; -*- Mode: Lisp -*-

;; English Metaphor Source Axioms
;; Katya Ovchinnikova, Ross Israel, Jonathan Gordon


;; A God
;;   A supreme being; to regard or treat as a god; deify; idolize.

;; A God: Type

(B (name god-nn)
   (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45))
       (god-nn e0 x)))
(B (name goddess-nn)
   (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45))
       (goddess-nn e0 x)))
(B (name deity-nn)
   (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45))
       (deity-nn e0 x)))
(B (name idol-nn)
   (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45))
       (idol-nn e0 x)))

(B (name divine-adj)
   (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE e0 e0 :0.45))
       (divine-adj e0 x)))
(B (name godlike)
   (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE e0 e0 :0.45))
       (deify-adj e0 x)))


;; A God: Veneration

(B (name worship)
   (=> (^ (S#A_GOD e0 :0.30) (SS#A_GOD%VENERATION e0 e0 :0.30)
          (R#WORSHIP-AGENT x e0 :0.30))
       (worship-vb e0 x y u)))
(B (name pray)
   (=> (^ (S#A_GOD e0 :0.30) (SS#A_GOD%VENERATION e0 e0 :0.30)
          (R#WORSHIP-AGENT x e0 :0.30))
       (pray-vb e0 x y u)))
(B (name bow-to)
   (=> (^ (S#A_GOD e0 :0.30) (SS#A_GOD%VENERATION e0 e0 :0.30)
          (R#WORSHIP-AGENT x e0 :0.30))
       (^ (bow-vb e0 x y u) (to-in e1 e0 z))))
(B (name deify-vb)
   (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3)
          (R#WORSHIP-AGENT x e0 :0.3))
       (deify-vb e0 x y u)))


;; A God: Mapping

(B (name god-map)
   (=> (I#A_GOD x :0.9)
       (S#A_GOD x)))
(B (name god-type-map)
   (=> (I#A_GOD%TYPE x y :0.9)
       (SS#A_GOD%TYPE x y)))
(B (name god-veneration-map)
   (=> (I#A_GOD%VENERATION x y :0.9)
       (SS#A_GOD%VENERATION x y)))


;; A Right
;;   That which is due to anyone by just claim, legal guarantees, moral
;;   principles, etc.

;; A Right: Type

(B (name right)
   (=> (^ (S#A_RIGHT e0 :0.45) (SS#A_RIGHT%TYPE x e0 :0.45))
       (right-nn e0 x)))
(B (name right-for)
   (=> (^ (S#A_RIGHT e0 :0.45) (SS#A_RIGHT%TYPE x e0 :0.45))
       (^ (right-nn e0 x) (for-in e1 x y))))
(B (name right-to)
   (=> (^ (S#A_RIGHT e0 :0.45) (SS#A_RIGHT%TYPE x e0 :0.45))
       (^ (right-nn e0 x) (to-in e1 x y))))
(B (name inalienable-right)
   (=> (^ (S#A_RIGHT e0 :0.45) (SS#A_RIGHT%TYPE x e0 :0.45))
       (^ (inalienable-adj e0 x) (right-nn e1 x ))))


;; A Right: Mapping

(B (name a_right-map)
   (=> (I#A_RIGHT x :0.9)
       (S#A_RIGHT x)))
(B (name a_right-type-map)
   (=> (I#A_RIGHT%TYPE x y :0.9)
       (SS#A_RIGHT%TYPE x y)))


;; Abyss
;;   A deep, immeasurable space, gulf, or cavity; vast chasm; anything
;;   profound, unfathomable, or infinite.

;; Abyss: Type

(B (name abyss)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (abyss-nn e0 x)))
(B (name hell)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (hell-nn e0 x)))
(B (name sinkhole)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (sinkhole-nn e0 x)))
(B (name hole)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (hole-nn e0 x)))
(B (name chasm)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (chasm-nn e0 x)))
(B (name pit)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (pit-nn e0 x)))
(B (name cave)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (cave-nn e0 x)))
(B (name abysm)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (abysm-nn e0 x)))
(B (name trench)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (trench-nn e0 x)))
(B (name black-hole)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (black-adj e0 x) (hole-nn e1 x))))
(B (name gaping-maw)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (gap-vb e0 x u1 u2) (maw-nn e1 x))))
(B (name dark-hole)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (dark-adj e0 x) (hole-nn e1 x))))
(B (name bottomless-pit)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45))
       (^ (bottomless-adj e0 x) (pit-nn e1 x))))

(B (name abyssal)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 :0.45))
       (abyssal-adj e0 x)))
(B (name abysmal)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 :0.45))
       (abysmal-adj e0 x)))


;; Abyss: Depth

(B (name depth)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45))
       (depth-nn e0 x)))
(B (name deep)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45))
       (deep-nn e0 x)))
(B (name deep-adj)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (deep-adj e0 x)))
(B (name bottomless)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (bottomless-adj e0 x)))
(B (name deeper)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (deeper-adj e0 x)))
(B (name deepest)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (deepest-adj e0 x)))
(B (name deeply)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45))
       (deeply-rb e0 x)))
(B (name ever-deepening)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%DEPTH x e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (ever-deepening-adj e0 x)))

(B (name deepen)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH e0 e0 :0.45))
       (deepen-vb e0 x y z)))

(B (name depth-of)
   (=> (R#ABYSS-THEME y e0 :0.90)
       (^ (SS#ABYSS%DEPTH x e0) (of-in e1 x y))))


;; Abyss: Entrance

;; Should these nouns look for an ABYSS-TYPE to trigger?
(B (name verge)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (verge-nn e0 x)))
(B (name edge)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (edge-nn e0 x)))
(B (name border)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (border-nn e0 x)))
(B (name borderline)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (borderline-nn e0 x)))
(B (name brink)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (brink-nn e0 x)))
(B (name cliff)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (cliff-nn e0 x)))
(B (name precipice)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (precipice-nn e0 x)))
(B (name entrance)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE x e0 :0.45))
       (entrance-nn e0 x)))

(B (name push-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (push-vb e0 x y u2) (into-in e1 e0 z))))
(B (name push-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (push-vb e0 x y u2) (into-in e1 e0 z))))
(B (name shove-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (shove-vb e0 x y u2) (into-in e1 e0 z))))
(B (name shove-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (shove-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drive-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (drive-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drive-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (drive-vb e0 x y u2) (into-in e1 e0 z))))
(B (name suck-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (suck-vb e0 x y u2) (into-in e1 e0 z))))
(B (name suck-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (suck-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drag-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (drag-vb e0 x y u2) (into-in e1 e0 z))))
(B (name drag-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (drag-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name throw-into)
   (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.1) (R#ABYSS-THEME y e2 :0.1)
          (R#ABYSS-CAUSE x e2 :0.2))
       (^ (S#ABYSS e2) (SS#ABYSS%TYPE z e2)
          (throw-vb e0 x y u2) (into-in e1 e0 z))))
(B (name throw-into-pov)
   (=> (^ (S#ABYSS e0 :0.1) (SS#ABYSS%ENTRANCE e0 e0 :0.1)
          (R#ABYSS-THEME y e0 :0.1) (R#ABYSS-CAUSE x e0 :0.2))
       (^ (TS#POVERTY z) (throw-vb e0 x y u2) (into-in e1 e0 z))))

(B (name enter)
   (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%ENTRANCE e0 e0 :0.45))
       (enter-vb e0 x y u2)))

(B (name descend-into)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (descend-vb e0 x y u2) (into-in e1 e0 z))))
(B (name sink-into)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (sink-vb e0 x y u2) (into-in e1 e0 z))))
(B (name plunge-into2)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (plunge-vb e0 x y u2) (into-in e1 e0 z))))
(B (name fall-into)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%ENTRANCE e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (fall-vb e0 x y u2) (into-in e1 e0 z))))


;; Abyss: Exit

(B (name climb-out-of)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (climb-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name jump-out-of)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (jump-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))

(B (name pull-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (pull-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name lift-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (lift-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name yank-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (yank-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name dig-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (dig-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))
(B (name emerge-from)
   (=> (^ (S#ABYSS e0 :0.30) (SS#ABYSS%EXIT e0 e0 :0.30)
          (R#ABYSS-THEME x e0 :0.30))
       (^ (emerge-vb e0 x y u) (out-in e1 e0) (from-in e2 e1 z))))
(B (name help-out-of)
   (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%EXIT e0 e0 :0.2)
          (R#ABYSS-THEME y e0 :0.2) (R#ABYSS-EXIT-CAUSE x e0 :0.2))
       (^ (help-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 z))))


;; Abyss: Mapping

(B (name abyss-map)
   (=> (I#ABYSS x :0.9)
       (S#ABYSS x)))
(B (name abyss-type-map)
   (=> (I#ABYSS%TYPE x e0 :0.9)
       (SS#ABYSS%TYPE x e0)))
(B (name abyss-depth-map)
   (=> (I#ABYSS%DEPTH x y :0.9)
       (SS#ABYSS%DEPTH x y)))
(B (name abyss-entrance-map)
   (=> (I#ABYSS%ENTRANCE x y :0.9)
       (SS#ABYSS%ENTRANCE x y)))
(B (name abyss-exit-map)
   (=> (I#ABYSS%EXIT x y :0.9)
       (SS#ABYSS%EXIT x y)))


;; Accident
;;   An unforeseen and unplanned event or circumstance.

;; Accident: Type

(B (name accident)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (accident-nn e0 x)))
(B (name disaster)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (disaster-nn e0 x)))
(B (name catastrophe)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (catastrophe-nn e0 x)))
(B (name crash)
   (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45))
       (crash-nn e0 x)))


;; Accident: Mapping

(B (name accident-map)
   (=> (I#ACCIDENT x :0.9)
       (S#ACCIDENT x)))
(B (name accident-type-map)
   (=> (I#ACCIDENT%TYPE x y :0.9)
       (SS#ACCIDENT%TYPE x y)))


;; Addiction
;;   The state of being enslaved to a habit or practice or to something that
;;   is psychologically or physically habit-forming, as narcotics, to such an
;;   extent that its cessation causes severe trauma.

;; Addiction: Type

(B (name drug-nn)
   (=> (^ (S#ADDICTION e0 :0.30) (SS#ADDICTION%TYPE x e0 :0.30)
          (R#SUBSTANCE x e0 :0.30))
       (drug-nn e0 x)))
(B (name intoxication-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45))
       (intoxication-nn e0 x)))
(B (name cocaine-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45))
       (cocaine-nn e0 x)))
(B (name opium-nn)
   (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45))
       (opium-nn e0 x)))


;; Addiction: Compulsion

(B (name addiction)
   (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45))
       (addiction-nn e0 x)))
(B (name habit)
   (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45))
       (habit-nn e0 x)))
(B (name addicted)
   (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45))
       (addicted-adj e0 x)))


;; Addiction: Result

(B (name drunk)
   (=> (^ (S#ADDICTION e0 :0.30) (SS#ADDICTION%RESULT e0 e0 :0.30)
          (R#ADDICTED x e0 :0.30))
       (drunk-adj e0 x)))
(B (name intoxicated)
   (=> (^ (S#ADDICTION e0 :0.30) (SS#ADDICTION%RESULT e0 e0 :0.30)
          (R#ADDICTED x e0 :0.30))
       (intoxicated-adj e0 x)))
(B (name overdose-nn)
   (=> (^ (S#ADDICTION e0 :0.30) (SS#ADDICTION%RESULT x e0 :0.30))
       (overdose-nn e0 x)))
(B (name overdose-vb)
   (=> (^ (S#ADDICTION e0 :0.30) (SS#ADDICTION%RESULT e0 e0 :0.30))
       (overdose-vb e0 x y z)))


;; Addiction: Mapping

(B (name addiction-map)
   (=> (I#ADDICTION x :0.9)
       (S#ADDICTION x)))
(B (name addiction-type-map)
   (=> (I#ADDICTION%TYPE x y :0.9)
       (SS#ADDICTION%TYPE x y)))
(B (name addiction-compulsion-map)
   (=> (I#ADDICTION%COMPULSION x y :0.9)
       (SS#ADDICTION%COMPULSION x y)))
(B (name addiction-result-map)
   (=> (I#ADDICTION%RESULT x y :0.9)
       (SS#ADDICTION%RESULT x y)))


;; Animal
;;   Any such living thing other than a human being.

;; Animal: Type

(B (name animal)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (animal-nn e0 x)))
(B (name beast)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (beast-nn e0 x)))
(B (name bear)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bear-nn e0 x)))
(B (name dog)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (dog-nn e0 x)))
(B (name cat)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (cat-nn e0 x)))
(B (name lion)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (lion-nn e0 x)))
(B (name tiger)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (tiger-nn e0 x)))
(B (name shark)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (shark-nn e0 x)))
(B (name whale)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (whale-nn e0 x)))
(B (name bird)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bird-nn e0 x)))
(B (name wolf)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (wolf-nn e0 x)))
(B (name lamb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (lamb-nn e0 x)))
(B (name sheep)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (sheep-nn e0 x)))
(B (name deer)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (deer-nn e0 x)))
(B (name canary)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (canary-nn e0 x)))
(B (name gorilla)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (gorilla-nn e0 x)))
(B (name monkey)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (monkey-nn e0 x)))
(B (name goat)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (goat-nn e0 x)))
(B (name horse)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (horse-nn e0 x)))
(B (name turtle)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (turtle-nn e0 x)))
(B (name cow)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (cow-nn e0 x)))
(B (name bull)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bull-nn e0 x)))
(B (name snake)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (snake-nn e0 x)))
(B (name fox)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (fox-nn e0 x)))
(B (name beaver)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (beaver-nn e0 x)))
(B (name bee)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (bee-nn e0 x)))
(B (name hornet)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hornet-nn e0 x)))
(B (name wasp)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (wasp-nn e0 x)))
(B (name mole)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (mole-nn e0 x)))
(B (name owl)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (owl-nn e0 x)))
(B (name elephant)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (elephant-nn e0 x)))
(B (name hound)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hound-nn e0 x)))
(B (name cuckoo)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (cuckoo-nn e0 x)))
(B (name otter)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (otter-nn e0 x)))
(B (name hyena)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hyena-nn e0 x)))
(B (name hyaena)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (hyaena-nn e0 x)))
(B (name chicken)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (chicken-nn e0 x)))
(B (name eagle-eye)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (^ (eagle-nn e0 x) (eye-nn e1 y))))

(B (name predator)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (predator-nn e0 x)))
(B (name herd)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45))
       (herd-nn e0 x)))

(B (name domesticated)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE e0 e0 :0.45))
       (domesticated-adj e0 x)))


;; Animal: Component

(B (name muzzle)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (muzzle-nn e0 x)))
(B (name snout)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (snout-nn e0 x)))
(B (name jaws)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (jaws-nn e0 x)))
(B (name fang)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (fang-nn e0 x)))
(B (name tail)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45))
       (tail-nn e0 x)))


;; Animal: Function

(B (name swallow)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%FUNCTION e0 e0 :0.45))
       (domesticate-vb e0 x y u)))


;; Animal: Action

(B (name eat-pov)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (eat-vb e0 x y u))))
(B (name eat-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (eat-vb e0 x y u))))
(B (name bite-pov)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (bite-vb e0 x y u))))
(B (name bite-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (bite-vb e0 x y u))))
(B (name swallow-pov)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (swallow-vb e0 x y u))))
(B (name swallow-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (swallow-vb e0 x y u))))
(B (name chew-pov)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (chew-vb e0 x y u))))
(B (name chew-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (chew-vb e0 x y u))))
(B (name digest-pov)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#POVERTY x) (digest-vb e0 x y u))))
(B (name digest-tax)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (^ (TS#TAXATION x) (digest-vb e0 x y u))))

;; (B (name grow)
;;    (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
;;           (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
;;        (grow-vb e0 x y u)))
(B (name touch)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (touch-vb e0 x y u)))
(B (name outlive)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (outlive-vb e0 x y u)))
(B (name roar)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (roar-vb e0 x y u)))
(B (name bark)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (bark-vb e0 x y u)))
(B (name scratch)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (scratch-vb e0 x y u)))
(B (name swim)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (swim-vb e0 x y u)))
(B (name stampede)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (stampede-vb e0 x y u)))
(B (name gallop-vb)
   (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23)
          (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23))
       (gallop-vb e0 x y u)))
(B (name herd-vb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%ACTION e0 e0 :0.45))
       (herd-vb e0 x y u)))
(B (name breed-vb)
   (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%ACTION e0 e0 :0.45))
       (breed-vb e0 x y u)))

(B (name gallop-nn)
   (=> (^ (S#ANIMAL e0 :0.30) (SS#ANIMAL%ACTION x e0 :0.30)
          (R#ACTION-AGENT x e0 :0.30))
       (gallop-nn e0 x)))
(B (name galloping)
   (=> (^ (S#ANIMAL e0 :0.30) (SS#ANIMAL%ACTION e0 e0 :0.30)
          (R#ACTION-AGENT x e0 :0.30))
       (galloping-adj e0 x)))


;; Animal: Mapping

(B (name animal-map)
   (=> (I#ANIMAL x :0.9)
       (S#ANIMAL x)))
(B (name animal-type-map)
   (=> (I#ANIMAL%TYPE x y :0.9)
       (SS#ANIMAL%TYPE x y)))
(B (name animal-component-map)
   (=> (I#ANIMAL%COMPONENT x y :0.9)
       (SS#ANIMAL%COMPONENT x y)))
(B (name animal-function-map)
   (=> (I#ANIMAL%FUNCTION x y :0.9)
       (SS#ANIMAL%FUNCTION x y)))
(B (name animal-action-map)
   (=> (I#ANIMAL%ACTION x y :0.9)
       (SS#ANIMAL%ACTION x y)))


;; Backward Movement
;;   Movement to or toward what is behind.

(B (name backward-adj)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (backward-adj e0 x)))
(B (name reverse-adj)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (reverse-adj e0 x)))

(B (name reverse-nn)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (reverse-nn e0 x)))

(B (name reverse-vb)
   (=> (S#BACKWARD_MOVEMENT e0 :0.9)
       (reverse-vb e0 x u1 u2)))


;; Backward Movement: Mapping

(B (name backward-movement-map)
   (=> (I#BACKWARD_MOVEMENT x :0.9)
       (S#BACKWARD_MOVEMENT x)))


;; Barrier
;;   Anything used or acting to block someone from going somewhere or from
;;   doing something, or to block something from happening.

(B (name barrier-nn)
   (=> (S#BARRIER e0 :0.9)
       (barrier-nn e0 x)))
(B (name barricade-nn)
   (=> (S#BARRIER e0 :0.9)
       (barricade-nn e0 x)))
(B (name obstacle-nn)
   (=> (S#BARRIER e0 :0.9)
       (obstacle-nn e0 x)))
(B (name roadblock-nn)
   (=> (S#BARRIER e0 :0.9)
       (roadblock-nn e0 x)))

(B (name block-vb)
   (=> (S#BARRIER e0 :0.9)
       (block-vb e0 x0 x1 x2)))
(B (name barricade-vb)
   (=> (S#BARRIER e0 :0.9)
       (barricade-vb e0 x0 x1 x2)))
(B (name obstruct-vb)
   (=> (S#BARRIER e0 :0.9)
       (obstruct-vb e0 x0 x1 x2)))


;; Barrier: Mapping

(B (name barrier-map)
   (=> (I#BARRIER x :0.9)
       (S#BARRIER x)))


;; Blood Stream
;;   The flowing blood in a circulatory system; a mainstream of power or
;;   vitality. (Formerly BLOOD_SYSTEM.)

;; Blood Stream: Component

(B (name blood)
   (=> (^ (S#BLOOD_STREAM e0 :0.30) (SS#BLOOD_STREAM%COMPONENT x e0 :0.30)
          (R#BLOOD x e0 :0.30))
       (blood-nn e0 x)))
(B (name vein)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%COMPONENT x e0 :0.45))
       (vein-nn e0 x)))
(B (name artery)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%COMPONENT x e0 :0.45))
       (artery-nn e0 x)))
(B (name arterial)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%COMPONENT x e0 :0.45))
       (arterial-adj e0 x)))


;; Blood Stream: Movement

(B (name flow)
   (=> (SS#BLOOD_STREAM%MOVEMENT e0 e1 :0.9)
       (^ (flow-vb e0 x y z) (S#BLOOD_STREAM e1)
          (SS#BLOOD_STREAM%COMPONENT x e1))))
(B (name hemorrhage)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%MOVEMENT e0 e0 :0.45))
       (hemorrhage-vb e0 x y z)))
(B (name haemorrhage)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%MOVEMENT e0 e0 :0.45))
       (haemorrhage-vb e0 x y z)))
(B (name coagulate)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%MOVEMENT e0 e0 :0.45))
       (coagulate-vb e0 x y z)))
(B (name transfusion)
   (=> (^ (S#BLOOD_STREAM e0 :0.45) (SS#BLOOD_STREAM%MOVEMENT x e0 :0.45))
       (transfusion-nn e0 x)))


;; Blood Stream: Mapping

(B (name blood-stream-map)
   (=> (I#BLOOD_STREAM x :0.9)
       (S#BLOOD_STREAM x)))
(B (name blood-stream-component-map)
   (=> (I#BLOOD_STREAM%COMPONENT x y :0.9)
       (SS#BLOOD_STREAM%COMPONENT x y)))
(B (name blood-stream-movement-map)
   (=> (I#BLOOD_STREAM%MOVEMENT x y :0.9)
       (SS#BLOOD_STREAM%MOVEMENT x y)))


;; Body of Water
;;   The part of the Earth's surface covered with water (such as a river or
;;   lake or ocean).

;; Body of Water: Type

(B (name water)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (water-nn e0 x)))
(B (name sea-water)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (sea-water-nn e0 x)))
(B (name seawater)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (seawater-nn e0 x)))
(B (name sea)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (sea-nn e0 x)))
(B (name ocean)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (ocean-nn e0 x)))
(B (name river)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45))
       (river-nn e0 x)))

;; Of - Body of Water
(B (name of-body-of-water)
   (=> (R#MATTER x y :0.9)
       (^ (SS#BODY_OF_WATER%TYPE y e0) (of-in e1 y x))))


;; Body of Water: Movement

(B (name flow)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (flow-vb e0 x y z)))
(B (name leak)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (leak-vb e0 x u1 u2)))
(B (name stream)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (stream-vb e0 x u1 u2)))
(B (name swell2)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#STREAMING x e0 :0.30))
       (swell-vb e0 x u1 u2)))
(B (name stagnate)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#DAMPENING x e0 :0.30))
       (stagnate-vb e0 x u1 u2)))
(B (name absorb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#ABSORBING x e0 :0.30))
       (absorb-vb e0 x u1 u2)))
(B (name dampen)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%MOVEMENT x e0 :0.30)
          (R#DAMPENING x e0 :0.30))
       (dampen-vb e0 x u1 u2)))

(B (name stream-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (stream-nn e0 y)))
(B (name flow-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (flow-nn e0 y)))
(B (name leak-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (leak-nn e0 y)))
(B (name wave)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (wave-nn e0 y)))
(B (name swell-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (swell-nn e0 y)))
(B (name tide)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (tide-nn e0 y)))
(B (name rising-tide)
   (=> (^ (S#BODY_OF_WATER e1 :0.45) (SS#BODY_OF_WATER%MOVEMENT x e1 :0.45))
       (^ (rising-adj e0 x) (tide-nn e1 x))))
(B (name flood-nn)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (flood-nn e0 y)))
(B (name absorption)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (absorption-nn e0 y)))
(B (name fountain)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45))
       (fountain-nn e0 y)))

(B (name awash)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.45))
       (awash-adj e0 y)))
(B (name stagnant)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.45))
       (stagnant-adj e0 y)))

;; Of - Movement
(B (name of-stream)
   (=> (R#STREAMING y e0 :0.9)
       (^ (SS#BODY_OF_WATER%MOVEMENT x e) (of-in e1 x y))))


;; Body of Water: Danger

(B (name flood)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (flood-nn e0 y)))
(B (name tsunami)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (tsunami-nn e0 y)))
(B (name swamp)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (swamp-nn e0 y)))
(B (name mire)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (mire-nn e0 y)))
(B (name underwater)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (underwater-nn e0 y)))
(B (name whirlpool)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (whirpool-nn e0 y)))
(B (name inundation)
   (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45))
       (inundation-nn e0 y)))

(B (name drown)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT x e0 :0.30)) (drown-vb e0 x u1 u2)))
(B (name flood-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT x e0 :0.30))
       (flood-vb e0 x u1 u2)))
(B (name swamp-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT y e0 :0.30))
       (swamp-vb e0 x y u2)))
(B (name mire-vb)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT x e0 :0.30))
       (mire-vb e0 x u1 u2)))
(B (name mired)
   (=> (^ (S#BODY_OF_WATER e0 :0.30) (SS#BODY_OF_WATER%DANGER e0 e0 :0.30)
          (R#DROWN-PATIENT x e0 :0.30))
       (mired-adj e0 x)))


;; Body of Water: Mapping

(B (name water-map)
   (=> (I#BODY_OF_WATER x :0.9)
       (S#BODY_OF_WATER x)))
(B (name water-type-map)
   (=> (I#BODY_OF_WATER%TYPE x y :0.9)
       (SS#BODY_OF_WATER%TYPE x y)))
(B (name movement-map)
   (=> (I#BODY_OF_WATER%MOVEMENT x y :0.9)
       (SS#BODY_OF_WATER%MOVEMENT x y)))
(B (name danger-map)
   (=> (I#BODY_OF_WATER%DANGER x y :0.9)
       (SS#BODY_OF_WATER%DANGER x y)))


;; Building
;;   A relatively permanent enclosed construction over a plot of land, having
;;   a roof and usually windows and often more than one level; anything built
;;   or constructed.

;; Building: Type

(B (name house)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (house-nn e0 x)))
(B (name home)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (home-nn e0 x)))
(B (name skyscraper)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (skyscraper-nn e0 x)))
(B (name mansion)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (mansion-nn e0 x)))
(B (name palace)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (palace-nn e0 x)))
(B (name castle)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45))
       (castle-nn e0 x)))


;; Building: Structure

(B (name building)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (building-nn e0 x)))
(B (name structure)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (structure-nn e0 x)))
(B (name honeycomb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (honeycomb-nn e0 x)))
(B (name edifice)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (edifice-nn e0 x)))
(B (name basement)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (basement-nn e0 x)))

(B (name architecture)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45))
       (architecture-nn e0 x)))

(B (name honeycomb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE e0 e0 :0.45))
       (honeycomb-vb e0 x y z)))


;; Building: Creation/Destruction

(B (name build)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATING e0 e0 :0.30))
       (build-vb e0 x y u)))
(B (name construct)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATING e0 e0 :0.30))
       (construct-vb e0 x y u)))
(B (name fix)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATING e0 e0 :0.30))
       (fix-vb e0 x y u)))

(B (name create)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATION e0 e0 :0.30))
       (^ (SS#BUILDING%TYPE y e0) (create-vb e0 x y u))))
(B (name create2)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#CREATION e0 e0 :0.30))
       (^ (SS#BUILDING%STRUCTURE y e0) (create-vb e0 x y u))))
(B (name create3)
   (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33)
          (R#CREATION e0 e0 :0.33))
       (create-vb e0 x y u)))

(B (name destroy)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (^ (SS#BUILDING%TYPE y e0) (destroy-vb e0 x y u))))
(B (name destroy2)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (^ (SS#BUILDING%STRUCTURE y e0) (destroy-vb e0 x y u))))
(B (name destroy3)
   (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33)
          (R#DESTRUCTION e0 e0 :0.33))
       (destroy-vb e0 x y u)))
(B (name demolish)
   (=> (^ (S#BUILDING e0 :0.33) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.33)
          (R#DESTRUCTION e0 e0 :0.33))
       (demolish-vb e0 x y u)))
(B (name deconstruct)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (deconstruct-vb e0 x y u)))
(B (name ruin)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.30)
          (R#DESTRUCTION e0 e0 :0.30))
       (ruin-vb e0 x y u)))

(B (name deconstruction)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.30)
          (R#DESTRUCTION x e0 :0.30))
       (deconstruction-nn e0 x)))
(B (name destruction)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.30)
          (R#DESTRUCTION x e0 :0.30))
       (destruction-nn e0 x)))
(B (name demolition)
   (=> (^ (S#BUILDING e0 :0.30) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.30)
          (R#DESTRUCTION x e0 :0.30))
       (demolition-nn e0 x)))


;; Building: Components

(B (name foundation)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (foundation-nn e0 x)))
(B (name base)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (base-nn e0 x)))

(B (name building-block)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (^ (building-nn e0 x) (of-in e1 y x) (block-nn e2 y))))
(B (name support-beam)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (^ (support-nn e0 x) (of-in e1 y x) (beam-nn e2 y))))
(B (name cement)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (cement-nn e0 x)))
(B (name brick)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (brick-nn e0 x)))
(B (name concrete)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (concrete-nn e0 x)))
(B (name mortar)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (mortar-nn e0 x)))
(B (name stone)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (stone-nn e0 x)))
(B (name keystone)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (keystone-nn e0 x)))
(B (name wall)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (wall-nn e0 x)))
(B (name ceiling)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (ceiling-nn e0 x)))
(B (name elevator)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (elevator-nn e0 x)))

(B (name support-structure)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45))
       (^ (support-nn e0 x) (of-in e1 y x) (structure-nn e2 y))))


;; Building: Support

(B (name support-nn)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (support-nn e0 x)))
(B (name support-vb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.45))
       (support-vb e0 x y u)))

(B (name buttress-nn)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (buttress-nn e0 x)))
(B (name buttress-vb)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.45))
       (buttress-vb e0 x y u)))

(B (name pillar)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (pillar-nn e0 x)))
(B (name underpinning)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT x e0 :0.45))
       (underpinning-nn e0 x)))

(B (name underpin)
   (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%SUPPORT e0 e0 :0.45))
       (underpin-vb e0 x y u)))


;; Building: Mapping

(B (name building-map)
   (=> (I#BUILDING x :0.9)
       (S#BUILDING x)))
(B (name structure-map)
   (=> (I#BUILDING%STRUCTURE x y :0.9)
       (SS#BUILDING%STRUCTURE x y)))
(B (name creation_destruction-map)
   (=> (I#BUILDING%CREATION-DESTRUCTION x y :0.9)
       (SS#BUILDING%CREATION_DESTRUCTION x y)))
(B (name components-map)
   (=> (I#BUILDING%COMPONENTS x y :0.9)
       (SS#BUILDING%COMPONENTS x y)))


;; Business
;;   The activity of making, buying, or selling goods or providing services
;;   in exchange for money.

(B (name business-nn)
   (=> (S#BUSINESS e0 :0.9)
       (business-nn e0 x)))
(B (name company-nn)
   (=> (S#BUSINESS e0 :0.9)
       (company-nn e0 x)))
(B (name manufacturer-nn)
   (=> (S#BUSINESS e0 :0.9)
       (manufacturer-nn e0 x)))

(B (name manufacture-vb)
   (=> (S#BUSINESS e0 :0.9)
       (manufacture-vb e0 x0 x1 x2)))
(B (name sell-vb)
   (=> (S#BUSINESS e0 :0.9)
       (sell-vb e0 x0 x1 x2)))
(B (name buy-vb)
   (=> (S#BUSINESS e0 :0.9)
       (buy-vb e0 x0 x1 x2)))


;; Business: Mapping

(B (name business-map)
   (=> (I#BUSINESS x :0.9)
       (S#BUSINESS x)))


;; Clothing
;;   The things that people wear to cover their bodies.

(B (name clothing-nn)
   (=> (S#CLOTHING e0 :0.9)
       (clothing-nn e0 x)))

(B (name shirt-nn)
   (=> (S#CLOTHING e0 :0.9)
       (shirt-nn e0 x)))
(B (name jacket-nn)
   (=> (S#CLOTHING e0 :0.9)
       (jacket-nn e0 x)))
(B (name hat-nn)
   (=> (S#CLOTHING e0 :0.9)
       (hat-nn e0 x)))
(B (name cloak-nn)
   (=> (S#CLOTHING e0 :0.9)
       (cloak-nn e0 x)))
(B (name dress-nn)
   (=> (S#CLOTHING e0 :0.9)
       (dress-nn e0 x)))
(B (name skirt-nn)
   (=> (S#CLOTHING e0 :0.9)
       (skirt-nn e0 x)))


;; Clothing: Mapping

(B (name clothing-map)
   (=> (I#CLOTHING x :0.9)
       (S#CLOTHING x)))


;; Competition
;;   Rivalry between two or more persons or groups for an object desired in
;;   common, usually resulting in a victor and a loser but not necessarily
;;   involving the destruction of the latter.

;; Competition: Type

(B (name competition-nn)
   (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%TYPE x e0 :0.45))
       (competition-nn e0 x)))
(B (name contest-nn)
   (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%TYPE x e0 :0.45))
       (contest-nn e0 x)))
(B (name race-nn)
   (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%TYPE x e0 :0.45))
       (race-nn e0 x)))
(B (name fair-shot-at)
   (=> (^ (S#COMPETITION e1 :0.45) (SS#COMPETITION%TYPE x e1 :0.45))
       (^ (fair-adj e0 x) (shot-nn e1 x) (at-in e3 x y))))


;; Competition: Component

(B (name winner-nn)
   (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45))
       (winner-nn e0 x)))
(B (name loser-nn)
   (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45))
       (loser-nn e0 x)))
(B (name player-nn)
   (=> (^ (S#COMPETITION x :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45))
       (player-nn e0 x)))


;; Competition: Mapping

(B (name competition-map)
   (=> (I#COMPETITION x :0.9)
       (S#COMPETITION x)))
(B (name competition-component-map)
   (=> (I#COMPETITION%COMPONENT x y :0.9)
       (SS#COMPETITION%COMPONENT x y)))


;; Confinement
;;   To enclose within bounds; limit or restrict; to shut or keep in; prevent
;;   from leaving a place.

;; Confinement: Confined Space

(B (name prison)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (prison-nn e0 x)))
(B (name jail)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (jail-nn e0 x)))
(B (name gaol)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (gaol-nn e0 x)))
(B (name cage)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (cage-nn e0 x)))
(B (name dungeon)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (dungeon-nn e0 x)))
(B (name penitentiary)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (penitentiary-nn e0 x)))
(B (name dead-end)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (dead-end-nn e0 x)))
(B (name alcatraz)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (alcatraz-nn e0 x)))
(B (name cell)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (cell-nn e0 x)))
(B (name closet)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45))
       (closet-nn e0 x)))

(B (name stuck)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.45))
       (stuck-adj e0 x)))

(B (name imprison)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (imprison-vb e0 x y u)))
(B (name confine)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (confine-vb e0 x y u)))
(B (name incarcerate)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (incarcerate-vb e0 x y u)))
(B (name lock)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (lock-vb e0 x y u)))
(B (name constrain)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (constrain-vb e0 x y u)))
(B (name jail-vb)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (jail-vb e0 x y u)))


;; Confinement: Restraints

(B (name trap)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (trap-nn e0 x)))
(B (name net)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (net-nn e0 x)))
(B (name handcuffs)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (handcuff-nn e0 x)))
(B (name chain)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (chain-nn e0 x)))
(B (name bondage)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (bondage-nn e0 x)))
(B (name bond)
   (=> (^ (S#CONFINEMENT u :0.45) (SS#CONFINEMENT%RESTRAINTS x u :0.45))
       (bond-nn e0 x)))
(B (name grip)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45))
       (grip-nn e0 x)))

(B (name catch)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (catch-vb e0 x y u)))
(B (name grip)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (grip-vb e0 x y u)))
(B (name handcuff)
   (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2)
          (R#AGENT x e0 :0.2) (R#PATIENT y e0 :0.2))
       (handcuff-vb e0 x y u)))


;; Confinement: Exit

(B (name door)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (door-nn e0 x)))
(B (name ladder)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (ladder-nn e0 x)))
(B (name rope)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (rope-nn e0 x)))
(B (name trampoline)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (trampoline-nn e0 x)))
(B (name lifeline)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (lifeline-nn e0 x)))
(B (name escape)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (escape-nn e0 x)))

(B (name freedom-from)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (^ (freedom-nn e0 x) (from-in e1 x y))))

(B (name escape)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (escape-vb e0 x y u)))
(B (name get-out-of)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (get-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 w))))
(B (name get-out)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (get-vb e0 x y u) (out-in e1 e0))))
(B (name break-out-of)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (break-vb e0 x y u) (out-in e1 e0) (of-in e2 e0 w))))
(B (name break-out)
   (=> (^ (S#CONFINEMENT e0 :0.30) (SS#CONFINEMENT%EXIT e0 e0 :0.30)
          (R#ESCAPE-AGENT x e0 :0.30))
       (^ (break-vb e0 x y u) (out-in e1 e0))))
(B (name liberate)
   (=> (^ (S#CONFINEMENT u1 :0.30) (SS#CONFINEMENT%EXIT e0 u1 :0.30)
          (R#EXIT-AGENT x e0 :0.30) (R#EXIT-PATIENT y e0 :0.30))
       (liberate-vb e0 x y u)))

(B (name liberate)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45))
       (liberation-nn e0 x)))

(B (name break-restraints)
   (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT e0 e0 :0.45))
       (^ (S#CONFINEMENT e1) (SS#CONFINEMENT%RESTRAINTS y e1)
          (break-vb e0 x y z))))


;; Confinement: Mapping

(B (name confinement-map)
   (=> (I#CONFINEMENT x :0.9)
       (S#CONFINEMENT x)))
(B (name confined-space-map)
   (=> (I#CONFINEMENT%CONFINED_SPACE x y :0.9)
       (SS#CONFINEMENT%CONFINED_SPACE x y)))
(B (name confinement-restraints-map)
   (=> (I#CONFINEMENT%RESTRAINTS x y :0.9)
       (SS#CONFINEMENT%RESTRAINTS x y)))
(B (name exit-map)
   (=> (I#CONFINEMENT%EXIT x y :0.9)
       (SS#CONFINEMENT%EXIT x y)))


;; Container
;;   An object (such as a box or can) that can hold something; a receptacle
;;   (as a box or jar) for holding goods.

(B (name container-nn)
   (=> (S#CONTAINER e0 :0.45)
       (container-nn e0 x)))

(B (name box-nn)
   (=> (S#CONTAINER e0 :0.45)
       (box-nn e0 x)))
(B (name can-nn)
   (=> (S#CONTAINER e0 :0.45)
       (can-nn e0 x)))
(B (name jar-nn)
   (=> (S#CONTAINER e0 :0.45)
       (jar-nn e0 x)))
(B (name jug-nn)
   (=> (S#CONTAINER e0 :0.45)
       (jug-nn e0 x)))
(B (name crate-nn)
   (=> (S#CONTAINER e0 :0.45)
       (crate-nn e0 x)))


;; Container: Mapping

(B (name container-map)
   (=> (I#CONTAINER x :0.9)
       (S#CONTAINER x)))


;; Contamination
;;   To make something less pure or make it poisonous; make (something) impure
;;   by exposure or addition of a poisonous or polluting substance. (Includes
;;   former IMPURITY axioms.)

;; Contamination: Type

(B (name dirt)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE x e0 :0.45))
       (dirt-nn e0 x)))
(B (name dust)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE x e0 :0.45))
       (dust-nn e0 x)))
(B (name trash)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE x e0 :0.45))
       (trash-nn e0 x)))

(B (name dirty-adj)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE e0 e0 :0.45))
       (dirty-adj e0 x)))

(B (name dirty-nn)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE x e0 :0.45))
       (dirty-nn e0 x)))
(B (name stain)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE x e0 :0.45))
       (stain-nn e0 x)))

(B (name sully)
   (=> (^ (S#CONTAMINATION e0 :0.45) (SS#CONTAMINATION%TYPE e0 e0 :0.45))
       (sully-vb e0 x y z)))


;; Contamination: Mapping

(B (name contamination-map)
   (=> (I#CONTAMINATION x :0.9)
       (S#CONTAMINATION x)))
(B (name contamination-type-map)
   (=> (I#CONTAMINATION%TYPE x y :0.9)
       (SS#CONTAMINATION%TYPE x y)))



;; Crime
;;   Any unlawful offense, serious wrongdoing.

;; Crime: Type

(B (name crime)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (crime-nn e0 x)))
(B (name offence)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (offence-nn e0 x)))
(B (name offense)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (offense-nn e0 x)))
(B (name felony)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (felony-nn e0 x)))
(B (name delinquency)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (delinquency-nn e0 x)))

(B (name misdeed)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (misdeed-nn e0 x)))
(B (name malefaction)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (malefaction-nn e0 x)))
(B (name violation)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (violation-nn e0 x)))

(B (name guilty-conduct)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (guilty-adj e1 x) (conduct-nn e0 x))))
(B (name criminal-conduct)
   (=> (^ (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45))
       (^ (criminal-adj e1 x) (conduct-nn e0 x))))
(B (name public-wrong)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (public-adj e1 x) (wrong-nn e0 x))))
(B (name criminal-wrong)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (^ (criminal-adj e1 x) (wrong-nn e0 x))))
(B (name criminal-act)
   (=> (^ (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45))
       (^ (criminal-adj e1 x) (act-nn e0 x))))

(B (name rape-nn)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (rape-nn e0 x)))
(B (name assault-nn)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (assault-nn e0 x)))

(B (name rape-vb)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (rape-vb e0 x y u)))
(B (name violate)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (violate-vb e0 x y u)))
(B (name kill)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#AGENT x e0 :0.2)
          (R#VICTIM y e0 :0.2))
       (kill-vb e0 x y u)))

(B (name pimp-vb)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%TYPE e0 e0 :0.30) (R#AGENT x e0 :0.30))
       (pimp-vb e0 x z u2)))

;; From - Crime
(B (name from-theft)
   (=> (R#CRIME_VICTIM y :0.9)
       (^ (SS#CRIME%TYPE x e0) (from-in e1 e0 y))))

(B (name violence)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45))
       (violence-nn e0 x)))


;; Crime: Perpetrator

(B (name criminal-nn)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (criminal-nn e0 x)))
(B (name criminal-adj)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (criminal-adj e0 x)))
(B (name delinquent)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (delinquent-nn e0 x)))
(B (name offender)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (offender-nn e0 x)))
(B (name convict)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (convict-nn e0 x)))
(B (name outlaw)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (outlaw-nn e0 x)))
(B (name culprit)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (culprit-nn e0 x)))
(B (name malefactor)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (malefactor-nn e0 x)))
(B (name prostitute)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (prostitute-nn e0 x)))
(B (name pimp-nn)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (pimp-nn e0 x)))
(B (name accomplice)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (accomplice-nn e0 x)))


;; Crime: Punishment

(B (name punishment)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (punishment-nn e0 x)))
(B (name penalty)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (penalty-nn e0 x)))
(B (name sentence)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (sentence-nn e0 x)))
(B (name conviction)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (conviction-nn e0 x)))
;; mulct: a fine or penalty, esp. a pecuniary punishment or penalty.
(B (name mulct)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (mulct-nn e0 x)))
(B (name fine)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (fine-nn e0 x)))
(B (name scourge)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (scourge-nn e0 x)))
(B (name accusation)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (accusation-nn e0 x)))
(B (name verdict)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (verdict-nn e0 x)))
(B (name condemnation)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (condemnation-nn e0 x)))
(B (name indictment)
   (=> (^ (S#CRIME u :0.45) (SS#CRIME%PUNISHMENT x u :0.45))
       (indictment-nn e0 x)))

(B (name punitive)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (punitive-adj e0 x)))
(B (name cursed)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (cursed-adj e0 x)))
(B (name guilty)
   (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT e0 e0 :0.45))
       (guilty-adj e0 x)))

(B (name prison-sentence)
   (=> (^ (S#CRIME y :0.45) (SS#CRIME%PUNISHMENT y y :0.45))
       (^ (prison-nn e0 x) (of-in e1 y x) (sentence-nn e2 y))))
(B (name life-sentence)
   (=> (^ (S#CRIME y :0.45) (SS#CRIME%PUNISHMENT y y :0.45))
       (^ (life-nn e0 x) (of-in e1 y x) (sentence-nn e2 y))))

(B (name condemn)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (condemn-vb e0 x y u)))
(B (name punish)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (punish-vb e0 x y u)))
(B (name convict)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (convict-vb e0 x y u)))
(B (name accuse)
   (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2)
          (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2))
       (accuse-vb e0 x y u)))


;; Crime: Victim

(B (name victim)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%VICTIM x e0 :0.30)
          (R#VICTIM x e0 :0.30))
       (victim-nn e0 x)))
(B (name prey)
   (=> (^ (S#CRIME e0 :0.30) (SS#CRIME%VICTIM x e0 :0.30)
          (R#VICTIM x e0 :0.30))
       (prey-nn e0 x)))
(B (name sufferer)
   (=> (^ (SS#CRIME%VICTIM x e1 :0.30) (R#VICTIM x e1 :0.30))
       (^ (S#CRIME e1) (SS#CRIME%TYPE x e1) (sufferer-nn e0 x))))


;; Crime: Mapping

(B (name crime-map)
   (=> (I#CRIME x :0.9)
       (S#CRIME x)))
(B (name crime-type-map)
   (=> (I#CRIME%TYPE x y :0.9)
       (SS#CRIME%TYPE x y)))
(B (name crime-perpetrators-map)
   (=> (I#CRIME%PERPETRATOR x y :0.9)
       (SS#CRIME%PERPETRATOR x y)))
(B (name punishment-map)
   (=> (I#CRIME%PUNISHMENT x y :0.9)
       (SS#CRIME%PUNISHMENT x y)))
(B (name crime-perpetrators-map)
   (=> (I#CRIME%VICTIM x y :0.9)
       (SS#CRIME%VICTIM x y)))


;; Crop
;;   The cultivated produce of the ground, while growing or when gathered;
;;   the yield of such produce for a particular season; cultivated plant that
;;   is grown.

;; Crop: Planting

(B (name seed)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%PLANTING x e0 :0.30)
          (R#CROP x e0 :0.30)) (seed-nn e0 x)))
(B (name crop)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%PLANTING x e0 :0.30) (R#CROP x e0 :0.30))
       (crop-nn e0 x)))

(B (name sow)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (sow-vb e0 x y u)))
(B (name plant)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (plant-vb e0 x y u)))


;; Crop: Cultivation

(B (name grow)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (^ (TS#WEALTH y) (grow-vb e0 x y u))))
(B (name fertilize)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (fertilize-vb e0 x y u)))
(B (name fertilise)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (fertilise-vb e0 x y u)))
(B (name water)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (water-vb e0 x y u)))
(B (name prune)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (prune-vb e0 x y u)))
(B (name root-out)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23))
       (^ (root-vb e0 x y u) (out-in e1 e0))))

(B (name grow)
   (=> (^ (S#CROP e0 :0.45) (SS#CROP%CULTIVATION x e0 :0.45))
       (cultivation-nn e0 x)))


;; Crop: Outcome

(B (name reap)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23))
       (reap-vb e0 x y u)))
(B (name harvest)
   (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23)
          (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23))
       (harvest-vb e0 x y u)))

(B (name bumper-crop)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%OUTCOME x e0 :0.30) (R#CROP y e0 :0.30))
       (^ (bumper-nn e0 x) (of-in e1 y x) (crop-nn e2 y))))
(B (name harvest-nn)
   (=> (^ (S#CROP e0 :0.30) (SS#CROP%OUTCOME x e0 :0.30) (R#CROP y e0 :0.30))
       (harvest-nn e0 x)))


;; Crop: Mapping

(B (name crop-map)
   (=> (I#CROP x :0.9)
       (S#CROP x)))
(B (name crop-planting-map)
   (=> (I#CROP%PLANTING x y :0.9)
       (SS#CROP%PLANTING x y)))
(B (name crop-cultivation-map)
   (=> (I#CROP%CULTIVATION x y :0.9)
       (SS#CROP%CULTIVATION x y)))
(B (name crop-outcome-map)
   (=> (I#CROP%OUTCOME x y :0.9)
       (SS#CROP%OUTCOME x y)))


;; Darkness
;;   With little or no light, or having little brightness; the partial or
;;   total absence of light.

(B (name darkness)
   (=> (^ (S#DARKNESS e0 :0.45)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (darkness-nn e0 x)))
(B (name blackness)
   (=> (^ (S#DARKNESS e0 :0.45)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (blackness-nn e0 x)))
(B (name cave)
   (=> (^ (S#DARKNESS e0 :0.45)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (cave-nn e0 x)))
(B (name dark-days)
   (=> (^ (S#DARKNESS e0 :0.30)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.30)
          (R#DARK x e0 :0.30))
       (^ (dark-adj e0 x) (day-nn e1 x))))
(B (name dark-cloud)
   (=> (^ (S#DARKNESS e0 :0.30)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.30)
          (R#DARK x e0 :0.30))
       (^ (dark-adj e0 x) (cloud-nn e1 x))))

(B (name dark)
   (=> (^ (S#DARKNESS x :0.30)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.30)
          (R#DARK x e0 :0.30))
       (dark-adj e0 x)))

(B (name benight)
   (=> (^ (S#DARKNESS e0 :0.45)
          (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.45))
       (benight-vb e0 x y z)))


;; Darkness: Movement in the Range

(B (name darken)
   (=> (^ (S#DARKNESS e0 :0.30) (SS#DARKNESS%MOVEMENT_IN_THE_RANGE x e0 :0.30)
          (R#DARK y e0 :0.30))
       (darken-vb e0 x y u)))


;; Darkness: Mapping

(B (name darkness-map)
   (=> (I#DARKNESS x :0.9)
       (S#DARKNESS x)))
(B (name dark-end-of-range-map)
   (=> (I#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x y :0.9)
       (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x y)))
(B (name darkness-movementmap)
   (=> (I#DARKNESS%MOVEMENT_IN_THE_RANGE x y :0.9)
       (SS#DARKNESS%MOVEMENT_IN_THE_RANGE x y)))


;; Disease
;;   A disordered or incorrectly functioning organ, part, structure, or system
;;   of the body resulting from the effect of genetic or developmental errors,
;;   infection, poisons, nutritional deficiency or imbalance, toxicity, or
;;   unfavorable environmental factors; illness; sickness; ailment.

;; Disease: Type

(B (name disease)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (disease-nn e0 x)))
(B (name illness)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (illness-nn e0 x)))
(B (name disorder)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (disorder-nn e0 x)))
(B (name sickness)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (sickness-nn e0 x)))
(B (name malum)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (malum-nn e0 x)))
(B (name morbus)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (morbus-nn e0 x)))
(B (name malady)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (malady-nn e0 x)))
(B (name malaise)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (malaise-nn e0 x)))
(B (name ailment)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (ailment-nn e0 x)))
(B (name affliction)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (affliction-nn e0 x)))
(B (name medical-condition)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (^ (condition-nn e0 x) (medical-adj e1 x))))
(B (name health-problem)
   (=> (^ (S#DISEASE e1 :0.45) (SS#DISEASE%TYPE y e1 :0.45))
       (^ (health-nn e0 x) (of-in e2 y x) (problem-nn e1 y))))

(B (name plague)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (plague-nn e0 x)))
(B (name cancer)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (cancer-nn e0 x)))
(B (name infection)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (infection-nn e0 x)))
(B (name blight)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (blight-nn e0 x)))
(B (name leprosy)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45))
       (leprosy-nn e0 x)))

(B (name spread)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (^ (TS#POVERTY x) (spread-vb e0 x y z))))
;(B (name spread)
;   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
;       (spread-vb e0 x y z)))

(B (name infect)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (infect-vb e0 x y z)))
(B (name cripple)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (cripple-vb e0 x y z)))
(B (name paralyze)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (paralyze-vb e0 x y z)))
(B (name paralyse)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (paralyse-vb e0 x y z)))

(B (name sick)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (sick-adj e0 y)))
(B (name ill)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (ill-adj e0 y)))
(B (name sore)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (sore-adj e0 y)))
(B (name diseased)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (diseased-adj e0 y)))
(B (name handicapped)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (handicapped-adj e0 y)))
(B (name disabled)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (disabled-adj e0 y)))

(B (name crippled)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE x e0 :0.30) (R#SICK y e0 :0.30))
       (crippled-adj e0 y)))

(B (name invalid)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE x e0 :0.30) (R#SICK y e0 :0.30))
       (invalid-nn e0 y)))
(B (name patient)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE x e0 :0.30) (R#SICK y e0 :0.30))
       (patient-nn e0 y)))

(B (name suffer-from)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y x :0.30))
       (^ (suffer-vb e0 y u1 u2) (from-in e1 e0 x))))
(B (name sicken)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TYPE e0 e0 :0.30) (R#SICK y x :0.30))
       (sicken-vb e0 y u1 u2)))

(B (name of-disease)
   (=> (R#SICK  y x :0.9)
       (^ (S#DISEASE x) (of-in e1 x y))))

(B (name epidemic-nn)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45))
       (epidemic-nn e0 y)))
(B (name pandemic-nn)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45))
       (pandemic-nn e0 y)))
(B (name virus)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45))
       (virus-nn e0 y)))

(B (name epidemic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (epidemic-adj e0 y)))
(B (name pandemic-adj)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (pandemic-adj e0 y)))
(B (name viral-adj)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45))
       (viral-adj e0 y)))

;; Of - Epidemic
(B (name of-epidemic)
   (=> (S#DISEASE y :0.9)
       (^ (SS#DISEASE%TYPE x y) (of-in e1 x y))))


;; Disease: Treatment

(B (name treatment)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (treatment-nn e0 x)))
(B (name operation)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (operation-nn e0 x)))
(B (name therapy)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (therapy-nn e0 x)))
(B (name diagnosis)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (diagnosis-nn e0 x)))
(B (name diagnostic)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (diagnostic-adj e0 x)))
; (B (name examination)
;    (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
;        (examination-nn e0 x)))
(B (name prescription)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45))
       (prescription-nn e0 x)))

(B (name doctor)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (doctor-nn e0 x)))
(B (name healer)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (healer-nn e0 x)))
(B (name physician)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (physician-nn e0 x)))
(B (name surgeon)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (surgeon-nn e0 x)))
(B (name medic)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (medic-nn e0 x)))
(B (name medicament)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30)) (medicament-nn e0 x)))
(B (name remedy)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (remedy-nn e0 x)))
(B (name antibiotic)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT x e0 :0.30))
       (antibiotic-nn e0 x)))
(B (name medicine)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT x e0 :0.30))
       (medicine-nn e0 x)))
(B (name drug)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT x e0 :0.30))
       (drug-nn e0 x)))
(B (name pill)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT x e0 :0.30))
       (pill-nn e0 x)))
(B (name bandage)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (bandage-nn e0 x)))
(B (name band-aid)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (band-aid-nn e0 x)))
(B (name bandaid)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT x e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (bandaid-nn e0 x)))

(B (name treat)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (treat-vb e0 y x u2)))
(B (name prescribe)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (prescribe-vb e0 y u1 u2)))
(B (name diagnose)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (diagnose-vb e0 y x u2)))
(B (name misdiagnose)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (misdiagnose-vb e0 y x u2)))
(B (name alleviate)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (alleviate-vb e0 y x u2)))
(B (name dissect)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (dissect-vb e0 y u1 u2)))
(B (name inoculate)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%TREATMENT e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (inoculate-vb e0 y u1 u2)))


;; Disease: Cure

(B (name cure)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (cure-nn e0 x)))
(B (name panacea)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (panacea-nn e0 x)))
(B (name cure-all)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (cure-all-nn e0 x)))

(B (name cure-vb)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (cure-vb e0 y x u2)))
(B (name heal)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE e0 e0 :0.30)
          (R#CURE-AGENT y e0 :0.30))
       (heal-vb e0 y x u2)))

(B (name unrecoverable)
   (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE e0 e0 :0.2) (R#SICK y e0 :0.1))
       (unrecoverable-adj e0 y)))
(B (name incurable)
   (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE e0 e0 :0.2) (R#SICK y e0 :0.1))
       (incurable-adj e0 y)))

(B (name recover)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (recover-vb e0 y u1 u2)))
(B (name recuperate)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (recuperate-vb e0 y u1 u2)))
(B (name convalesce)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE e0 e0 :0.30) (R#SICK y e0 :0.30))
       (convalesce-vb e0 y u1 u2)))

(B (name recovery)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45))
       (recovery-nn e1)))
(B (name recuperation)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE x e0 :0.45))
       (recuperation-nn e1)))
(B (name convalescence)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%CURE x e0 :0.45))
       (convalescence-nn e1)))

;; Of - Cure
(B (name for-cure)
   (=> (S#DISEASE y :0.9)
       (^ (SS#DISEASE%CURE x y) (for-in e1 x y))))


;; Disease: Symptoms

(B (name symptom)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (symptom-nn e0 y)))
(B (name symptomatic)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 :0.45))
       (symptomatic-adj e0 y)))

(B (name myopic)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 :0.45))
       (myopic-adj e0 y)))

(B (name bleeding)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 :0.45))
       (bleeding-adj e0 y)))
(B (name wound)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (wound-nn e0 y)))
(B (name pain)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (pain-nn e0 y)))
(B (name scar)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (scar-nn e0 y)))
(B (name fever)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (fever-nn e0 y)))
(B (name swelling)
   (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45))
       (swelling-nn e0 y)))

(B (name ache)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%SYMPTOMS e0 e0 :0.30)
          (R#SICK y e0 :0.30))
       (ache-vb e0 y u1 u2)))
(B (name bleed)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%SYMPTOMS e0 e0 :0.30)
          (R#SICK y e0 :0.30))
       (bleed-vb e0 y u1 u2)))
(B (name swell)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%SYMPTOMS e0 e0 :0.30)
          (R#SICK y e0 :0.30))
       (swell-vb e0 y u1 u2)))
(B (name exacerbate)
   (=> (^ (S#DISEASE e0 :0.30) (SS#DISEASE%SYMPTOMS e0 e0 :0.30)
          (R#SICK y e0 :0.30))
       (exacerbate-vb e0 y u1 u2)))


;; Disease: Mapping

(B (name disease-map)
   (=> (I#DISEASE e0 :0.9)
       (S#DISEASE x)))
(B (name disease-type-map)
   (=> (I#DISEASE%TYPE x y :0.9)
       (SS#DISEASE%TYPE x y)))
(B (name disease-cure-map)
   (=> (I#DISEASE%CURE x y :0.9)
       (SS#DISEASE%CURE x y)))
(B (name disease-treatment-map)
   (=> (I#DISEASE%TREATMENT x y :0.9)
       (SS#DISEASE%TREATMENT x y)))
(B (name disease-symptoms-map)
   (=> (I#DISEASE%SYMPTOMS x y :0.9)
       (SS#DISEASE%SYMPTOMS x y)))


;; Downward Movement
;;   Movement from a higher place or level to a lower place or level.
;;   (Including axioms that were in LOW_POINT%MOVEMENT_DOWNWARD.)

(B (name slide)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (slide-vb e0 x y z)))
(B (name drop)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (drop-vb e0 x y z)))
(B (name slip)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (slip-vb e0 x y z)))
(B (name fall)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (fall-vb e0 x y z)))
(B (name tumble)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (tumble-vb e0 x y z)))
(B (name plummet)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (plummet-vb e0 x y z)))
(B (name sink)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (sink-vb e0 x y z)))
(B (name plunge)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (plunge-vb e0 x y z)))
(B (name dig-self-deeper)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.45) (R#MOVE-D-PATIENT x e0 :0.45))
       (^ (dig-vb e0 x y z) (deeper-adj e1 y))))
(B (name go-down)
   (=> (^ (S#DOWNWARD_MOVEMENT e0 :0.30) (R#MOVE-DOWN e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (^ (go-vb e0 x y u) (down-rb e1 e0))))


;; Downward Movement: Mapping

(B (name downward-movement-map)
   (=> (I#DOWNWARD_MOVEMENT x :0.9)
       (S#DOWNWARD_MOVEMENT x)))


;; Emotion Experiencer
;;   A conscious mental reaction (as anger or fear) subjectively experienced
;;   as strong feeling usually directed toward a specific object and typically
;;   accompanied by physiological and behavioral changes in the body.

(B (name emotion-nn)
   (=> (S#EMOTION e0 :0.9)
       (emotion-nn e0 x)))
(B (name feeling-nn)
   (=> (S#EMOTION e0 :0.9)
       (feeling-nn e0 x)))

(B (name anger-nn)
   (=> (S#EMOTION e0 :0.9)
       (anger-nn e0 x)))
(B (name fear-nn)
   (=> (S#EMOTION e0 :0.9)
       (fear-nn e0 x)))


;; Emotion Experiencer: Mapping

(B (name emotion-experiencer-map)
   (=> (I#EMOTION_EXPERIENCER x :0.9)
       (S#EMOTION_EXPERIENCER x)))


;; Energy
;;   A capacity to perform work (such as causing motion).

;; Energy: Type

(B (name energy)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45))
       (energy-nn e0 x)))
(B (name jolt)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45))
       (jolt-nn e0 x)))
(B (name electricity)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45))
       (electricity-nn e0 x)))
(B (name fuel)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45))
       (fuel-nn e0 x)))
(B (name battery)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45))
       (battery-nn e0 x)))

(B (name energetic)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE e0 e0 :0.45))
       (energetic-adj e0 x)))

(B (name power)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE e0 e0 :0.45))
       (power-vb e0 x y z)))


;; Energy: Result

(B (name fuel)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (fuel-vb e0 x y z)))
(B (name charge)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (charge-vb e0 x y z)))
(B (name energize)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (energize-vb e0 x y z)))
(B (name energise)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (energise-vb e0 x y z)))
(B (name warm)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (warm-vb e0 x y z)))
(B (name overheat)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (overheat-vb e0 x y z)))
(B (name heat)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23)
          (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23))
       (heat-vb e0 x y z)))

(B (name warm)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45))
       (warm-adj e0 x)))
(B (name torrid)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45))
       (torrid-adj e0 x)))
(B (name hot)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT e0 e0 :0.45))
       (hot-adj e0 x)))

(B (name charged)
   (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23))
       (charged-adj e0 x)))

(B (name charge-nn)
   (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%RESULT x e0 :0.45))
       (charge-nn e0 x)))


;; Energy: Mapping

(B (name energy-map)
   (=> (I#ENERGY x :0.9)
       (S#ENERGY x)))
(B (name energy-type-map)
   (=> (I#ENERGY%TYPE x y :0.9)
       (SS#ENERGY%TYPE x y)))
(B (name energy-result-map)
   (=> (I#ENERGY%RESULT x y :0.9)
       (SS#ENERGY%RESULT x y)))


;; Enslavement
;;   To make a slave of; reduce to slavery; control, dominate.

;; Enslavement: Servant

(B (name slave)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%SERVANT x e0 :0.30)
          (R#ENSLAVEMENT-PATIENT x e0 :0.30))
       (slave-nn e0 x)))
(B (name vassal)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%SERVANT x e0 :0.30)
          (R#ENSLAVEMENT-PATIENT x e0 :0.30))
       (vassal-nn e0 x)))
(B (name thrall)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%SERVANT x e0 :0.30)
          (R#ENSLAVEMENT-PATIENT x e0 :0.30))
       (thrall-nn e0 x)))
(B (name minion)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%SERVANT x e0 :0.30)
          (R#ENSLAVEMENT-PATIENT x e0 :0.30))
       (minion-nn e0 x)))
(B (name subject)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%SERVANT x e0 :0.30)
          (R#ENSLAVEMENT-PATIENT x e0 :0.30))
       (subject-nn e0 x)))


;; Enslavement: Oppression

(B (name slavery)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (slavery-nn e0 x)))
(B (name enslavement)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (enslavement-nn e0 x)))
(B (name oppression)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (oppression-nn e0 x)))

(B (name enslave)
   (=> (^ (S#ENSLAVEMENT e0 :0.2) (SS#ENSLAVEMENT%OPPRESSION e0 e0 :0.2)
          (R#ENSLAVEMENT-PATIENT y e0 :0.2) (R#ENSLAVEMENT-AGENT x e0 :0.2))
       (enslave-vb e0 x y u)))
(B (name oppress)
   (=> (^ (S#ENSLAVEMENT e0 :0.2) (SS#ENSLAVEMENT%OPPRESSION e0 e0 :0.2)
          (R#ENSLAVEMENT-PATIENT y e0 :0.2) (R#ENSLAVEMENT-AGENT x e0 :0.2))
       (oppress-vb e0 x y u)))

(B (name oppressive)
   (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45))
       (oppressive-adj e0 x)))


;; Enslavement: Master

(B (name master)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%MASTER e0 e0 :0.30)
          (R#ENSLAVEMENT-AGENT x e0 :0.30))
       (master-nn e0 x)))
(B (name ruler)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%MASTER e0 e0 :0.30)
          (R#ENSLAVEMENT-AGENT x e0 :0.30))
       (ruler-nn e0 x)))
(B (name slave-driver)
   (=> (^ (S#ENSLAVEMENT e0 :0.30) (SS#ENSLAVEMENT%MASTER e0 e0 :0.30)
          (R#ENSLAVEMENT-AGENT x e0 :0.30))
       (^ (slave-nn e0 x) (driver-nn e1 y))))

(B (name reign-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33)
          (R#ENSLAVEMENT-AGENT x e0 :0.33))
       (reign-vb e0 x y u)))
(B (name rule)
   (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33)
          (R#ENSLAVEMENT-AGENT x e0 :0.33))
       (rule-vb e0 x y u)))
(B (name subject-vb)
   (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33)
          (R#ENSLAVEMENT-AGENT x e0 :0.33))
       (subject-vb e0 x y u)))


;; Enslavement: Mapping

(B (name enslavement-map)
   (=> (I#ENSLAVEMENT x :0.9)
       (S#ENSLAVEMENT x)))
(B (name servant-map)
   (=> (I#CONFINEMENT%SERVANT x y :0.9)
       (SS#CONFINEMENT%SERVANT x y)))
(B (name oppression-map)
   (=> (I#CONFINEMENT%OPPRESSION x y :0.9)
       (SS#CONFINEMENT%OPPRESSION x y)))
(B (name master-map)
   (=> (I#CONFINEMENT%MASTER x y :0.9)
       (SS#CONFINEMENT%MASTER x y)))


;; Fabric
;;   Woven or knitted material; the basic structure of something. (Including
;;   axioms from MATERIAL.)

;; Fabric: Type

(B (name fabric-nn)
  (=> (^ (S#FABRIC x :0.48) (SS#FABRIC%TYPE e0 x :0.48))
      (fabric-nn e0 x)))
(B (name cloth-nn)
  (=> (^ (S#FABRIC x :0.48) (SS#FABRIC%TYPE e0 x :0.48))
      (cloth-nn e0 x)))
(B (name weave-nn)
  (=> (^ (S#FABRIC x :0.48) (SS#FABRIC%TYPE e0 x :0.48))
      (weave-nn e0 x)))


;; Fabric: Cut

(B (name cut-vb)
  (=> (^ (S#FABRIC y :0.30) (SS#FABRIC%CUT e0 y :0.30)
         (R#CUT-AGENT x e0 :0.30))
      (cut-vb e0 x y u2)))
(B (name cut-nn)
  (=> (^ (S#FABRIC x :0.45) (SS#FABRIC%CUT e0 y :0.45))
      (^ (nn e1 x y) (cut-nn e0 x))))
(B (name cut-nn2)
  (=> (^ (S#FABRIC x :0.45) (SS#FABRIC%CUT e0 y :0.45))
      (^ (of-in e1 x y) (cut-nn e0 x))))
(B (name cut-nn3)
  (=> (^ (S#FABRIC x :0.48) (SS#FABRIC%CUT e0 y :0.48))
      (cut-nn e0 x)))


;; Fabric: Mapping

(B (name fabric-map)
  (=> (I#FABRIC x :0.9)
      (S#FABRIC x)))
(B (name fabric-type-map)
  (=> (I#FABRIC%TYPE x y :0.9)
      (SS#FABRIC%TYPE x y)))
(B (name fabric-cut-map)
  (=> (I#FABRIC%CUT x y :0.9)
      (SS#FABRIC%CUT x y)))


;; Factory
;;   A building or group of buildings where products are made.

(B (name factory-nn)
  (=> (S#FACTORY x :0.9)
      (factory-nn e0 x)))

(B (name industrial-adj)
  (=> (S#FACTORY x :0.9)
      (industrial-adj e0 x)))


;; Factory: Mapping

(B (name factory-map)
  (=> (I#FACTORY x :0.9)
      (S#FACTORY x)))


;; Family
;;   A group of people who are related to each other.

(B (name family-nn)
  (=> (S#FAMILY x :0.9)
      (family-nn e0 x)))
(B (name household-nn)
  (=> (S#FAMILY x :0.9)
      (household-nn e0 x)))
(B (name clan-nn)
  (=> (S#FAMILY x :0.9)
      (clan-nn e0 x)))
(B (name dynasty-nn)
  (=> (S#FAMILY x :0.9)
      (dynasty-nn e0 x)))

(B (name ancestor-nn)
  (=> (S#FAMILY x :0.9)
      (ancestor-nn e0 x)))
(B (name relative-nn)
  (=> (S#FAMILY x :0.9)
      (relative-nn e0 x)))
(B (name sibling-nn)
  (=> (S#FAMILY x :0.9)
      (sibling-nn e0 x)))
(B (name brother-nn)
  (=> (S#FAMILY x :0.9)
      (brother-nn e0 x)))
(B (name sister-nn)
  (=> (S#FAMILY x :0.9)
      (sister-nn e0 x)))
(B (name mother-nn)
  (=> (S#FAMILY x :0.9)
      (mother-nn e0 x)))
(B (name father-nn)
  (=> (S#FAMILY x :0.9)
      (father-nn e0 x)))

(B (name familial-adj)
  (=> (S#FAMILY x :0.9)
      (familial-adj e0 x)))


;; Family: Mapping

(B (name family-map)
  (=> (I#FAMILY x :0.9)
      (S#FAMILY x)))


;; Fire
;;   The light and heat and especially the flame produced by burning.

(B (name fire-nn)
  (=> (S#FIRE x :0.9)
      (fire-nn e0 x)))
(B (name flame-nn)
  (=> (S#FIRE x :0.9)
      (flame-nn e0 x)))
(B (name blaze-nn)
  (=> (S#FIRE x :0.9)
      (blaze-nn e0 x)))
(B (name smoke-nn)
  (=> (S#FIRE x :0.9)
      (smoke-nn e0 x)))

(B (name burn-vb)
  (=> (S#FIRE x :0.9)
      (burn-vb e0 x y u)))


;; Fire: Mapping

(B (name fire-map)
  (=> (I#FIRE x :0.9)
      (S#FIRE x)))


;; Food
;;   Any nourishing substance that is eaten, drunk, or otherwise taken into
;;   the body to sustain life, provide energy, promote growth, etc.

;; Food: Type

(B (name food)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (food-nn e0 x)))
(B (name bread)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (bread-nn e0 x)))
(B (name meat)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (meat-nn e0 x)))
(B (name carrot)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (carrot-nn e0 x)))
(B (name steak)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (steak-nn e0 x)))
(B (name potato)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (potato-nn e0 x)))


;; Food: Consumption

(B (name taste-nn)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION x e0 :0.45))
       (taste-nn e0 x)))
(B (name savor-nn)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION x e0 :0.45))
       (savor-nn e0 x)))

(B (name tasty)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION e0 e0 :0.45))
       (tasty-adj e0 x)))
(B (name luscious)
   (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION e0 e0 :0.45))
       (luscious-adj e0 x)))

(B (name taste-of)
   (=> (^ (S#FOOD e0 :0.30) (SS#FOOD%CONSUMPTION x e0 :0.30)
          (R#TASTE-OBJECT y e0 :0.30))
       (^ (taste-nn e0 x) (of-in e1 x y))))

(B (name taste-vb)
   (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23)
          (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23))
       (taste-vb e0 x y u)))
(B (name savor-vb)
   (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23)
          (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23))
       (savor-vb e0 x y u)))
(B (name consume-wealth)
   (=> (^ (S#FOOD e0 :0.2) (SS#FOOD%CONSUMPTION e0 e0 :0.2)
          (R#TASTE-AGENT x e0 :0.2) (R#TASTE-OBJECT y e0 :0.2))
       (^ (TS#WEALTH y) (consume-vb e0 x y u))))
(B (name consume)
   (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23)
          (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23))
       (consume-vb e0 x y u)))
(B (name eat)
   (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23)
          (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23))
       (^ (TS#WEALTH y) (eat-vb e0 x y u))))
(B (name swallow)
   (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23)
          (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23))
       (^ (TS#WEALTH y) (swallow-vb e0 x y u))))
(B (name chew)
   (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23)
          (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23))
       (^ (TS#WEALTH y) (chew-vb e0 x y u))))


;; Food: Mapping

(B (name food-map)
   (=> (I#FOOD x :0.9)
       (S#FOOD x)))
(B (name food-type-map)
   (=> (I#FOOD%TYPE x y :0.9)
       (SS#FOOD%TYPE x y)))
(B (name food-consumption-map)
   (=> (I#FOOD%CONSUMPTION x y :0.9)
       (SS#FOOD%CONSUMPTION x y)))


;; Forceful Extraction
;;   To get, pull, or draw out, usually with special effort, skill, or force.

;; Forceful Extraction: Type

(B (name squeeze)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (squeeze-vb e0 x y u)))
(B (name wring)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (wring-vb e0 x y u)))
(B (name vacuum)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (vacuum-vb e0 x y u)))
(B (name extract)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (extract-vb e0 x y u)))
(B (name wrest)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (wrest-vb e0 x y u)))
(B (name tug)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (tug-vb e0 x y u)))
(B (name milk)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (milk-vb e0 x y u)))
(B (name skin)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (skin-vb e0 x y u)))
(B (name fleece)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (fleece-vb e0 x y u)))
(B (name shear)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (shear-vb e0 x y u)))
(B (name wring)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (wring-vb e0 x y u)))
(B (name pluck)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.30)
          (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.30)
          (R#EXTRACTION-AGENT x e0 :0.30))
       (pluck-vb e0 x y u)))

(B (name extraction)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45)
          (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45))
       (extraction-nn e0 x)))
(B (name extortion)
   (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45)
          (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45))
       (extortion-nn e0 x)))


;; Forceful Extraction: Mapping

(B (name forceful-extraction-map)
   (=> (I#FORCEFUL_EXTRACTION x :0.9)
       (S#FORCEFUL_EXTRACTION x)))
(B (name forceful-extraction-type-map)
   (=> (I#FORCEFUL_EXTRACTION%TYPE x y :0.9)
       (SS#FORCEFUL_EXTRACTION%TYPE x y)))


;; Forward Motion
;;   Movement to or toward what is in front.

(B (name advance-vb)
   (=> (S#FORWARD_MOTION e0 :0.9)
       (advance-vb e0 x y z)))


;; Forward Motion: Mapping

(B (name forward-motion-map)
   (=> (I#FORWARD_MOTION x :0.9)
       (S#FORWARD_MOTION x)))


;; Game
;;   A competitive activity involving skill, chance, or endurance on the part
;;   of two or more persons who play according to a set of rules, usually for
;;   their own amusement or for that of spectators.

;; Game: Type

(B (name game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (game-nn e0 x)))
(B (name puzzle)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (puzzle-nn e0 x)))
(B (name gamble)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (gamble-nn e0 x)))
(B (name chess)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (chess-nn e0 x)))
(B (name chess-game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (chess-nn e0 x) (of-in e1 y x) (game-nn e2 y))))
(B (name chess-match)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (chess-nn e0 x) (of-in e1 y x) (match-nn e2 y))))
(B (name poker)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (poker-nn e0 x)))
(B (name poker-game)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (^ (poker-nn e0 x) (of-in e1 y x) (game-nn e2 y))))
(B (name uno)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45))
       (uno-nn e0 x)))


;; Game: Components

(B (name chip)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (chip-nn e0 x)))
(B (name pawn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (pawn-nn e0 x)))
(B (name trump-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (trump-nn e0 x)))
(B (name puzzle)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45))
       (^ (puzzle-nn e0 x) (of-in e1 y x) (piece-nn e2 y))))


;; Game: Actions

(B (name play-nn)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS x e0 :0.45))
       (play-nn e0 x)))
(B (name playing)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS x e0 :0.45))
       (playing-nn e0 x)))
(B (name play-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (play-vb e0 x y z)))
(B (name gamble-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (gamble-vb e0 x y z)))
(B (name trump-vb)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45))
       (trump-vb e0 x y z)))

(B (name play-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%ACTIONS e0 e0 :0.30) (R#PLAYER x e0 :0.30))
       (play-vb e0 x y u)))
(B (name assist-vb)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%ACTIONS e0 e0 :0.30) (R#PLAYER x e0 :0.30))
       (assist-vb e0 x y u)))
(B (name tilt-the-field)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%ACTIONS e0 e0 :0.30) (R#PLAYER x e0 :0.30))
       (^ (tilt-vb e0 x y u) (field-nn e1 y))))


;; Game: Outcomes

(B (name win)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (win-vb e0 x y u)))
(B (name lose)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (lose-vb e0 x y u)))
(B (name defeat)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (defeat-vb e0 x y u)))
(B (name triumph)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES e0 e0 :0.30)
          (R#PLAYER x e0 :0.30))
       (triumph-vb e0 x y u)))

(B (name winner)
   (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45))
       (^ (S#GAME a) (SS#GAME%TYPE b a) (winner-nn e0 x))))
(B (name loser)
   (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45))
       (^ (S#GAME a) (SS#GAME%TYPE b a) (loser-nn e0 x))))

(B (name victory)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%OUTCOMES x e0 :0.45))
       (victory-nn e0 x)))
(B (name triumph)
   (=> (^ (S#GAME e0 :0.45) (SS#GAME%OUTCOMES x e0 :0.45))
       (triumph-nn e0 x)))

(B (name defeat-nn)
   (=> (^ (S#GAME e0 :0.30) (SS#GAME%OUTCOMES x e0 :0.30))
       (defeat-nn e0 x)))


;; Game: Mapping

(B (name game-map)
   (=> (I#GAME x :0.9)
       (S#GAME x)))
(B (name game-type-map)
   (=> (I#GAME%TYPE x y :0.9)
       (SS#GAME%TYPE x y)))
(B (name game-components-map)
   (=> (I#GAME%COMPONENTS x y :0.9)
       (SS#GAME%COMPONENTS x y)))
(B (name game-actions-map)
   (=> (I#GAME%ACTIONS x y :0.9)
       (SS#GAME%ACTIONS x y)))
(B (name game-outcomes-map)
   (=> (I#GAME%OUTCOMES x y :0.9)
       (SS#GAME%OUTCOMES x y)))


;; Hazardous Geographic Feature
;;   Potentially dangerous topographical aspects of the Earth. (Including some
;;   of the previous GEOGRAPHIC_FEATURE axioms.)

;; Hazardous Geographic Feature: Type

(B (name mountain)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.30)
          (SS#HAZARDOUS_GEOGRAPHIC_FEATURE%TYPE x e0 :0.30)
          (R#MOUNTAIN x e0 :0.30))
       (mountain-nn e0 x)))
(B (name himalayas)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.30)
          (SS#HAZARDOUS_GEOGRAPHIC_FEATURE%TYPE x e0 :0.30)
          (R#MOUNTAIN x e0 :0.30))
       (himalayas-nn e0 x)))
(B (name alps)
   (=> (^ (S#HAZARDOUS_GEOGRAPHIC_FEATURE e0 :0.30)
          (SS#HAZARDOUS_GEOGRAPHIC_FEATURE%TYPE x e0 :0.30)
          (R#MOUNTAIN x e0 :0.30))
       (alps-nn e0 x)))


;; Hazardous Geographic Feature: Mapping

(B (name geographic-feature-map)
   (=> (I#HAZARDOUS_GEOGRAPHIC_FEATURE x :0.9)
       (S#HAZARDOUS_GEOGRAPHIC_FEATURE x)))
(B (name geographic-feature-type-map)
   (=> (I#HAZARDOUS_GEOGRAPHIC_FEATURE%TYPE x y :0.9)
       (SS#HAZARDOUS_GEOGRAPHIC_FEATURE%TYPE x y)))


;; High Location
;;   Situated or passing above the normal level, surface, base of measurement,
;;   or elevation; located far above the ground or another surface. (Including
;;   previous HIGH_POINT axioms.)

(B (name hover-above)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (^ (hover-vb e0 x y z) (above-in e1 e0 w))))
(B (name high-adj-taxation)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (^ (high-adj e0 x) (TS#TAXATION x))))

(B (name peak)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (peak-nn e0 x)))
(B (name pinnacle)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (pinnacle-nn e0 x)))
(B (name top)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (top-nn e0 x)))
(B (name summit)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (summit-nn e0 x)))
(B (name crest)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (crest-nn e0 x)))
(B (name cap)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (cap-nn e0 x)))
(B (name high-point)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (^ (high-adj e1 x) (point-nn e0 x))))
(B (name crest2)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (crest-vb e0 x y u1)))
(B (name cap2)
   (=> (S#HIGH_LOCATION e0 :0.9)
       (cap-vb e0 x y u1)))


;; High Location: Mapping

(B (name high-location-map)
   (=> (I#HIGH_LOCATION x :0.9)
       (S#HIGH_LOCATION x)))


;; Human Body
;;   The entire physical structure of a human being.

;; Human Body: Component

(B (name backbone)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45))
       (backbone-nn e0 x)))
(B (name face)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45))
       (face-nn e0 x)))
(B (name hand)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45))
       (hand-nn e0 x)))
(B (name skin)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45))
       (skin-nn e0 x)))
(B (name heart)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45))
       (heart-nn e0 x)))
(B (name brain)
   (=> (^ (S#HUMAN_BODY e0 :0.45) (SS#HUMAN_BODY%COMPONENT x e0 :0.45))
       (brain-nn e0 x)))


;; Human Body: Mapping

(B (name human-body-map)
   (=> (I#HUMAN_BODY x :0.9)
       (S#HUMAN_BODY x)))
(B (name human-body-component-map)
   (=> (I#HUMAN_BODY%COMPONENT x y :0.9)
       (SS#HUMAN_BODY%COMPONENT x y)))


;; Journey
;;   An act or instance of traveling from one place to another.

(B (name journey-nn)
   (=> (S#JOURNEY e0 :0.9)
       (journey-nn e0 x)))
(B (name voyage-nn)
   (=> (S#JOURNEY e0 :0.9)
       (voyage-nn e0 x)))
(B (name trip-nn)
   (=> (S#JOURNEY e0 :0.9)
       (trip-nn e0 x)))
(B (name travel-nn)
   (=> (S#JOURNEY e0 :0.9)
       (travel-nn e0 x)))

(B (name travel-vb)
   (=> (S#JOURNEY e0 :0.9)
       (travel-vb e0 x y u)))


;; Journey: Mapping

(B (name journey-map)
   (=> (I#JOURNEY x :0.9)
       (S#JOURNEY x)))


;; Leader
;;   A person who manages or controls other people, esp. because of his or
;;   her ability or position.

(B (name leader-nn)
   (=> (S#LEADER e0 :0.9)
       (leader-nn e0 x)))
(B (name boss-nn)
   (=> (S#LEADER e0 :0.9)
       (boss-nn e0 x)))
(B (name honcho-nn)
   (=> (S#LEADER e0 :0.9)
       (honcho-nn e0 x)))


;; Leader: Mapping

(B (name leader-map)
   (=> (I#LEADER x :0.9)
       (S#LEADER x)))


;; Life Stage
;;   One of the series of stages through which a living thing passes from the
;;   beginning of its life until its death.

(B (name infancy-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (infancy-nn e0 x)))
(B (name childhood-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (childhood-nn e0 x)))
(B (name youth-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (youth-nn e0 x)))
(B (name adolescence-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (adolescence-nn e0 x)))
(B (name puberty-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (puberty-nn e0 x)))

(B (name baby-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (baby-nn e0 x)))
(B (name child-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (child-nn e0 x)))
(B (name teenager-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (teenager-nn e0 x)))
(B (name teen-nn)
   (=> (S#LIFE_STAGE e0 :0.9)
       (teen-nn e0 x)))

(B (name young-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (young-adj e0 x)))
(B (name adolescent-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (adolescent-adj e0 x)))
(B (name prepubescent-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (prepubescent-adj e0 x)))
(B (name pubescent-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (pubescent-adj e0 x)))
(B (name elderly-adj)
   (=> (S#LIFE_STAGE e0 :0.9)
       (elderly-adj e0 x)))


;; Life Stage: Mapping

(B (name life-stage-map)
   (=> (I#LIFE_STAGE x :0.9)
       (S#LIFE_STAGE x)))


;; Light
;;   The natural agent that stimulates sight and makes things visible; source
;;   of illumination.

(B (name light)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (light-nn e0 x)))
(B (name illumination)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (illumination-nn e0 x)))
(B (name sun)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (sun-nn e0 x)))
(B (name brilliance)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (brilliance-nn e0 x)))
(B (name radiance)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (radiance-nn e0 x)))
(B (name gleam)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (gleam-nn e0 x)))
(B (name glare)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (glare-nn e0 x)))
(B (name luster)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (luster-nn e0 x)))
(B (name lustre)
   (=> (^ (S#LIGHT e0 :0.45)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45))
       (lustre-nn e0 x)))

(B (name light-adj)
   (=> (^ (S#LIGHT e0 :0.30)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (light-adj e0 x)))
(B (name sunny)
   (=> (^ (S#LIGHT e0 :0.30)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (sunny-adj e0 x)))
(B (name bright)
   (=> (^ (S#LIGHT e0 :0.30)
          (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (bright-adj e0 x)))

(B (name enlighten)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%MOVEMENT e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (enlighten-vb e0 x y z)))
(B (name lighten)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%MOVEMENT e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (lighten-vb e0 x y z)))
(B (name brighten)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%MOVEMENT e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (brighten-vb e0 x y z)))


;; Light: Illumination

(B (name shine)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (shine-vb e0 x y z)))
(B (name illuminate)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (illuminate-vb e0 x y z)))
(B (name reflect)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (reflect-vb e0 x y z)))
(B (name radiate)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (radiate-vb e0 x y z)))

(B (name shining)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (shining-nn e0 x)))
(B (name illumination)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (illumination-nn e0 x)))
(B (name reflection)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (reflection-nn e0 x)))
(B (name brightness)
   (=> (^ (S#LIGHT e0 :0.30) (SS#LIGHT%ILLUMINATION e0 e0 :0.30)
          (R#LIGHT x e0 :0.30))
       (brightness-nn e0 x)))


;; Light: Mapping

(B (name light-map)
   (=> (I#LIGHT x :0.9)
       (S#LIGHT x)))
(B (name dark-end-of-range-map)
   (=> (I#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x y :0.9)
       (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x y)))
(B (name light-movement-map)
   (=> (I#LIGHT%MOVEMENT x y :0.9)
       (SS#LIGHT%MOVEMENT x y)))


;; Low Location
;;   Situated or passing below the normal level, surface, or base of
;;   measurement; marking a nadir or bottom; not located far above the ground
;;   or another surface. (Including the LOW_POINT axioms and some
;;   VERTICAL_SCALE ones.)

(B (name low-adj-tax)
   (=> (S#LOW_LOCATION e0 :0.45)
       (^ (low-adj e0 x) (TS#TAXATION x))))

(B (name low-point)
   (=> (S#LOW_LOCATION e0 :0.9)
       (^ (low-adj e0 x) (point-nn e1 x))))
(B (name the-pits)
   (=> (S#LOW_LOCATION e0 :0.9)
       (pits-nn e0 x)))
(B (name rock-bottom)
   (=> (S#LOW_LOCATION e2 :0.9)
       (^ (rock-nn e0 x) (of-in e1 y x) (bottom-nn e2 y))))
(B (name bottom-of-the-heap)
   (=> (S#LOW_LOCATION e0 :0.9)
       (^ (bottom-nn e0 x) (of-in e1 x y) (heap-nn e2 y))))
(B (name bottom-of-the-totem-pole)
   (=> (S#LOW_LOCATION e0 :0.9)
       (^ (bottom-nn e0 x) (of-in e1 x z) (totem-nn e2 y) (pole-nn e3 z))))


;; Low Location: Mapping

(B (name low-location-map)
   (=> (I#LOW_LOCATION x :0.9)
       (S#LOW_LOCATION x)))


;; Machine
;;   An apparatus consisting of interrelated parts with separate functions,
;;   used in the performance of some kind of work.

;; Machine: Type

(B (name machine)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (machine-nn e0 x)))
(B (name bulldozer)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (bulldozer-nn e0 x)))
(B (name steamroller)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (steamroller-nn e0 x)))
(B (name car)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (car-nn e0 x)))
(B (name truck)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (truck-nn e0 x)))
(B (name dumptruck)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (dumptruck-nn e0 x)))
(B (name crane)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (crane-nn e0 x)))
(B (name mechanism)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45))
       (mechanism-nn e0 x)))


;; Machine: Parts

(B (name engine)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (engine-nn e0 x)))
(B (name motor-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (motor-nn e0 x)))
(B (name wheel-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (wheel-nn e0 x)))
(B (name brake-nn)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (brake-nn e0 x)))
(B (name lever)
   (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45))
       (lever-nn e0 x)))


;; Machine: Function

(B (name turn)
   (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23)
          (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))
       (^ (engine-nn e1 x) (turn-vb e0 x y u))))
(B (name repair)
   (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23)
          (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))
       (repair-vb e0 x y u)))


;; Machine: Mapping

(B (name machine-map)
   (=> (I#MACHINE x :0.9)
       (S#MACHINE x)))
(B (name machine-type-map)
   (=> (I#MACHINE%TYPE x y :0.9)
       (SS#MACHINE%TYPE x y)))
(B (name machine-parts-map)
   (=> (I#MACHINE%PARTS x y :0.9)
       (SS#MACHINE%PARTS x y)))
(B (name machine-function-map)
   (=> (I#MACHINE%FUNCTION x y :0.9)
       (SS#MACHINE%FUNCTION x y)))


;; Maze
;;   A confusing network of intercommunicating paths or passages; labyrinth;
;;   any complex system or arrangement that causes bewilderment, confusion, or
;;   perplexity.

;; Maze: Confusing Pathways

(B (name web)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (web-nn e0 x)))
(B (name knot)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (knot-nn e0 x)))
;; Katya and Ross decided to change these based on illogical output
(B (name maze)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (maze-nn e0 x)))
(B (name labyrinth)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45))
       (labyrinth-nn e0 x)))

(B (name knot-vb)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS e0 e0 :0.45))
       (knot-vb e0 x y z)))


;; Maze: Navigation

(B (name navigate)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%NAVIGATION e0 z :0.30)
          (R#NAVIGATION-AGENT x e0 :0.30))
       (navigate-vb e0 x y u)))


;; Maze: Obstruction

(B (name tangle)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45))
       (tangle-nn e0 x)))
(B (name snarl)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45))
       (snarl-nn e0 x)))
(B (name catch)
   (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45))
       (catch-nn e0 x)))

(B (name catch-vb)
   (=> (^ (S#MAZE z :0.23) (SS#MAZE%OBSTRUCTION e0 z :0.23)
          (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23))
       (catch-vb e0 x y u)))
(B (name ensnare-vb)
   (=> (^ (S#MAZE z :0.23) (SS#MAZE%OBSTRUCTION e0 z :0.23)
          (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23))
       (ensnare-vb e0 x y u)))
(B (name tangle-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (tangle-vb e0 u y u1)))
(B (name entangle-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (entangle-vb e0 u y u1)))
(B (name snarl-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (snarl-vb e0 u y u1)))
(B (name hinder-vb)
   (=> (^ (S#MAZE z :0.30) (SS#MAZE%OBSTRUCTION e0 z :0.30)
          (R#OBSTRUCTION-PATIENT y e0 :0.30))
       (hinder-vb e0 u y u1)))

(B (name entanglement)
   (=> (^ (S#MAZE e0 :0.30) (SS#MAZE%OBSTRUCTION x e0 :0.30))
       (entanglement-nn e0 x)))


;; Maze: Mapping

(B (name maze-map)
   (=> (I#MAZE x :0.9)
       (S#MAZE x)))
(B (name maze-confusing-pathways-map)
   (=> (I#MAZE%CONFUSING_PATHWAYS x y :0.9)
       (SS#MAZE%CONFUSING_PATHWAYS x y)))
(B (name maze-navigation-map)
   (=> (I#MAZE%NAVIGATION x y :0.9)
       (SS#MAZE%NAVIGATION x y)))
(B (name maze-obstruction-map)
   (=> (I#MAZE%OBSTRUCTION x y :0.9)
       (SS#MAZE%OBSTRUCTION x y)))


;; Medicine
;;   Any substance or substances used in treating disease or illness;
;;   medicament; remedy.

;; Medicine: Administration

(B (name inject)
   (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45)
          (R#ADMINISTRATION-AGENT x e0 :0.33))
       (inject-vb e0 x y z)))
(B (name injection)
   (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45))
       (injection-nn e0 x)))


;; Medicine: Mapping

(B (name medicine-map)
   (=> (I#MEDICINE x :0.9)
       (S#MEDICINE x)))
(B (name medicine-administration-map)
   (=> (I#MEDICINE%ADMINISTRATION x y :0.9)
       (SS#MEDICINE%ADMINISTRATION x y)))


;; Monster
;;   A legendary animal combining features of animal and human form or having
;;   the forms of various animals in combination; any creature so ugly or
;;   monstrous as to frighten people; any animal or human grotesquely
;;   deviating from the normal shape, behavior, or character.

;; Monster: Type

(B (name monster)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (monster-nn e0 x)))
(B (name frankenstein)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (frankenstein-nn e0 x)))
(B (name frankensteins-monster)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (^ (monster-nn e0 x) (of-in e1 x y) (frankenstein-nn e2 y))))
(B (name beast)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (beast-nn e0 x)))
(B (name creature)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (creature-nn e0 x)))
(B (name fiend)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (fiend-nn e0 x)))
(B (name giant)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (giant-nn e0 x)))
(B (name troll)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (troll-nn e0 x)))
(B (name werewolf)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (werewolf-nn e0 x)))
(B (name zombie)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (zombie-nn e0 x)))
(B (name vampire)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (vampire-nn e0 x)))
(B (name dragon)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (dragon-nn e0 x)))
(B (name godzilla)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45))
       (godzilla-nn e0 x)))


;; Monster: Action

(B (name scare)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45))
       (scare-vb e0 x y u)))
(B (name threaten)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45))
       (threaten-vb e0 x y u)))
(B (name terrify)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45))
       (terrify-vb e0 x y u)))
(B (name devour)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45))
       (devour-vb e0 x y u)))
(B (name terrorize)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45))
       (terrorize-vb e0 x y u)))
(B (name terrorise)
   (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45))
       (terrorise-vb e0 x y u)))


;; Monster: Mapping

(B (name monster-map)
   (=> (I#MONSTER x :0.9)
       (S#MONSTER x)))
(B (name monster-type-map)
   (=> (I#MONSTER%TYPE x y :0.9)
       (SS#MONSTER%TYPE x y)))
(B (name monster-action-map)
   (=> (I#MONSTER%ACTION x y :0.9)
       (SS#MONSTER%ACTION x y)))


;; Moral Duty
;;   Something that you must do because it is morally right.

;; Moral Duty: Remuneration

(B (name duty)
   (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45))
       (duty-nn e0 x)))
(B (name due)
   (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45))
       (due-nn e0 x)))
(B (name obligation)
   (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45))
       (obligation-nn e0 x)))


;; Moral Duty: Mapping

(B (name moral-duty-map)
   (=> (I#MORAL_DUTY e0 :0.9)
       (S#MORAL_DUTY x)))
(B (name remuneration-map)
   (=> (I#MORAL_DUTY%REMUNERATION x y :0.9)
       (SS#MORAL_DUTY%REMUNERATION x y)))


;; Movement
;;   To pass from one place or position to another.
;; NB: Don't include things that should be under DOWNWARD_MOVEMENT or
;;   UPWARD_MOVEMENT.

;; Movement: Movement

(B (name movement-nn)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45))
       (movement-nn e0 x)))
(B (name move-nn)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45))
       (move-nn e0 x)))
(B (name mobility-nn)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45))
       (mobility-nn e0 x)))

(B (name move-vb)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45))
       (move-vb e0 x y z)))
(B (name circle-vb)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45))
       (circle-vb e0 x y z)))
(B (name cycle-vb)
   (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45))
       (cycle-vb e0 x y z)))


;; Movement: Mapping

(B (name movement-map)
   (=> (I#MOVEMENT x :0.9)
       (S#MOVEMENT x)))
(B (name movement-movement-map)
   (=> (I#MOVEMENT%MOVEMENT x y :0.9)
       (SS#MOVEMENT%MOVEMENT x y)))


;; Natural Physical Force
;;   Uncontrollable force of nature that poses potential harm; [nature: all
;;   the animals and plants in the world and all the features, forces, and
;;   processes that exist or happen independently of people, such as the
;;   weather, the sea, mountains, reproduction, and growth]; circumstances
;;   beyond one's control; a any event or force of nature that has
;;   catastrophic consequences, such as avalanche, earthquake, flood, forest
;;   fire, hurricane, lightning, tornado, tsunami, and volcanic eruption.

;; Natural Physical Force: Type

(B (name avalanche)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (avalanche-nn e0 x)))
(B (name tsunami)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (tsunami-nn e0 x)))
(B (name deluge)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (deluge-nn e0 x)))
(B (name flood)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (flood-nn e0 x)))
(B (name tornado)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (tornado-nn e0 x)))
(B (name hurricane)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (hurricane-nn e0 x)))
(B (name cyclone)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (cyclone-nn e0 x)))
(B (name natural-disaster)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (^ (natural-adj e0 x) (disaster-nn e1 x))))
(B (name twister)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (twister-nn e0 x)))
(B (name typhoon)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (typhoon-nn e0 x)))
(B (name earthquake)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (earthquake-nn e0 x)))
(B (name eruption)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (eruption-nn e0 x)))
(B (name hailstorm)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (hailstorm-nn e0 x)))
(B (name storm)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (storm-nn e0 x)))
(B (name drought)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (drought-nn e0 x)))
(B (name chaos)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (chaos-nn e0 x)))
(B (name chaotic)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45))
       (chaotic-adj e0 x)))
(B (name heat-wave)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (^ (heat-adj e0 x) (wave-nn e1 x))))
(B (name rock-slide)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (^ (rock-adj e0 y) (slide-nn e1 x))))
(B (name mud-slide)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (^ (mud-adj e0 y) (slide-nn e1 x))))
(B (name mudslide)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45))
       (mudslide-nn e0 x)))

(B (name disastrous)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45))
       (disastrous-adj e0 x)))
(B (name seismic)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45))
       (seismic-adj e0 x)))

(B (name flood-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45))
       (flood-vb e0 x y z)))
(B (name erupt-vb)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45)
          (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45))
       (erupt-vb e0 x y z)))


;; Natural Physical Force: Result

(B (name destroy)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.23)
          (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.23)
          (R#DESTROY-AGENT x e0 :0.23) (R#DESTROY-PATIENT y e0 :0.23))
       (destroy-vb e0 x y u)))
(B (name devastate)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.23)
          (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.23)
          (R#DESTROY-AGENT x e0 :0.23) (R#DESTROY-PATIENT y e0 :0.23))
       (devastate-vb e0 x y u)))

(B (name disappearing)
   (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.30)
          (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.30)
          (R#DESTROY-PATIENT x e0 :0.30))
       (disappearing-adj e0 x)))


;; Natural Physical Force: Mapping

(B (name natural-physical-force-map)
   (=> (I#NATURAL_PHYSICAL_FORCE x :0.9)
       (S#NATURAL_PHYSICAL_FORCE x)))
(B (name natural-physical-force-type-map)
   (=> (I#NATURAL_PHYSICAL_FORCE%TYPE x y :0.9)
       (SS#NATURAL_PHYSICAL_FORCE%TYPE x y)))
(B (name natural-physical-force-result-map)
   (=> (I#NATURAL_PHYSICAL_FORCE%RESULT x y :0.9)
       (SS#NATURAL_PHYSICAL_FORCE%RESULT x y)))


;; Obesity
;;   A condition characterized by the excessive accumulation and storage of
;;   fat in the body; Excessive body fat. It is usually caused by sedentary
;;   habits and a diet high in fat, alcohol, or total calories.

;; Obesity: Excess Body Weight

(B (name bloated)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (bloated-adj e0 x)))
(B (name engorged)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (engorged-adj e0 x)))
(B (name fatter)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (fatter-adj e0 x)))

(B (name obesity)
   (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.45))
       (obesity-nn e0 x)))

(B (name girth)
   (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.45))
       (girth-nn e0 x)))
(B (name fat-cat)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (^ (fat-adj e0 x) (cat-nn e1 x))))


;; Obesity: Excess Consumption

(B (name gluttony)
   (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.45))
       (gluttony-nn e0 x)))
(B (name hogs-at-trough)
   (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.45))
       (^ (hogs-nn e0 x) (at-in e1 x y) (trough-nn e2 y))))

(B (name gobble)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (^ (gobble-vb e0 x y u) (up-in e1 e0 z))))
(B (name eat)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (^ (eat-vb e0 x y u) (up-in e1 e0 z))))
(B (name feast)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (feast-vb e0 x y u)))
(B (name overeat)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (overeat-vb e0 x y u)))
(B (name ravenous)
   (=> (^ (S#OBESITY e0 :0.30) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.30)
          (R#OVERWEIGHT x e0 :0.30))
       (ravenous-adj e0 x)))


;; Obesity

(B (name obesity-map)
   (=> (I#OBESITY x :0.9)
       (S#OBESITY x)))
(B (name excess-body-weight-map)
   (=> (I#OBESITY%BODY-WEIGHT x y :0.9)
       (SS#OBESITY%EXCESS_BODY_WEIGHT x y)))
(B (name excess-consumption-map)
   (=> (I#OBESITY%CONSUMPTION x y :0.9)
       (SS#OBESITY%EXCESS_CONSUMPTION x y)))


;; Parasite
;;   An animal or plant that lives in or on another animal or plant and gets
;;   food or protection from it;  person or thing that takes something from
;;   someone or something else and does not do anything to earn it or deserve
;;   it.

;; Parasite: Destructive Being

(B (name parasite)
   (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45))
       (parasite-nn e0 x)))
(B (name leech)
   (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45))
       (leech-nn e0 x)))
(B (name louse)
   (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45))
       (louse-nn e0 x)))
(B (name mosquito)
   (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45))
       (mosquito-nn e0 x)))
(B (name bloodsucker)
   (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45))
       (bloodsucker-nn e0 x)))


;; Parasite: Action

(B (name drain-the-lifeblood)
   (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33)
          (R#PARASITE-AGENT x e0 :0.33))
       (^ (drain-vb e0 x y u) (lifeblood-nn e1 y))))
(B (name suck-the-lifeblood)
   (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33)
          (R#PARASITE-AGENT x e0 :0.33))
       (^ (suck-vb e0 x y u) (lifeblood-nn e1 y))))
(B (name drain-the-blood)
   (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33)
          (R#PARASITE-AGENT x e0 :0.33))
       (^ (drain-vb e0 x y u) (blood-nn e1 y))))
(B (name suck-the-blood)
   (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%ACTION e0 e0 :0.33)
          (R#PARASITE-AGENT x e0 :0.33))
       (^ (suck-vb e0 x y u) (blood-nn e1 y))))
(B (name leech)
   (=> (^ (S#PARASITE e0 :0.30) (SS#PARASITE%ACTION e0 e0 :0.30)
          (R#PARASITE-AGENT x e0 :0.30))
       (leech-vb e0 x y u)))

(B (name infestation)
   (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%ACTION x e0 :0.45))
       (infestation-nn e0 x)))


;; Parasite: Mapping

(B (name parasite-map)
   (=> (I#PARASITE x :0.9)
       (S#PARASITE x)))
(B (name parasite-destructive-being-map)
   (=> (I#PARASITE%DESTRUCTIVE_BEING x y :0.9)
       (SS#PARASITE%DESTRUCTIVE_BEING x y)))
(B (name parasite-action-map)
   (=> (I#PARASITE%ACTION x y :0.9)
       (SS#PARASITE%ACTION x y)))


;; Pathway
;;   A path, course, route, or way; a route to or way of access to; way of
;;   reaching or achieving something.

;; Pathway: Type

(B (name pathway)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (pathway-nn e0 x)))
(B (name road-to)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (^ (road-nn e0 x) (to-in e1 x z))))
(B (name road)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (road-nn e0 x)))
(B (name path)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (path-nn e0 x)))
(B (name bridge)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (bridge-nn e0 x)))
(B (name passage)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (passage-nn e0 x)))
(B (name route)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (route-nn e0 x)))
(B (name street)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (street-nn e0 x)))
(B (name avenue)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (avenue-nn e0 x)))
(B (name trail)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (trail-nn e0 x)))
(B (name corridor)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (corridor-nn e0 x)))
(B (name walkway)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (walkway-nn e0 x)))
(B (name trajectory)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (trajectory-nn e0 x)))
(B (name highway)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (highway-nn e0 x)))
(B (name avenue)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45))
       (avenue-nn e0 x)))


;; Pathway: Open Path

(B (name clear-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (clear-adj e0 x))))
(B (name open-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (open-adj e0 x))))

(B (name clear-vb-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (clear-vb e0 x y z))))
(B (name open-vb-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (open-vb e0 x y z))))
(B (name build-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (build-vb e0 x y z))))
(B (name forge-path)
   (=> (SS#PATHWAY%OPEN_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (forge-vb e0 x y z))))


;; Pathway: Obstructed Path

(B (name obstructed-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (obstructed-adj e0 x))))
(B (name blocked-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (blocked-adj e0 x))))
(B (name closed-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (closed-adj e0 x))))
(B (name clogged-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (clogged-adj e0 x))))
(B (name jammed-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE x e1) (jammed-adj e0 x))))

(B (name close-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (close-vb e0 x y z))))
(B (name block-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (block-vb e0 x y z))))
(B (name obstruct-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (obstruct-vb e0 x y z))))
(B (name clog-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (clog-vb e0 x y z))))
(B (name jam-path)
   (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e1 :0.9)
       (^ (S#PATHWAY e1) (SS#PATHWAY%TYPE y e1) (jam-vb e0 x y z))))

(B (name barricade)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.45))
       (barricade-vb e0 x y z)))
(B (name bar)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.45))
       (bar-vb e0 x y z)))
(B (name hinder)
   (=> (^ (S#PATHWAY e0 :0.4) (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.4))
       (hinder-vb e0 x y z)))

(B (name barricade-nn)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45))
       (barricade-nn e0 x )))
(B (name roadblock)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45))
       (roadblock-nn e0 x)))
(B (name impedement)
   (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45))
       (impedement-nn e0 x)))


;; Pathway: Mapping

(B (name pathway-map)
   (=> (I#PATHWAY x :0.9)
       (S#PATHWAY x)))
(B (name pathway-type-map)
   (=> (I#PATHWAY%TYPE x y :0.9)
       (SS#PATHWAY%TYPE x y)))
(B (name open-path-map)
   (=> (I#PATHWAY%OPEN_PATH x y :0.9)
       (SS#PATHWAY%OPEN_PATH x y)))
(B (name obstructed-path-map)
   (=> (I#PATHWAY%OBSTRUCTED_PATH x y :0.9)
       (SS#PATHWAY%OBSTRUCTED_PATH x y)))


;; Physical Burden
;;   That which is borne with difficulty.

;; Physical Burden: Weight

(B (name burden)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (burden-nn e0 x)))
(B (name weight)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (weight-nn e0 x)))
(B (name load)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (load-nn e0 x)))
(B (name loading)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (loading-nn e0 x)))
(B (name millstone)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (millstone-nn e0 x)))
(B (name encumbrance)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (encumbrance-nn e0 x)))
(B (name pressure)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (pressure-nn e0 x)))
(B (name anchor)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45))
       (anchor-nn e0 x)))

(B (name heavy)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45))
       (heavy-adj e0 x)))
(B (name weighty)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45))
       (weighty-adj e0 x)))
(B (name heavy-weight)
   (=> (^ (S#PHYSICAL_BURDEN y :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y y :0.45))
       (^ (heavy-adj e0 x) (weight-nn e1 y))))
(B (name heavy-load)
   (=> (^ (S#PHYSICAL_BURDEN y :0.45) (SS#PHYSICAL_BURDEN%WEIGHT y y :0.45))
       (^ (heavy-adj e0 x) (load-nn e1 y))))

(B (name load-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2)
          (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (load-vb e0 x y u)))
(B (name burthen)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2)
          (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (burthen-vb e0 x y u)))
(B (name burden-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.2)
          (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (burden-vb e0 x y u)))

(B (name weight-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45))
       (weight-vb e0 x y u)))


;; Physical Burden: Relief

(B (name relief)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (relief-nn e0 x)))
(B (name ease)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (ease-nn e0 x)))
(B (name easing)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (easing-nn e0 x)))
(B (name tax-shift)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (^ (TS#TAXATION x) (shift-nn e1 y) (of-in e2 y x))))

(B (name lighten)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (lighten-vb e0 x y u)))
(B (name ease-vb)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (ease-vb e0 x y u)))
(B (name relieve)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (relieve-vb e0 x y u)))
(B (name shift)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF e0 e0 :0.2)
          (R#RELIEF-CAUSE x e0 :0.2) (R#PHYSICAL_BURDEN-VICTIM y e0 :0.2))
       (^ (TS#TAXATION y) (shift-vb e0 x y u))))

(B (name evasion)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (evasion-nn e0 x)))
(B (name tax-evasion)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45))
       (^ (TS#TAXATION x) (of-in e1 y x) (evasion-nn e2 y))))

(B (name evade)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.30) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.30)
          (R#EVADE-AGENT x e0 :0.30))
       (evade-vb e0 x y u)))


;; Physical Burden: Physical Distress

(B (name unsustainable)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45))
       (unsustainable-adj e0 y)))
(B (name cumbersome)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.45)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45))
       (cumbersome-adj e0 y)))

(B (name overwhelm)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.30)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.30)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.30))
       (overwhelm-vb e0 x y u)))
(B (name crush)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.30)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.30)
          (R#PHYSICAL_BURDEN-CAUSE x e0 :0.30))
       (crush-vb e0 x y u)))
(B (name suffer)
   (=> (^ (S#PHYSICAL_BURDEN e0 :0.30)
          (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.30)
          (R#PHYSICAL_BURDEN-PATIENT x e0 :0.30))
       (suffer-vb e0 x y u)))


;; Physical Burden: Mapping

(B (name physical-burden-map)
   (=> (I#PHYSICAL_BURDEN  e0 :0.9)
       (S#PHYSICAL_BURDEN x)))
(B (name weight-map)
   (=> (I#PHYSICAL_BURDEN%WEIGHT  x y :0.9)
       (SS#PHYSICAL_BURDEN%WEIGHT x y)))
(B (name relief-map)
   (=> (I#PHYSICAL_BURDEN%RELIEF  x y :0.9)
       (SS#PHYSICAL_BURDEN%RELIEF x y)))
(B (name physical-distress-map)
   (=> (I#PHYSICAL_BURDEN%PHYSICAL_DISTRESS  x y :0.9)
       (SS#PHYSICAL_BURDEN%xPHYSICAL_DISTRESS x y)))


;; Physical Harm
;;   Physical injury or damage.

;; Physical Harm: Type

(B (name hurt)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (hurt-vb e0 x y u2)))
(B (name beat)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (beat-vb e0 x y u2)))
(B (name bite)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (bite-vb e0 x y u2)))
(B (name harm)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (harm-vb e0 x y u2)))
(B (name screw)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (screw-vb e0 x y u2)))
(B (name torture)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (torture-vb e0 x y u2)))
(B (name maim)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (maim-vb e0 x y u2)))
(B (name traumatize)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (traumatize-vb e0 x y u2)))
(B (name traumatise)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (traumatise-vb e0 x y u2)))
(B (name injure)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (injure-vb e0 x y u2)))
(B (name poison)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (poison-vb e0 x y u2)))
(B (name sting)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (sting-vb e0 x y u2)))
(B (name strangle)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (strangle-vb e0 x y u2)))
(B (name slash)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (slash-vb e0 x y u2)))
(B (name cut)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (cut-vb e0 x y u2)))
(B (name erode)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (erode-vb e0 x y u2)))
(B (name hobble)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (hobble-vb e0 x y u2)))
(B (name target)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (target-vb e0 x y u2)))
(B (name grind)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (grind-vb e0 x y u2)))
(B (name break)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (break-vb e0 x y u2)))

(B (name damage)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (damage-vb e0 x y u2)))
(B (name hit)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (hit-vb e0 x y u2)))
(B (name impact)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2)
          (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2))
       (impact-vb e0 x y u2)))

(B (name hurt-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (hurt-nn e0 x)))
(B (name cut-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (cut-nn e0 x)))
(B (name impact-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (impact-nn e0 x)))
(B (name slash-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (slash-nn e0 x)))
(B (name bite-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (bite-nn e0 x)))
(B (name harm-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (harm-nn e0 x)))
(B (name torture-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (torture-nn e0 x)))
(B (name maim-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (maim-nn e0 x)))
(B (name trauma-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (trauma-nn e0 x)))
(B (name injury-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE x e0 :0.2))
       (injury-nn e0 x)))
(B (name poison-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (poison-nn e0 x)))
(B (name venom)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (venom-nn e0 x)))
(B (name sting-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (sting-nn e0 x)))

(B (name hit-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (hit-nn e0 x)))
(B (name damage-nn)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (damage-nn e0 x)))

(B (name crippling)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.45))
       (crippling-adj e0 x)))
(B (name soul-crushing)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.45))
       (soul-crushing-adj e0 x)))
(B (name toxic)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (toxic-adj e0 x)))
(B (name targeted)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (targeted-adj e0 x)))
(B (name poisonous)
   (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45))
       (poisonous-adj e0 x)))


;; Physical Harm: Restraint

(B (name hobble)
   (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (hobble-vb e0 x y u)))
(B (name overwhelm)
   (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (overwhelm-vb e0 x y u)))
(B (name hamstring)
   (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (hamstring-vb e0 x y u)))
(B (name held-back)
   (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (^ (hold-vb e0 x y u) (back-rb e1 e0))))
(B (name bring-to-knees)
   (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 e0 :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (^ (bring-vb e0 x y u) (to-in e1 e0 z) (knees-nn e2 z))))
(B (name bury)
   (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (bury-vb e0 x y u)))
(B (name curb)
   (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (curb-vb e0 x y u)))
(B (name impair)
   (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (impair-vb e0 x y u)))
(B (name impede)
   (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (impede-vb e0 x y u)))
(B (name constrict)
   (=> (^ (S#PHYSICAL_HARM z :0.23) (SS#PHYSICAL_HARM%RESTRAINT e0 z :0.23)
          (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23))
       (constrict-vb e0 x y u)))


;; Physical Harm: Mapping

(B (name physical-harm-map)
   (=> (I#PHYSICAL_HARM  x :0.9)
       (S#PHYSICAL_HARM x)))
(B (name physical-harm-type-map)
   (=> (I#PHYSICAL_HARM%TYPE x y :0.9)
       (SS#PHYSICAL_HARM%TYPE x y)))
(B (name physical-harm-restraint-map)
   (=> (I#PHYSICAL_HARM%RESTRAINT x y :0.9)
       (SS#PHYSICAL_HARM%RESTRAINT x y)))


;; Physical Location
;;   A place of settlement, activity, or residence; a place or situation
;;   occupied.

;; Physical Location: Defined Region

(B (name boundary)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (boundary-nn e0 x)))
(B (name destination)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (destination-nn e0 x)))
(B (name edge)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (edge-nn e0 x)))
(B (name margin)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (margin-nn e0 x)))
(B (name fringe)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (fringe-nn e0 x)))
(B (name borderline)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (borderline-nn e0 x)))

(B (name region)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45))
       (region-nn e0 x)))

(B (name live-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (TS#POVERTY w) (live-vb e0 x y z) (in-in e1 e0 w))))
(B (name grow-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (TS#POVERTY w) (grow-vb e0 x y z) (in-in e1 e0 w))))
(B (name reside-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (TS#POVERTY w) (reside-vb e0 x y z) (in-in e1 e0 w))))
(B (name stay-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (TS#POVERTY w) (stay-vb e0 x y z) (in-in e1 e0 w))))
(B (name born-into)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%DEFINED_REGION w e0 :0.45))
       (^ (TS#POVERTY w) (bear-vb e0 x y z) (into-in e1 e0 w))))


;; Physical Location: Movement Into

(B (name push-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.45))
       (push-nn e0 x)))

;; (B (name push-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (push-vb e0 x y z) (into-in e1 e0 w))))
(B (name push-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (push-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name drive-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (drive-vb e0 x y z) (into-in e1 e0 w))))
(B (name drive-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (drive-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name draw-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (draw-vb e0 x y z) (into-in e1 e0 w))))
(B (name draw-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (draw-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name drag-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (drag-vb e0 x y z) (into-in e1 e0 w))))
(B (name drag-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (drag-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name force-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (force-vb e0 x y z) (into-in e1 e0 w))))
(B (name force-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (force-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name move-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (move-vb e0 x y z) (into-in e1 e0 w))))
(B (name move-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (move-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name nudge-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (nudge-vb e0 x y z) (into-in e1 e0 w))))
(B (name nudge-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (nudge-vb e0 x y u2) (into-in e1 e0 z))))

(B (name rush-into)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
          (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
       (^ (rush-vb e0 x y z) (into-in e1 e0 w))))
;; (B (name pull-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (pull-vb e0 x y z) (into-in e1 e0 w))))

(B (name shove-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (shove-vb e0 x y u2) (into-in e1 e0 z))))

;; (B (name throw-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (throw-vb e0 x y z) (into-in e1 e0 w))))
(B (name throw-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (throw-vb e0 x y u2) (into-in e1 e0 z))))
;; (B (name tug-into)
;;    (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
;;           (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
;;           (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
;;        (^ (tug-vb e0 x y z) (into-in e1 e0 w))))
(B (name tug-into-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.23))
       (^ (TS#POVERTY z) (tug-vb e0 x y u2) (into-in e1 e0 z))))

(B (name enter)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.4))
       (enter-vb e0 x y u2)))
(B (name entrance)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.4))
       (entrance-nn e0 x)))

(B (name cycle-in)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.23)
          (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23))
       (^ (cycle-vb e0 x y z) (in-in e1 e0 w))))
(B (name cycle-in-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.2)
          (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.2)
          (R#PROPEL-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.2))
       (^ (TS#POVERTY z) (cycle-vb e0 x y u2) (in-in e2 e0 w) (of-in e1 e0 z))))


;; Physical Location: Exit

(B (name emerge)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.23)
          (R#EXIT-AGENT x e0 :0.23))
       (emerge-vb e0 x y u)))
(B (name exit)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.23) (R#EXIT-AGENT x e0 :0.23))
       (exit-vb e0 x y u)))

(B (name cycle-out)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.23)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.23) (R#EXIT-AGENT x e0 :0.23)
          (R#PROPEL-PATIENT y e0 :0.23))
       (^ (cycle-vb e0 x y z) (out-in e1 e0))))
(B (name cycle-out-pov)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.2) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.2)
          (R#EXIT-PATIENT y e0 :0.23) (R#PROPEL-AGENT x e0 :0.2))
       (^ (TS#POVERTY z) (cycle-vb e0 x y u2) (out-in e2 e0) (of-in e1 e0 z))))

(B (name passport)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (passport-nn e0 x)))
(B (name ticket)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (ticket-nn e0 x)))
(B (name free-pass)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (free-adj e0 x) (pass-nn e1 x))))
(B (name pathway-out-of)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (pathway-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))
(B (name way-out-of)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (way-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))
(B (name road-out-of)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.45)
          (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45))
       (^ (road-nn e0 x) (out-in e1 e0) (of-in e2 e0 y))))

(B (name exit-vb)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4)
          (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.4))
       (exit-vb e0 x y u2)))
(B (name exit-nn)
   (=> (^ (S#PHYSICAL_LOCATION e0 :0.4) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.4))
       (exit-nn e0 x)))


;; Physical Location: Mapping

(B (name physical-location-map)
   (=> (I#PHYSICAL_LOCATION x :0.9)
       (S#PHYSICAL_LOCATION x)))
(B (name defined-region-map)
   (=> (I#PHYSICAL_LOCATION%DEFINED_REGION x y :0.9)
       (SS#PHYSICAL_LOCATION%DEFINED_REGION x y)))
(B (name movement-into-map)
   (=> (I#PHYSICAL_LOCATION%MOVEMENT_INTO x y :0.9)
       (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x y)))
(B (name physical-location-exit-map)
   (=> (I#PHYSICAL_LOCATION%EXIT x y :0.9)
       (SS#PHYSICAL_LOCATION%EXIT x y)))


;; Plant
;;   A living thing that usually produces seeds and typically has a stem,
;;   leaves, branches, roots, and sometimes flowers.

;; Plant: Type

(B (name plant)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (plant-nn e0 x)))
(B (name tree)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (tree-nn e0 x)))
(B (name weed)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%TYPE x e0 :0.30) (R#UNWANTED x e0 :0.30))
       (weed-nn e0 x)))
(B (name flower)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (flower-nn e0 x)))
(B (name grass)
   (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45))
       (grass-nn e0 x)))


;; Plant: Parts

(B (name root)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-ROOT x e0 :0.30))
       (root-nn e0 x)))
(B (name fruit)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (fruit-nn e0 x)))
(B (name seed)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-GENESIS x e0 :0.30))
       (seed-nn e0 x)))
(B (name leaf)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (leaf-nn e0 x)))
(B (name branch)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (branch-nn e0 x)))
(B (name trunk)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%PARTS x e0 :0.30)
          (R#PLANT-EXTERNAL x e0 :0.30))
       (trunk-nn e0 x)))


;; Plant: Change of State

(B (name grow-pov)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TS#POVERTY x) (grow-vb e0 x y u))))
(B (name grow-wealth)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TS#WEALTH x) (grow-vb e0 x y u))))
(B (name blossom)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TS#WEALTH x) (blossom-vb e0 x y u))))
(B (name shrivel)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (TS#WEALTH x) (shrivel-vb e0 x y u))))

(B (name dry-up)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.30)
          (R#CHANGING-THING x e0 :0.30))
       (^ (dry-vb e0 x y u) (up-in e1 e0 y))))

(B (name growth)
   (=> (^ (S#PLANT e0 :0.30) (SS#PLANT%CHANGE_OF_STATE x e0 :0.30))
       (growth-nn e0 x)))


;; Plant: Mapping

(B (name plant-map)
   (=> (I#PLANT x :0.9)
       (S#PLANT x)))
(B (name plant-type-map)
   (=> (I#PLANT%TYPE x y :0.9)
       (SS#PLANT%TYPE x y)))
(B (name plant-parts-map)
   (=> (I#PLANT%PARTS x y :0.9)
       (SS#PLANT%PARTS x y)))
(B (name plant-change-of-state-map)
   (=> (I#PLANT%CHANGE_OF_STATE x y :0.9)
       (SS#PLANT%CHANGE_OF_STATE x y)))


;; Portal
;;   A door, gate, or entrance, especially one of imposing appearance.

;; Portal: Means of Entry

(B (name gateway)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (gateway-nn e0 x)))
(B (name door)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (door-nn e0 x)))
(B (name threshold)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (threshold-nn e0 x)))
(B (name doorway)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (doorway-nn e0 x)))
(B (name entrance)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (entrance-nn e0 x)))
(B (name entry)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (entry-nn e0 x)))
(B (name entryway)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (entryway-nn e0 x)))
(B (name gate)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (gate-nn e0 x)))
(B (name portal)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (portal-nn e0 x)))
(B (name turnstile)
   (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45))
       (turnstile-nn e0 x)))


;; Portal: Obstacles

(B (name narrow)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.90)
       (^ (S#PORTAL e1) (SS#PORTAL%MEANS_OF_ENTRY x e1) (narrow-adj e0 x))))

(B (name obstructed-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (obstructed-adj e0 x))))
(B (name blocked-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (blocked-adj e0 x))))
(B (name closed-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (closed-adj e0 x))))
(B (name clogged-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (clogged-adj e0 x))))
(B (name jammed-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE x e1) (jammed-adj e0 x))))

(B (name close-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (close-vb e0 x y z))))
(B (name block-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (block-vb e0 x y z))))
(B (name obstruct-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (obstruct-vb e0 x y z))))
(B (name clog-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (clog-vb e0 x y z))))
(B (name jam-portal)
   (=> (SS#PORTAL%OBSTACLES e0 e1 :0.9)
       (^ (S#PORTAL e1) (SS#PORTAL%TYPE y e1) (jam-vb e0 x y z))))


;; Portal: Mapping

(B (name portal-map)
   (=> (I#PORTAL e0 :0.9)
       (S#PORTAL x)))
(B (name means-of-entry-map)
   (=> (I#PORTAL%MEANS_OF_ENTRY x y :0.9)
       (SS#PORTAL%MEANS_OF_ENTRY x y)))
(B (name obstacles-map)
   (=> (I#PORTAL%OBSTACLES x y :0.9)
       (SS#PORTAL%OBSTACLES x y)))


;; Protection
;;   Something that prevents somebody or something from being harmed or
;;   damaged; the act of preventing somebody or something from being harmed
;;   or damaged, or the state of being kept safe.

(B (name shield-nn)
   (=> (S#PROTECTION e0 :0.9)
       (shield-nn e0 x)))
(B (name shelter)
   (=> (S#PROTECTION e0 :0.9)
       (shelter-nn e0 x)))
(B (name protection)
   (=> (S#PROTECTION e0 :0.9)
       (protection-nn e0 x)))
(B (name cushion-nn)
   (=> (S#PROTECTION e0 :0.9)
       (cushion-nn e0 x)))
(B (name buffer)
   (=> (S#PROTECTION e0 :0.9)
       (buffer-nn e0 x)))
(B (name dodge)
   (=> (S#PROTECTION e0 :0.9)
       (dodge-nn e0 x)))
(B (name dodging)
   (=> (S#PROTECTION e0 :0.9)
       (dodging-nn e0 x)))
(B (name evasion)
   (=> (S#PROTECTION e0 :0.9)
       (evasion-nn e0 x)))
(B (name security)
   (=> (S#PROTECTION e0 :0.9)
       (security-nn e0 x)))

(B (name protect-vb)
   (=> (S#PROTECTION e0 :0.9)
       (protect-vb e0 x y u)))
(B (name shield-vb)
   (=> (^ (S#PROTECTION e0 :0.30)
          (R#PROTECT-PATIENT y e0 :0.30) (R#PROTECT-AGENT x e0 :0.30))
       (shield-vb e0 x y u2)))
(B (name cushion-vb)
   (=> (^ (S#PROTECTION e0 :0.30)
          (R#PROTECT-PATIENT y e0 :0.30) (R#PROTECT-AGENT x e0 :0.30))
       (cushion-vb e0 x y u2)))
(B (name buffer-vb)
   (=> (^ (S#PROTECTION e0 :0.30)
          (R#PROTECT-PATIENT y e0 :0.30) (R#PROTECT-AGENT x e0 :0.30))
       (buffer-vb e0 x y u2)))
(B (name dodge-vb)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECT-AGENT x e0 :0.45))
       (dodge-vb e0 x y u2)))
(B (name evade-vb)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECT-AGENT x e0 :0.45))
       (evade-vb e0 x y u2)))
(B (name secure-vb)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECT-AGENT x e0 :0.45))
       (secure-vb e0 x y u2)))
(B (name ward-off)
   (=> (^ (S#PROTECTION e0 :0.45) (R#PROTECT-AGENT x e0 :0.45))
       (^ (ward-vb e0 x y u2) (off-in e1 e0))))

(B (name protection-from)
   (=> (R#HARM-VICTIM y e0 :0.9)
       (^ (S#PROTECTION e0) (from-in e1 e0 y))))


;; Protection: Mapping

(B (name protection-map)
   (=> (I#PROTECTION x :0.9)
       (S#PROTECTION x)))


;; Resource
;;   A place or thing that provides something useful.

;; Resource: Substance

(B (name mass)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (mass-nn e0 x)))
(B (name material)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (material-nn e0 x)))
(B (name concentration)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (concentration-nn e0 x)))
(B (name concentrate)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE x e0 :0.45))
       (concentrate-nn e0 x)))

(B (name dilute)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%SUBSTANCE e0 e0 :0.45))
       (dilute-vb e0 x y z)))


;; Resource: Quantity/Size

(B (name sliver)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.30)
          (R#SMALL-AMOUNT x e0 :0.30))
       (sliver-nn e0 x)))

(B (name sparse)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%QUANTITY_SIZE e0 e0 :0.30)
          (R#SMALL-AMOUNT x e0 :0.30))
       (sparse-adj e0 x)))

(B (name deplete)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (disperse-vb e0 x y u)))
(B (name deplete)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (deplete-vb e0 x y u)))
(B (name cut)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (cut-vb e0 x y u) (TS#TAXATION y))))
(B (name increase)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (increase-vb e0 x y u) (TS#TAXATION y))))
(B (name reduce)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45))
       (^ (reduce-vb e0 x y u) (TS#TAXATION y))))


;; Resource: Develop Resources

(B (name invest)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (invest-vb e0 x y u)))
(B (name deposit)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (deposit-vb e0 x y u)))
(B (name accumulate)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (accumulate-vb e0 x y u)))
(B (name bank-vb)
   (=> (^ (S#RESOURCE e0 :0.30) (SS#RESOURCE%DEVELOP_RESOURCES e0 e0 :0.30)
          (R#DEVELOPER x e0 :0.30))
       (bank-vb e0 x y u)))

(B (name bank)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (bank-nn e0 x)))
(B (name investment)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (investment-nn e0 x)))
(B (name accumulation)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (accumulation-nn e0 x)))
(B (name growth)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (growth-nn e0 x)))
(B (name growth)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45))
       (mine-nn e0 x)))


;; Resource: Distribution

(B (name transfer)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (transfer-vb e0 x y u)))
(B (name distribute)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (distribute-vb e0 x y u)))
(B (name spread)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (^ (TS#WEALTH y) (spread-vb e0 x y u))))
(B (name spread)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (spread-vb e0 x y u)))
(B (name underwrite)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#SUPPORTER x e0 :0.33))
       (underwrite-vb e0 x y u)))
(B (name sort)
   (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION e0 e0 :0.33)
          (R#DISTRIBUTOR x e0 :0.33))
       (sort-vb e0 x y u)))

(B (name distribution)
   (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DISTRIBUTION x e0 :0.45))
       (distribution-nn e0 x)))


;; Resource: Mapping

(B (name resource-map)
   (=> (I#RESOURCE x :0.9)
       (S#RESOURCE x)))
(B (name substance-map)
   (=> (I#RESOURCE%SUBSTANCE x y :0.9)
       (SS#RESOURCE%SUBSTANCE x y)))
(B (name quantity-map)
   (=> (I#RESOURCE%QUANTITY_SIZE x y :0.9)
       (SS#RESOURCE%QUANTITY_SIZE x y)))
(B (name distribution-map)
   (=> (I#RESOURCE%DISTRIBUTION x y :0.9)
       (SS#RESOURCE%DISTRIBUTION x y)))
(B (name develop-resources-map)
   (=> (I#RESOURCE%DEVELOP_RESOURCES x y :0.9)
       (SS#RESOURCE%DEVELOP_RESOURCES x y)))


;; Rule Enforcer
;;   A person or entity that controls (something) by making sure that rules
;;   and regulations are being followed.

(B (name enforcer-nn)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (enforcer-nn e0 x)))
(B (name referee-nn)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (referee-nn e0 x)))
(B (name police-nn)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (police-nn e0 x)))
(B (name police-vb)
   (=> (S#RULE_ENFORCER e0 :0.9)
       (police-vb e0 x y u)))


;; Rule Enforcer: Mapping

(B (name rule-enforcer-map)
   (=> (I#RULE_ENFORCER x :0.9)
       (S#RULE_ENFORCER x)))


;; Science
;;   Knowledge about or study of the natural world based on facts learned
;;   through experiments and observation.

(B (name science-nn)
   (=> (S#SCIENCE e0 :0.9)
       (science-nn e0 x)))
(B (name physics-nn)
   (=> (S#SCIENCE e0 :0.9)
       (physics-nn e0 x)))
(B (name experiment-nn)
   (=> (S#SCIENCE e0 :0.9)
       (experiment-nn e0 x)))
(B (name observation-nn)
   (=> (S#SCIENCE e0 :0.9)
       (observation-nn e0 x)))
(B (name laboratory-nn)
   (=> (S#SCIENCE e0 :0.9)
       (laboratory-nn e0 x)))

(B (name experimental-adj)
   (=> (S#SCIENCE e0 :0.9)
       (experimental-adj e0 x)))
(B (name observational-adj)
   (=> (S#SCIENCE e0 :0.9)
       (observational-adj e0 x)))

(B (name experiment)
   (=> (S#SCIENCE e0 :0.9)
       (experiment-vb e0 x0 x1 x2)))


;; Science: Mapping

(B (name science-map)
   (=> (I#SCIENCE x :0.9)
       (S#SCIENCE x)))


;; Servant
;;   One that serves others; especially, one that performs duties about the
;;   person or home of a master or personal employer. (Including former
;;   ENSLAVEMENT axioms.)

(B (name servant-nn)
   (=> (S#SERVANT e0 :0.9)
       (servant-nn e0 x)))
(B (name manservant-nn)
   (=> (S#SERVANT e0 :0.9)
       (manservant-nn e0 x)))
(B (name butler-nn)
   (=> (S#SERVANT e0 :0.9)
       (butler-nn e0 x)))
(B (name valet-nn)
   (=> (S#SERVANT e0 :0.9)
       (valet-nn e0 x)))
(B (name maid-nn)
   (=> (S#SERVANT e0 :0.9)
       (maid-nn e0 x)))
(B (name housemaid-nn)
   (=> (S#SERVANT e0 :0.9)
       (housemaid-nn e0 x)))
(B (name cleaner-nn)
   (=> (S#SERVANT e0 :0.9)
       (cleaner-nn e0 x)))
(B (name jeeves-nn)
   (=> (S#SERVANT e0 :0.9)
       (jeeves-nn e0 x)))

(B (name serve-vb)
   (=> (S#SERVANT e0 :0.9)
       (serve-vb e0 x y u)))
;; Colonel Mustard: Is this place for you?
;; Wadsworth: Indeed no, sir. I'm merely a humble butler.
;; Colonel Mustard: What exactly do you do?
;; Wadsworth: I buttle, sir.
(B (name buttle-vb)
   (=> (S#SERVANT e0 :0.9)
       (buttle-vb e0 x y u)))
(B (name butle-vb)
   (=> (S#SERVANT e0 :0.9)
       (butle-vb e0 x y u)))


;; Servant: Mapping

(B (name servant-map)
   (=> (I#SERVANT x :0.9)
       (S#SERVANT x)))


;; Struggle
;;   To contend with an adversary or opposing force.

;; Struggle: Type

(B (name fight)
   (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45))
       (fight-nn e0 x)))
(B (name struggle)
   (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45))
       (struggle-nn e0 x)))
(B (name crusade)
   (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45))
       (crusade-nn e0 x)))
(B (name struggle)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%TYPE e0 e0 :0.30)
          (R#STRUGGLE-AGENT x e0 :0.30))
       (struggle-vb e0 x u1 u2)))
(B (name fight)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%TYPE e0 e0 :0.30)
          (R#STRUGGLE-AGENT x e0 :0.30))
       (fight-vb e0 x u1 u2)))
(B (name assail)
   (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2)
          (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2))
       (assail-vb e0 x y u2)))
(B (name insult)
   (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2)
          (R#STRUGGLE-AGENT x e0 :0.2) (R#STRUGGLE-ENEMY y e0 :0.2))
       (insult-vb e0 x y u2)))

(B (name fight-with)
   (=> (S#STRUGGLE e0 :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (with-in e0 x y))))
(B (name fight-against)
   (=> (S#STRUGGLE e0 :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (against-in e0 x y))))
(B (name fight-of)
   (=> (R#STRUGGLE-AGENT y x :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (of-in e0 x y))))
(B (name fight-on)
   (=> (R#STRUGGLE-AGENT y x :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (on-in e0 x y))))
(B (name fight-at)
   (=> (R#STRUGGLE-AGENT y x :0.90)
       (^ (SS#STRUGGLE%TYPE x e0) (at-in e0 x y))))


;; Struggle: Adversary

(B (name enemy)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%ADVERSARY x e0 :0.30))
       (enemy-nn e1 x)))
(B (name adversary)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%ADVERSARY x e0 :0.30))
       (adversary-nn e1 x)))
(B (name rival)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%ADVERSARY x e0 :0.30))
       (rival-nn e1 x)))
(B (name opponent)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%ADVERSARY x e0 :0.30))
       (opponent-nn e1 x)))
(B (name foe)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%ADVERSARY x e0 :0.30))
       (foe-nn e1 x)))
(B (name combatant)
   (=> (^ (S#STRUGGLE e0 :0.30) (SS#STRUGGLE%ADVERSARY x e0 :0.30))
       (combatant-nn e1 x)))

(B (name enemy-of)
   (=> (R#STRUGGLE-AGENT y e0 :0.90)
       (^ (SS#STRUGGLE%ADVERSARY x e0) (of-in e1 x y))))


;; Struggle: Mapping

(B (name struggle-map)
   (=> (I#STRUGGLE x :0.9)
       (S#STRUGGLE x)))
(B (name struggle-type-map)
   (=> (I#STRUGGLE%TYPE x e0 :0.9)
       (SS#STRUGGLE%TYPE x e0)))
(B (name struggle-adversary-map)
   (=> (I#STRUGGLE%ADVERSARY x u :0.9)
       (SS#STRUGGLE%ADVERSARY x u)))


;; Temperature
;;   A measurement that indicates how hot or cold something is; a measurement
;;   in degrees showing the heat of something (such as air or water).

(B (name temperature-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (temperature-nn e0 x)))
(B (name celsius-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (celsius-nn e0 x)))
(B (name celsius-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (celsius-adj e0 x)))
(B (name fahrenheit-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (fahrenheit-nn e0 x)))
(B (name fahrenheit-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (fahrenheit-adj e0 x)))
(B (name thermometer-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (thermometer-nn e0 x)))
(B (name thermometre-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (thermometre-nn e0 x)))

(B (name hot-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (hot-adj e0 x)))
(B (name cold-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (cold-adj e0 x)))
(B (name warm-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (warm-adj e0 x)))
(B (name cool-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (cool-adj e0 x)))
(B (name chilly-adj)
   (=> (S#TEMPERATURE e0 :0.9)
       (chilly-adj e0 x)))

(B (name chill-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (chill-nn e0 x)))
(B (name cold-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (cold-nn e0 x)))
(B (name heat-nn)
   (=> (S#TEMPERATURE e0 :0.9)
       (heat-nn e0 x)))


;; Temperature: Mapping

(B (name temperature-map)
   (=> (I#TEMPERATURE x :0.9)
       (S#TEMPERATURE x)))


;; Theft
;;   The felonious taking and removing of personal property with intent to
;;   deprive the rightful owner of it. (Including former CRIME axioms.)

(B (name theft-nn)
   (=> (S#THEFT e0 :0.9)
       (theft-nn e0 x)))
(B (name larceny-nn)
   (=> (S#THEFT e0 :0.9)
       (larceny-nn e0 x)))
(B (name stealing-nn)
   (=> (S#THEFT e0 :0.9)
       (stealing-nn e0 x)))
(B (name thievery-nn)
   (=> (S#THEFT e0 :0.9)
       (thievery-nn e0 x)))
(B (name robbery-nn)
   (=> (S#THEFT e0 :0.9)
       (robbery-nn e0 x)))
(B (name pillage-nn)
   (=> (S#THEFT e0 :0.9)
       (pillage-nn e0 x)))
(B (name plundering-nn)
   (=> (S#THEFT e0 :0.9)
       (plundering-nn e0 x)))
(B (name plunder-nn)
   (=> (S#THEFT e0 :0.9)
       (plunder-nn e0 x)))
(B (name booty-nn)
   (=> (S#THEFT e0 :0.9)
       (booty-nn e0 x)))

(B (name rob-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (rob-vb e0 x y u)))
(B (name mug-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (mug-vb e0 x y u)))
(B (name hijack-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#VICTIM y e0 :0.3))
       (hijack-vb e0 x y u)))
(B (name steal-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#THEME z e0 :0.3))
       (steal-vb e0 x z u2)))
(B (name pilfer-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#THEME z e0 :0.3))
       (pilfer-vb e0 x z u2)))
(B (name filch-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#THEME z e0 :0.3))
       (filch-vb e0 x z u2)))
(B (name pinch-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#THEME z e0 :0.3))
       (pinch-vb e0 x z u2)))
(B (name plunder-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#THEME z e0 :0.3))
       (plunder-vb e0 x z u2)))
(B (name pillage-vb)
   (=> (^ (S#THEFT e0 :0.3) (R#AGENT x e0 :0.3) (R#THEME z e0 :0.3))
       (pillage-vb e0 x z u2)))

(B (name bandit-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (bandit-nn e0 x)))
(B (name thief-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (thief-nn e0 x)))
(B (name pilferer-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (pilferer-nn e0 x)))
(B (name mugger-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (mugger-nn e0 x)))
(B (name robber-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (robber-nn e0 x)))
(B (name burglar-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (burglar-nn e0 x)))
(B (name plunderer-nn)
   (=> (^ (S#THEFT e0 :0.30) (SS#THEFT%PERPETRATOR x e0 :0.30)
          (R#AGENT x e0 :0.30))
       (plunderer-nn e0 x)))


;; Theft: Mapping

(B (name theft-map)
   (=> (I#THEFT x :0.9)
       (S#THEFT x)))
(B (name theft-perpetrator-map)
   (=> (I#THEFT%PERPETRATOR x :0.9)
       (SS#THEFT%PERPETRATOR x)))


;; Upward Movement
;;   Movement from a lower place or level to a higher place or level.
;;   (Including axioms from LOW_POINT%MOVEMENT_UPWARD.)

(B (name rise-above)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (^ (rise-vb e0 x y z) (above-in e1 e0 w))))
(B (name rise-from)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (^ (rise-vb e0 x y z) (from-in e1 e0 w))))
(B (name rise-up-from)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (^ (rise-vb e0 x y z) (up-in e1 e0 e2) (from-in e2 e1 w))))
(B (name leap)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (leap-vb e0 x y z)))
(B (name climb)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (climb-vb e0 x y z)))
(B (name jump)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (jump-vb e0 x y z)))
(B (name boost)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-U-PATIENT x e0 :0.30))
       (boost-vb e0 x y z)))
(B (name raise)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (raise-vb e0 x y u)))
(B (name go-up)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (^ (go-vb e0 x y u) (up-rb e1 e0))))
(B (name rise)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (rise-vb e0 x y u)))
(B (name skyrocket)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (skyrocket-vb e0 x y u)))
(B (name increase)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (increase-vb e0 x y u)))
(B (name spiral)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (spiral-vb e0 x y u)))
(B (name soar)
   (=> (^ (S#UPWARD_MOVEMENT e0 :0.30) (R#MOVE-UP e0 e0 :0.30)
          (R#MOVER x e0 :0.30))
       (soar-vb e0 x y u)))


;; Upward Movement: Mapping

(B (name upward-movement-map)
   (=> (I#UPWARD_MOVEMENT x :0.9)
       (S#UPWARD_MOVEMENT x)))


;; Vehicle
;;   Something used to transport people or goods, esp. something used on land
;;   or roads.

(B (name vehicle-nn)
   (=> (S#VEHICLE e0 :0.9)
       (vehicle-nn e0 x)))
(B (name automobile-nn)
   (=> (S#VEHICLE e0 :0.9)
       (automobile-nn e0 x)))
(B (name auto-nn)
   (=> (S#VEHICLE e0 :0.9)
       (auto-nn e0 x)))
(B (name motorcar-nn)
   (=> (S#VEHICLE e0 :0.9)
       (motorcar-nn e0 x)))
(B (name car-nn)
   (=> (S#VEHICLE e0 :0.9)
       (car-nn e0 x)))
(B (name truck-nn)
   (=> (S#VEHICLE e0 :0.9)
       (truck-nn e0 x)))
(B (name van-nn)
   (=> (S#VEHICLE e0 :0.9)
       (van-nn e0 x)))
(B (name minivan-nn)
   (=> (S#VEHICLE e0 :0.9)
       (minivan-nn e0 x)))


;; Vehicle: Mapping

(B (name vehicle-map)
   (=> (I#VEHICLE x :0.9)
       (S#VEHICLE x)))


;; War
;;   A conflict carried on by force of arms, as between nations or between
;;   parties within a nation; warfare, as by land, sea, or air; a contest
;;   carried on by force of arms, as in a series of battles or campaigns.
;;   (Includes previous STRUGGLE axioms.)

(B (name war)
   (=> (S#WAR e0 :0.9)
       (war-nn e0 x)))
(B (name battle)
   (=> (S#WAR e0 :0.9)
       (battle-nn e0 x)))
(B (name combat)
   (=> (S#WAR e0 :0.9)
       (combat-nn e0 x)))
(B (name gunfight)
   (=> (S#WAR e0 :0.9)
       (gunfight-nn e0 x)))
(B (name gunshot)
   (=> (S#WAR e0 :0.9)
       (gunshot-nn e0 x)))
(B (name attack)
   (=> (S#WAR e0 :0.9)
       (attack-nn e0 x)))
(B (name assault)
   (=> (S#WAR e0 :0.9)
       (assault-nn e0 x)))
(B (name blitz)
   (=> (S#WAR e0 :0.9)
       (blitz-nn e0 x)))
(B (name barrage)
   (=> (S#WAR e0 :0.9)
       (barrage-nn e0 x)))
(B (name invasion)
   (=> (S#WAR e0 :0.9)
       (invasion-nn e0 x)))

(B (name combat)
   (=> (^ (S#WAR e0 :0.45) (R#WAR-AGENT x e0 :0.45))
       (combat-vb e0 x u1 u2)))
(B (name battle)
   (=> (^ (S#WAR e0 :0.45) (R#WAR-AGENT x e0 :0.45))
       (battle-vb e0 x u1 u2)))
(B (name combat)
   (=> (^ (S#WAR e0 :0.45) (R#WAR-AGENT x e0 :0.45))
       (combat-vb e0 x u1 u2)))
(B (name attack)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (attack-vb e0 x y u2)))
(B (name bomb-vb)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (bomb-vb e0 x y u2)))
(B (name charge)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (charge-vb e0 x y u2)))
(B (name invade)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-AGENT y e0 :0.30))
       (invade-vb e0 x y u2)))
(B (name defeat)
   (=> (^ (S#WAR e0 :0.30) (R#WAR-AGENT x e0 :0.30) (R#WAR-ENEMY y e0 :0.30))
       (defeat-vb e0 x y u2)))

(B (name weapon)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (weapon-nn e0 x)))
(B (name gun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (gun-nn e0 x)))
(B (name knife)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (knife-nn e0 x)))
(B (name bomb)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bomb-nn e0 x)))
(B (name shotgun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (shotgun-nn e0 x)))
(B (name firearm)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (firearm-nn e0 x)))
(B (name artillery)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (artillery-nn e0 x)))
(B (name revolver)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (revolver-nn e0 x)))
(B (name sword)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (sword-nn e0 x)))
(B (name rapier)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (rapier-nn e0 x)))
(B (name ammunition)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (ammunition-nn e0 x)))
(B (name barrel)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (barrel-nn e0 x)))
(B (name bayonet)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bayonet-nn e0 x)))
(B (name blowgun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (blowgun-nn e0 x)))
(B (name bomb)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bomb-nn e0 x)))
(B (name bullet)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (bullet-nn e0 x)))
(B (name cannon)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (cannon-nn e0 x)))
(B (name cap-gun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (^ (cap-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
(B (name glock)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (glock-nn e0 x)))
(B (name handgun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (handgun-nn e0 x)))
(B (name holster)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (holster-nn e0 x)))
(B (name machine-gun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (^ (machine-nn e1 y) (of-in e2 e0 e1) (gun-nn e0 x))))
(B (name minigun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (minigun-nn e0 x)))
(B (name musket)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (musket-nn e0 x)))
(B (name pistol)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (pistol-nn e0 x)))
(B (name rifle)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (rifle-nn e0 x)))
(B (name spear)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (spear-nn e0 x)))
(B (name trigger)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (trigger-nn e0 x)))
(B (name uzi)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (uzi-nn e0 x)))
(B (name zipgun)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (zipgun-nn e0 x)))
(B (name armory)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (armory-nn e0 x)))
(B (name arsenal)
   (=> (^ (S#WAR e0 :0.45) (R#WEAPON x e0 :0.45))
       (arsenal-nn e0 x)))

(B (name soldier-nn)
   (=> (S#WAR e0 :0.9)
       (soldier-nn e0 x)))
(B (name officer-nn)
   (=> (S#WAR e0 :0.9)
       (officer-nn e0 x)))
(B (name army-nn)
   (=> (S#WAR e0 :0.9)
       (army-nn e0 x)))
(B (name gunner-nn)
   (=> (S#WAR e0 :0.9)
       (gunner-nn e0 x)))
(B (name shooter-nn)
   (=> (S#WAR e0 :0.9)
       (shooter-nn e0 x)))


;; War: Mapping

(B (name war-map)
   (=> (I#WAR x :0.9)
       (S#WAR x)))
