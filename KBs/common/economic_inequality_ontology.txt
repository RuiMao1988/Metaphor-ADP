;; Disease

(B (name disease) (=> (^ (M#CAUSE-NOT-FUNCTION e0 :0.3) (M#CAUSING-THING-F x e0 :0.3) (M#FUNCTION-AGENT y e0 :0.3)) (^ (I#DISEASE x) (I#TYPE x x) (R#SICK y x))))

(B (name disease2) (=> (^ (M#CAUSE-NOT-FUNCTION e0 :0.45) (M#CAUSING-THING-F x e0 :0.45)) (^ (I#DISEASE y) (I#TYPE x y))))

(B (name cure) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.3) (M#CAUSING-THING_E y e1 :0.3) (M#EXISTING-THING x e1 :0.3)) (^ (I#CURE e0) (R#CURE-AGENT y e0) (R#SICK x d) (S#DISEASE d))))

(B (name cure2) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.46) (M#CAUSING-THING_E y e1 :0.46)) (^ (I#CURE e0) (R#CURE-AGENT y e0))))

(B (name cure3) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.48) (M#CAUSING-THING_E e0 e1 :0.48)) (I#CURE e0)))


;; Base

(B (name base) (=> (^ (M#SUPPORT e1 :0.3) (M#SUPPORTER z e1 :0.3) (M#SUPPORTED y e1 :0.3)) (^ (I#BASE x) (R#BASE-AGENT z x) (R#BASE-STRUCTURE y x))))

(B (name base1) (=> (^ (M#SUPPORT e1 :0.33) (M#SUPPORTER x e1 :0.33) (M#SUPPORTED y e1 :0.33)) (^ (I#BASE x) (R#BASE-STRUCTURE y x))))

(B (name base2) (=> (^ (M#SUPPORT e1 :0.45) (M#SUPPORTER x e1 :0.45)) (I#BASE x)))


;; Struggle

(B (name fight) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.3) (M#CAUSING-THING_E z e1 :0.3) (M#EXISTING-THING y e1 :0.3)) (^ (I#STRUGGLE x) (R#STRUGGLE-ENEMY y x) (R#STRUGGLE-AGENT z x))))

(B (name fight2) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.32) (M#EXISTING-THING y e1 :0.32) (M#CAUSING-THING_E x e1 :0.32)) (^ (I#STRUGGLE x) (R#STRUGGLE-ENEMY y x))))

(B (name fight3) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.46) (M#CAUSING-THING_E z e1 :0.46)) (^ (I#STRUGGLE x) (R#STRUGGLE-AGENT z x))))

(B (name fight4) (=> (^ (M#CAUSE-NOT-EXIST e1 :0.48) (M#CAUSING-THING_E x e1 :0.48)) (^ (I#STRUGGLE x) (TYPE x x))))


(B (name enemy) (=> (^ (M#CAUSE-NOT-FUNCTION e1 :0.3) (M#CAUSING-THING-F x e1 :0.3) (M#FUNCTION-AGENT z e1 :0.3)) (^ (I#STRUGGLE-ADVERSARY x e0) (R#STRUGGLE-AGENT z e0))))

(B (name enemy2) (=> (^ (M#CAUSE-NOT-FUNCTION e1 :0.45) (M#CAUSING-THING-F x e1 :0.45)) (I#STRUGGLE-ADVERSARY x e0)))


;; Body of Water

(B (name body_of_water) (=> (M#LARGE-AMOUNT-OF y :0.8) (^ (I#BODY_OF_WATER x))))

; (B (name drink) (=> (^ (M#SATISFY-NEED e0 :0.3) (M#SATISFY-AGENT m e0 :0.3) (M#SATISFY-OBJECT d e0 :0.3)) (^ (I#DRINK e0 w) (R#DRINKER d e0) (R#MATTER m w))))

; (B (name drink2) (=> (^ (M#SATISFY-NEED e0 :0.31) (M#SATISFY-AGENT w e0 :0.31) (M#SATISFY-OBJECT d e0 :0.31)) (^ (I#DRINK e0 w) (R#DRINKER d e0))))

; (B (name drink3) (=> (^ (M#SATISFY-NEED e0 :0.46) (M#SATISFY-AGENT m e0 :0.46)) (^ (I#DRINK e0 w) (R#MATTER m w))))

; (B (name drink4) (=> (^ (M#SATISFY-NEED e0 :0.47) (M#SATISFY-AGENT w e0 :0.47)) (I#DRINK e0 w)))

; (B (name satisfy-need) (=> (^ (M#HAVE-NEED e1 :0.3) (M#NEEDY n e1 :0.3) (M#NEED x :0.3)) (^ (M#SATISFY-NEED e0) (M#SATISFY-OBJECT n e0))))

; (B (name satisfy-need2) (=> (^ (M#HAVE-NEED e1 :0.46) (M#NEED x :0.46)) (M#SATISFY-NEED e0)))


(B (name thirst) (=> (M#NEED x :0.9) (I#THIRST x y)))


(B (name drought) (=> (^ (M#NOT-EXIST e0 :0.45) (M#EXISTING-THING x e0 :0.45)) (^ (I#DROUGHT e2 u) (R#STREAMING x e2))))

(B (name drought2) (=> (M#NOT-EXIST e0 :0.9) (I#DROUGHT e2 u)))

(B (name shoal) (=> (^ (M#NOT-EXIST e0 :0.45) (M#EXISTING-THING x e0 :0.45)) (^ (I#SHOAL e2 u) (R#STREAMING x e2))))

(B (name shoal2) (=> (M#NOT-EXIST e0 :0.9) (I#SHOAL e2 u)))


;; Movement

(B (name water-movement) (=> (^ (M#LIQUID-MOVE-FREELY e0 :0.3) (M#LIQUID-THING y :0.3))  (^ (I#BODY_OF_WATER e0) (I#MOVEMENT e0) (R#STREAMING x e0))))


;; School

(B (name school1) (=> (^ (M#CAUSE-UNDERSTAND e0 :0.2) (M#CAUSING-THING_U t e0 :0.2) (M#UNDERSTAND-AGENT z e0 :0.2) (M#UNDERSTAND-THEME y e0 :0.2)) (^ (R#SCHOOL-TEACHER t x) (R#SCHOOL-SUBJECT  y x) (R#SCHOOL-STUDENT z x))))

(B (name school2) (=> (^ (M#CAUSE-UNDERSTAND e0 :0.3) (M#CAUSING-THING_U t e0 :0.3) (M#UNDERSTAND-THEME y e0 :0.3)) (^ (R#SCHOOL-TEACHER t x) (R#SCHOOL-SUBJECT y x))))

(B (name school3) (=> (^ (M#CAUSE-UNDERSTAND e0 :0.3) (M#CAUSING-THING_U t e0 :0.3) (M#UNDERSTAND-AGENT z e0 :0.3)) (^ (R#SCHOOL-TEACHER t x) (R#SCHOOL-STUDENT z x))))

(B (name school4) (=> (^ (M#CAUSE-UNDERSTAND e0 :0.46) (M#CAUSING-THING_U t e0 :0.46)) (R#SCHOOL-TEACHER t x)))

(B (name school5) (=> (M#CAUSE-UNDERSTAND e0 :0.95) (I#SCHOOL x)))


;; Crime

(B (name crime) (=> (^ (M#AGAINST-SOCIETY-ACTION e0 :0.3) (M#AGAINST-SOCIETY-ACTOR x e0 :0.3) (M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.3)) (^ (I#CRIME x) (R#CRIME-AGENT x e0) (R#CRIME-VICTIM y e0))))

(B (name crime2) (=> (^ (M#AGAINST-SOCIETY-ACTION e0 :0.45) (M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^ (I#CRIME e0) (R#CRIME-AGENT x e0))))

(B (name crime3) (=> (^ (M#AGAINST-SOCIETY-ACTION e0 :0.45) (M#AGAINST-SOCIETY-ACTION-VICTIM y e0 :0.45)) (^ (I#CRIME e0) (R#CRIME-VICTIM y e0))))

(B (name crime4) (=> (M#AGAINST-SOCIETY-ACTION e0 :0.91) (^ (I#CRIME e0) (I#TYPE x e0))))

(B (name crime-perpetrator) (=> (^ (M#AGAINST-SOCIETY-ACTION e0 :0.45) (M#AGAINST-SOCIETY-ACTOR x e0 :0.45)) (^ (I# CRIME e0) (I#PERPETRATORS x e0) (R#CRIME-AGENT x e0))))


;; Confinement

(B (name confinement) (=> (^ (M#CAUSE-NOT-FUNCTION e1 :0.3) (M#CAUSING-THING-F x e1 :0.3) (M#FUNCTION-AGENT y e1 :0.3)) (^ (I#CONFINEMENT e0) (I#CONFINED_SPACE x e0) (R#CONFINEMENT-AGENT x e0) (R#CONFINEMENT-PATIENT y e0))))

(B (name confinement2) (=> (^ (M#CAUSE-NOT-FUNCTION e1 :0.45) (M#CAUSING-THING-F x e1 :0.45)) (^ (I#CONFINEMENT e0) (I#CONFINED_SPACE x e0) (R#CONFINEMENT-AGENT x e0))))

(B (name confinement3) (=> (^ (M#CAUSE-NOT-FUNCTION e1 :0.31) (M#CAUSING-THING-F e0 e1 :0.31) (M#FUNCTION-AGENT y e1 :0.31))  (^ (I#CONFINEMENT e0) (I#CONFINED_SPACE x e0) (R#CONFINEMENT-PATIENT y e0))))

(B (name confinement4) (=> (^ (M#CAUSE-NOT-FUNCTION e1 :0.47) (M#CAUSING-THING-F e0 e1 :0.47))  (^ (I#CONFINEMENT e0) (I#CONFINED_SPACE x e0))))


;; Exit

(B (name exit-nn) (=> (^ (M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSING-THING-RF x e0 :0.45)) (^ (I#CONFINEMENT e0) (I#EXIT x e0))))
(B (name exit-vb) (=> (^ (M#RESUME-FUNCTION e0 :0.9)) (^ (I#CONFINEMENT e0) (I#EXIT e0 e0) (R#ESCAPE-AGENT x e0))))


;; Enabling

(B (name enabling) (=> (^ (M#CAUSE-FUNCTION e1 :0.3) (M#CAUSING-THING-F x e1 :0.3) (M#FUNCTION y :0.3)) (^ (I#ENABLING e0) (R#ENABLING-AGENT x e0) (R#ENABLED y e0))))

(B (name enabling2) (=> (^ (M#CAUSE-FUNCTION e1 :0.45) (M#CAUSING-THING-F x e1 :0.45)) (^ (I#ENABLING e0) (R#ENABLING-AGENT x e0))))

(B (name enabling3) (=> (^ (M#CAUSE-FUNCTION e1 :0.31) (M#CAUSING-THING-F e0 e1 :0.31) (M#FUNCTION y :0.31)) (^ (I#ENABLING e0) (R#ENABLED y e0))))

(B (name enabling4) (=> (^ (M#CAUSE-FUNCTION e1 :0.47) (M#CAUSING-THING-F e0 e1 :0.47)) (I#ENABLING e0)))


;; Material

(B (name cut) (=> (^ (M#CAUSE-REDUCE e0 :0.3) (M#CAUSING-THING-R y e0 :0.3) (M#REDUCED x e0 :0.3)) (^ (I#CUT e0 x) (I#MATERIAL x) (R#CUT-AGENT y e0))))
(B (name cut2) (=> (^ (M#CAUSE-REDUCE e0 :0.46) (M#REDUCED x e0 :0.46)) (^ (I#CUT e0 x) (I#MATERIAL x))))


;; Organism

(B (name grow) (=> (M#INCREASED x :0.9) (^ (I#GROW e0 x) (I#ORGANISM x))))


;; Physical Harm

(B (name physical-harm) (=> (^ (M#CAUSE-HARM e0 :0.3) (M#CAUSING-THING-H x e0 :0.3) (M#HARM-VICTIM y e0 :0.3)) (^ (I#PHYSICAL_HARM e0) (R#HARM-AGENT x e0) (R#HARM-VICTIM y e0))))

(B (name physical-harm2) (=> (^ (M#CAUSE-HARM e0 :0.46) (M#CAUSING-THING-H x e0 :0.46)) (^ (I#PHYSICAL_HARM e0) (R#HARM-AGENT x e0))))

(B (name physical-harm3) (=> (^ (M#CAUSE-HARM e0 :0.46) (M#HARM-VICTIM y e0 :0.46)) (^ (I#PHYSICAL_HARM e0) (R#HARM-VICTIM y e0))))

(B (name physical-harm4) (=> (M#CAUSE-HARM e0 :0.9) (I#PHYSICAL_HARM e0)))

(B (name physical-restraint) (=> (^ (M#CAUSE-HARM e0 :0.23) (M#CAUSING-THING-H x e0 :0.23) (M#HARM-VICTIM y e0 :0.23) (CAUSE-NOT-FUNCTION e0 :0.23)) (^ (I#PHYSICAL_HARM-RESTRAINT e0) (R#HARM-AGENT x e0) (R#HARM-VICTIM y e0))))

(B (name physical-protection) (=> (^ (M#CAUSE-REDUCE-HARM e0 :0.3) (M#CAUSING-THING-RH x :0.3)) (^ (I#PHYSICAL_HARM e0) (I#PROTECTION x e0))))


;; Abyss

(B (name abyss) (=> (^ (M#CAUSE-NOT-FUNCTION e0 :0.33) (M#CAUSING-THING-F x e0 :0.33) (M#CAUSE-IMMOBILITY e0 :0.33)) (^ (I#ABYSS e0) (I#TYPE x e0))))


;; Abyss-Exit

(B (name abyss-exit) (=> (^ (M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-EXIT-IMMOBILITY e0 :0.45)) (^ (I#ABYSS e0) (I#EXIT e0 e0))))
(B (name abyss-exit2) (=> (^ (M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSE-EXIT-IMMOBILITY e0 :0.45) (M#CAUSING-THING-RF x e0 :0.45)) (^ (I#ABYSS e0) (I#EXIT e0 e0) (R#ABYSS-EXIT-CAUSE x e0))))


;; Maze

(B (name maze) (=> (^ (M#CAUSE-CONFUSION e0 :0.23) (M#CONFUSING-THING x :0.23) (M#CAUSE-IMMOBILITY e0 :0.23) (M#CAUSE-NOT-FUNCTION e0 :0.23)) (^ (I#MAZE e0) (I#CONFUSING-PATHWAYS x e0))))


;; Navigation

(B (name navigate) (=> (^ (M#CAUSE-REDUCE-CONFUSION e0 :0.23) (M#CONFUSING-THING y :0.23) (M#CAUSE-ESCAPE-IMMOBILITY e0 :0.23) (M#CAUSE-RESUME-FUNCTION e0 :0.23)) (^ (I#MAZE e0) (I#NAVIGATION e0 e0) (R#NAVIGATION-AGENT x e0))))


;; Low Point

; (B (name low-point) (=> (^ (M#BOTTOM-OF-SCALE e0 :0.45) (M#PLACE-ON-SCALE x :0.45)) (I#LOW-POINT e0)))


;; Movement Downward

; (B (name movement-downward) (=> (^ (M#DESCEND-ON-SCALE e0 :0.45) (M#DESCEND-PATIENT x e0 :0.45)) (^ (I#MOVEMENT-DOWNWARD e0) (R#MOVE-D-PATIENT x e0))))


;; Movement Upward

; (B (name movement-upward) (=> (^ (M#ASCEND-ON-SCALE e0 :0.45) (M#ASCEND-PATIENT x e0 :0.45)) (^ (I#MOVEMENT-UPWARD e0) (R#MOVE-U-PATIENT x e0))))


;; Burden

;; Burden: Weight

(B (name weight) (=> (^ (M#CAUSE-NOT-FUNCTION e0 :0.45) (M#CAUSING-THING-F x e0 :0.45)) (^ (I#PHYSICAL_BURDEN e0) (I#WEIGHT x e0))))
(B (name weight) (=> (^ (M#CAUSE-NOT-FUNCTION e0 :0.45) (M#CAUSING-THING-F x e0 :0.45)) (^ (I#PHYSICAL_BURDEN e0) (I#WEIGHT e0 e0) (R#PHYSICAL_BURDEN-CAUSE x e0))))


;; Burden: Relief

(B(name relief) (=> (^ (M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSING-R-THING x :0.45))  (^ (I#PHYSICAL_BURDEN e0) (I#RELIEF x e0))))
(B(name relief) (=> (^ (M#CAUSE-RESUME-FUNCTION e0 :0.45) (M#CAUSING-R-THING x :0.45))  (^ (I#PHYSICAL_BURDEN e0) (I#RELIEF e0 e0) (R#RELIEF-CAUSE x e0))))


;; Human Body

;; Human Body: Death

;(B (name death) (=> (^ (M#DECREASE-SIZE e0 :0.45) (M#DECREASING-THING x :0.45)) (^ (I#HUMAN_BODY e0) (I#DEATH x e0))))
;(B (name death) (=> (^ (M#DECREASE-SIZE e0 :0.45) (M#DECREASING-THING x :0.45)) (^ (I#HUMAN_BODY e0) (I#DEATH e0 e0))))


;; Human Body: Living

;(B (name living) (=> (^ (M#CAUSE-ABLE-TO-FUNCTION e0 :0.45) (M#CAUSING-THING-AF x :0.45)) (I#HUMAN-BODY-LIVING x)))


;; Human Body: Health

;(B (name health) (=> (^ (M#CAUSE-IMPROVE-FUNCTIONALITY e0 :0.45) (M#CAUSING-THING-IF x :0.45)) (I#HUMAN-BODY-HEALTH x)))


;; Building

;; Building: Structure

(B (name structure) (=> (^ (M#PROVIDE-SUPPORT e0 :0.45) (M#SUPPORTING-THING x :0.45)) (^ (I#BUILDING e0) (I#STRUCTURE x e0))))
(B (name components) (=> (^ (M#PROVIDE-SUPPORT e0 :0.45) (M#SUPPORTING-THING x :0.45)) (^ (I#BUILDING e0) (I#COMPONENTS x e0))))


;; Pathway

;; Pathway: Type

(B (name pathway-type) (=> (^ (M#PROVIDE-ACCESS e0 :0.45) (M#PROVIDING-THING-A x :0.45)) (^ (I#PATHWAY e0) (I#TYPE x e0))))


;; Pathway: Open Path

(B (name open-path) (=> (^ (M#EASE-ACCESS e0 :0.9)) (^ (I#PATHWAY e1) (I#OPEN-PATH e0 e0))))


;; Pathway: Obstructed Path

(B (name obstructed-path) (=> (^ (M#BLOCK-ACCESS e0 :0.9)) (^ (I#PATHWAY e1) (I#OBSTRUCTED-PATH e0 e0))))


;; Portal

;; Portal: Means of Entry

(B (name means-of-entry) (=> (^ (M#ALLOW-ACCESS e0 :0.45) (M#ALLOWING-A-THING x :0.45)) (^ (I#PORTAL e0) (I#MEANS_OF_ENTRY x e0))))


;; Portal: Obstacles

(B (name obstacles) (=> (^ (M#BLOCK-ACCESS e0 :0.9)) (^ (I#PORTAL e0) (I#OBSTACLES x e0))))


;; Physical Object

;; Physical Object: Type

;; Physical Object: Possession

(B (name possession) (=> (^ (M#ALLOW-UTILIZATION e0 :0.45) (M#ALLOWING-U-THING x :0.45)) (^ (I#PHYSICAL_OBJECT e0) (I#POSSESSION x e0))))


;; Victim

;; Victim: Sufferer

(B (name sufferer) (=> (^ (M#EXPERIENCE-HARM e0 :0.45) (M#EXPERIENCER x :0.45)) (^ (I#VICTIM e0) (I#SUFFERER x e0))))


;; Victim: Victimizer

(B (name victimizer) (=> (^ (M#CAUSE-HARM e0 :0.45) (M#CAUSING-THING-H x :0.45)) (^ (I#VICTIM e0) (I#VICTIMIZER x e0))))


;; Victim: Champion

(B (name champion) (=> (^ (M#CAUSE-NOT-HARM e0 :0.45) (M#CAUSING-THING-NH x :0.45)) (^ (I#VICTIM e0) (I#CHAMPION x e0))))


;; Vision

;; Vision: Blindness

(B (name blindness) (=> (^ (M#INDIFFERENT x :0.45) (M#SELFISH x :0.45)) (^ (I#VISION e0) (I#BLINDNESS e0 e0) (R#BLIND x e0))))
(B (name invisible) (=> (^ (M#IGNORED x :0.45) (M#HIDDEN x :0.45)) (^ (I#VISION e0) (I#BLINDNESS e0 e0) (R#INVISIBLE x e0))))


;; Blood System

;; Blood System: Component

(B (name component) (=> (^ (M#CAUSE-FUNCTION x :0.45) (M#CAUSING-THING-F x :0.45)) (^ (I#BLOOD e0) (I#SYSTEM-COMPONENT x e0) (R#BLOOD x e0))))


;; Energy

;; Energy: Type

(B (name energy) (=> (^ (M#CAUSE-FUNCTION x :0.45) (M#CAUSING-THING-F x :0.45)) (^ (I#ENERGY e0) (I#TYPE x e0))))


;; Monster

;; Monster: Type

(B (name monster) (=> (^ (M#STRONG-ENTITY x :0.33) (M#UNDESIRABLE-ENTITY x :0.33) (M#HOARD-RESOURCES x :0.33)) (^ (I#MONSTER e0) (I#TYPE x e0))))


;; Parasite

;; Parasite: Destructive Being

(B (name parasite) (=> (^ (M#EXPLOITATIVE x :0.45) (M#DRAIN-RESOURCES x :0.45)) (^ (I#PARASITE e0) (I#DESTRUCTIVE-BEING x e0))))


;; Plant

;; Plant: Type

;(B (name plant) (=> (^ (M# x :0.33) (M# x :0.33) (M# x :0.33)) (I#PLANT-TYPE x)))

(B (name plant-roots) (=> (^ (M#CAUSE-FUNCTION x :0.33) (M#CAUSING-THING x :0.33) (M#HIDDEN x :0.33)) (^ (I#PLANT e0) (PARTS x e0) (R#PLANT-ROOT x e0))))
(B (name plant-fruits) (=> (^ (M#BYPRODUCT x :0.45) (M#EXPOSED x :0.45)) (^ (I#PLANT e0) (I#PARTS x e0) (R#PLANT-EXTERNAL x e0))))

;; Darkness

(B (name darkness) (=> (^ (M#CAUSE-FEAR x :0.33) (M#CAUSE-NOT-FUNCTION x :0.33) (M#CAUSING-THING-FNF x :0.33)) (^ (I#DARKNESS e0) (I#DARK-END-OF-RANGE-OF-DARKNESS/LIGHT x e0))))


;; Enabler

;; Enabler: Lubricant

(B (name lubricant) (=> (^ (M#CAUSE-FUNCTION x :0.45) (M#CAUSING-THING-F x :0.45)) (^ (I#ENABLER e0) (I#LUBRICANT x e0))))
