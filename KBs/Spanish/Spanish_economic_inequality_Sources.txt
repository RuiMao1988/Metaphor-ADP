;;
;; Source Words
;;

; DISEASE
(B (name enfermedad) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (enfermedad-nn e0 x)))
;(B (name mal) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (mal-nn e0 x)))
(B (name náusea) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (náusea-nn e0 x)))
(B (name afeccion) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (afeccion-nn e0 x)))
(B (name morbo) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (morbo-nn e0 x)))
(B (name dolencia) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (dolencia-nn e0 x)))
(B (name condición-grave) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (^ (condición -nn e0 x) (grave-adj e1 x))))
(B (name peste) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (peste-nn e0 x)))
(B (name plaga) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (plaga-nn e0 x)))
(B (name cáncer) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (cáncer-nn e0 x)))
(B (name gordura) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (gordura-nn e0 x)))

;; I think these should be SYMPTOMS
(B (name Infección) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (infección-nn e0 x)))
(B (name llaga) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (llaga-nn e0 x)))
(B (name fiebre) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (fiebre-nn e0 x)))
(B (name malestar) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (malestar-nn e0 x)))

; SICK
(B (name padecimiento) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE x e0 :0.45)) (padecimeinto-nn e0 x)))
(B (name enfermo) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (enfermo-adj e0 y)))
(B (name débil) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (débil-adj e0 y)))
(B (name dolorido) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (dolorido-adj e0 y)))
(B (name minusválido) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (minusválido-adj e0 y)))
(B (name discapacitado) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (discapacitado-adj e0 y)))
(B (name incapacitado) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (incapacitado-adj e0 y)))
(B (name lisiado) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (lisiado-adj e0 y)))

(B (name inválido-n) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (inválido-nn e0 y)))
(B (name enfermo-n) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (enfermo-nn e0 y)))
(B (name minusválido-n) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (minusválido-nn e0 y)))
(B (name paciente) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE x e0 :0.3) (R#SICK y e0 :0.3)) (paciente-nn e0 y)))

;(B (name suffer-from) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TYPE e0 e0 :0.3) (R#SICK y x :0.3)) (^ (suffer-vb e0 y u1 u2) (from-in e1 e0 x))))

; OF - DISEASE
(B (name of-disease) (=> (R#SICK  y x :0.9) (^ (S#DISEASE x) (de-in e1 x y))))

; TREATMENT

(B (name tratamiento) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45)) (tratamiento-nn e0 x)))
(B (name terapia) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45)) (terapia-nn e0 x)))
(B (name diagnóstico) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45)) (diagnóstico-nn e0 x)))
(B (name diagnóstica) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TREATMENT x e0 :0.45)) (diagnóstica-nn e0 x)))


(B (name doctor) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (doctor-nn e0 y)))
(B (name médico) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (médico-nn e0 y)))
(B (name facultativo) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (facultativo-nn e0 y)))
(B (name medicina) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (medicina-nn e0 y)))
(B (name remedio) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (remedio-nn e0 y)))
(B (name vendaje) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (vendaje-nn e0 y)))
(B (name venda) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (venda-nn e0 y)))
(B (name tirita) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT y e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (tirita-nn e0 y)))

(B (name tratar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (tratar-vb e0 y x u2)))
(B (name prescribir) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (prescribir-vb e0 y u1 u2)))
(B (name diagnosticar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (diagnosticar-vb e0 y x u2)))
(B (name aliviar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (aliviar-vb e0 y x u2)))
(B (name disecar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (disecar-vb e0 y u1 u2)))
(B (name remediar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%TREATMENT e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (remediar-vb e0 y u1 u2)))

;(B (name of-treatment) (=> (S#DISEASE e0 x :0.9) (^ (SS#DISEASE%TREATMENT x e0) (of-in e1 x y))))

; CURE

(B (name cura) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45)) (cura-nn e0 x)))
(B (name panacea) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45)) (panacea-nn e0 x)))

(B (name curar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (curar-vb e0 y x u2)))
(B (name sanar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#CURE-AGENT y e0 :0.3)) (sanar-vb e0 y x u2)))

(B (name irrecuperable) (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE y e0 :0.2) (R#SICK y e1 :0.1)) (irrecupable-adj e0 y)))
(B (name incurable) (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE y e0 :0.2) (R#SICK y e1 :0.1)) (incurable-adj e0 y)))
(B (name irremediable) (=> (^ (S#DISEASE e0 :0.2) (SS#DISEASE%CURE y e0 :0.2) (R#SICK y e1 :0.1)) (irremediable-adj e0 y)))


(B (name recuperar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y x :0.3)) (recuperar-vb e0 y u1 u2)))
(B (name recobrar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y x :0.3)) (recobrar-vb e0 y u1 u2)))
(B (name reponerse) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y x :0.3)) (reponerse-vb e0 y u1 u2)))
(B (name restablecerse) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y x :0.3)) (restablecerse-vb e0 y u1 u2)))
(B (name convalecer) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE e0 e0 :0.3) (R#SICK y x :0.3)) (convalecer-vb e0 y u1 u2)))

(B (name recuperación) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%CURE x e0 :0.45)) (recuperación-nn e0 x)))
(B (name convalencia) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%CURE x e0 :0.45)) (convalencia-nn e0 x)))


; OF - CURE
(B (name of-cure) (=> (S#DISEASE e0 :0.9) (^ (SS#DISEASE%CURE x e0) (de-in e1 x y))))

; FROM_AGAINST - CURE
;(B (name from-cure) (=> (S#DISEASE e0 :0.9) (^ (SS#DISEASE%CURE e0 e0) (from-in e1 e0 y))))
;(B (name against-cure) (=> (S#DISEASE e0 :0.9) (^ (SS#DISEASE%CURE e0 e0) (against-in e1 e0 y))))


; EPIDEMIC
(B (name epidemia) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45)) (epidemic-nn e0 y)))
(B (name epidémico) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45)) (epidémico-adj e0 y)))
(B (name pandemia) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45)) (pandemia-nn e0 y)))
(B (name pandémico) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE e0 e0 :0.45)) (pandémico-adj e0 y)))
(B (name virus) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%TYPE y e0 :0.45)) (virus-nn e0 y)))

; OF - EPIDEMIC
;(B (name of-epidemic) (=> (S#DISEASE e0 :0.9) (^ (SS#DISEASE%TYPE x e0 u) (de-in e1 x y))))

; SYMPTOM
(B (name síntoma) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (síntoma-nn e0 y)))
(B (name sintomático) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS e0 e0 x :0.45)) (sintomático-adj e0 y)))

(B (name sangrante) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (sangrante-adj e0 y)))
(B (name sensitive) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (sensible-adj e0 y)))
(B (name herida) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (herida-nn e0 y)))
(B (name dolor) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (dolor-nn e0 y)))
(B (name cicatriz) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (cicatriz-nn e0 y)))
(B (name fiebre) (=> (^ (S#DISEASE e0 :0.45) (SS#DISEASE%SYMPTOMS y e0 :0.45)) (fiebre-nn e0 y)))

(B (name doler) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%SYMPTOMS e0 e0 :0.3) (R#SICK y e0 :0.3)) (doler-vb e0 y u1 u2)))
(B (name sangrar) (=> (^ (S#DISEASE e0 :0.3) (SS#DISEASE%SYMPTOMS e0 e0 :0.3) (R#SICK y e0 :0.3)) (sangrar-vb e0 y u1 u2)))

; OF - SYMPTOM
(B (name of-symptom) (=> (S#DISEASE e0 :0.9) (^ (SS#DISEASE%SYMPTOMS x e0) (de-in e1 x y))))

(B (name enfermedadmap) (=> (I#DISEASE x :0.9) (S#DISEASE x)))
;(B (name tipdoenfermedadtypemap) (=> (I#DISEASE%TYPE x :0.9) (SS#DISEASE%TYPE x)))
(B (name curamap) (=> (I#DISEASE%CURE x y :0.9) (SS#DISEASE%CURE x y)))
(B (name tratamientomap) (=> (I#DISEASE%TREATMENT x y :0.9) (SS#DISEASE%TREATMENT x y)))
(B (name sintomasmap) (=> (I#DISEASE%SYMPTOMS x y :0.9) (SS#DISEASE%SYMPTOMS x y)))

; CRIME

(B (name crimen) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (crimen-nn e0 x)))
(B (name delito) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (delito-nn e0 x)))
(B (name delito) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (asalto-nn e0 x)))
(B (name malhecho) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (malhecho-nn e0 x)))
(B (name delincuencia) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (delincuencia-nn e0 x)))

(B (name fechoría) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (fechoría-nn e0 x)))
(B (name violación) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (violación-nn e0 x)))

(B (name conducta-culpable) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (^ (conducta-nn e0 x) (culpable-adj e1 x))))
(B (name criminal-conduct) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (^ (conduct-nn e0 x) (criminal-adj e1 x))))
;(B (name public-wrong) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (^ (public-adj e1 x) (wrong-nn e0 x))))
;(B (name criminal-wrong) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (^ (criminal-adj e1 x) (wrong-nn e0 x))))
;(B (name criminal-act) (=> (S#CRIME e1 :0.45) (SS#CRIME%TYPE x e1 :0.45) (^ (criminal-adj e1 x) (act-nn e0 x))))

; PERPETRATOR
(B (name bandido) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (bandido-nn e0 x)))
(B (name criminal) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (criminal-nn e0 x)))
(B (name criminal2) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (criminal-adj e0 x)))
(B (name delictivo) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (delictivo-nn e0 x)))
(B (name delictivo2) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (delictivo-adj e0 x)))
(B (name delincuente) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (delincuente-nn e0 x)))
(B (name proscrito) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (proscrito-nn e0 x)))
(B (name forajido) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (forajido-nn e0 x)))
(B (name culpable) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (culpable-nn e0 x)))
(B (name reo) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (reo-nn e0 x)))
(B (name malhechor) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (malhechor-nn e0 x)))
(B (name prostituta) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR x e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (prostituta-nn e0 x)))

(B (name rape) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x :e0 0.45)) (rape-nn e0 x)))

(B (name rapev) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-VICTIM y e0 :0.2)) (rape-vb e0 x y u)))

(B (name robar) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (robar-vb e0 x z u2)))
(B (name ratear) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (ratear-vb e0 x z u2)))
(B (name saquear) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (saquear-vb e0 x z u2)))
(B (name pillar) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (pillar-vb e0 x z u2)))
(B (name pillar) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-THEME z e0 :0.2)) (matar-vb e0 x z u2)))

(B (name robo) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (robo-nn e0 x)))
(B (name hurto) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (hurto-nn e0 x)))
(B (name latrocinio) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (latrocinio-nn e0 x)))

(B (name pillaje) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (pillaje-nn e0 x)))
(B (name saqueo) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (saqueo-nn e0 x)))
(B (name botín) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%TYPE x e0 :0.45)) (botín-nn e0 x)))

(B (name ladrón) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR e0 e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (ladrón-nn e0 x)))
(B (name ladronzuelo) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR e0 e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (ladronzuelo-nn e0 x)))
(B (name asaltador) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR e0 e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (asaltador-nn e0 x)))
(B (name saqueador) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%PERPETRATOR e0 e0 :0.3) (R#CRIME-AGENT x e0 :0.3)) (saqueador-nn e0 x)))

(B (name robar) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%TYPE e0 :0.2) (R#CRIME-AGENT x e0 :0.2) (R#CRIME-VICTIM y e0 :0.2)) (robar-vb e0 x y u)))

; FROM - CRIME
;(B (name from-theft) (=> (R#CRIME-VICTIM y :0.9) (^ (SS#TYPE e0) (from-in e1 e0 y))))

(B (name violencia) (=> (^ (S#CRIME x :0.45) (SS#CRIME%TYPE x :0.45)) (violencia-nn e0 x)))

; PUNISHMENT
(B (name castigo) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (castigo-nn e0 x)))
(B (name pena) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (pena-nn e0 x)))
(B (name sentencia) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (sentencia-nn e0 x)))
(B (name penalización) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (penalización-nn e0 x)))
(B (name multa) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (multa-nn e0 x)))
(B (name fine) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (fine-nn e0 x)))
(B (name azote) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (azote-nn e0 x)))
(B (name condena) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (condena-nn e0 x)))
(B (name condena) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (retribución-nn e0 x)))

(B (name pena-de-prisión) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (^ (pena-nn e0 y) (de-in e1 y x) (prisión-nn e2 x))))
(B (name condena-perpetua) (=> (^ (S#CRIME e0 :0.45) (SS#CRIME%PUNISHMENT x e0 :0.45)) (^ (condena-nn e0 x) (perpetua-nn e1 x))))

(B (name castigar) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2) (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2)) (castigar-vb e0 x y u)))
(B (name condenar) (=> (^ (S#CRIME e0 :0.2) (SS#CRIME%PUNISHMENT e0 e0 :0.2) (R#PUNISHMENT-AGENT x e0 :0.2) (R#PUNISHMENT-VICTIM y e0 :0.2)) (condenar-vb e0 x y u)))

; VICTIM
(B (name víctima) (=> (^ (S#CRIME e0 :0.3) (SS#CRIME%VICTIM x e0 :0.3) (R#CRIME-VICTIM x e0 :0.3)) (víctima-nn e0 x)))

(B (name crimenmap) (=> (I#CRIME x :0.9) (S#CRIME x)))
(B (name tipodecrimenmap) (=> (I#CRIME%TYPE x y :0.9) (SS#CRIME%TYPE x y)))
(B (name perpetradorsmap) (=> (I#CRIME%PERPETRATOR x y :0.9) (SS#CRIME%PERPETRATOR x y)))
(B (name castigomap) (=> (I#CRIME%PUNISHMENT x y :0.9) (SS#CRIME%PUNISHMENT x y)))
(B (name victimamap) (=> (I#CRIME%VICTIM x y :0.9) (SS#CRIME%VICTIM x y)))

; CONFINEMENT
; CONFINED_SPACE
(B (name prisión) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (prisión-nn e0 x)))
(B (name cárcel) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (cárcel-nn e0 x)))
(B (name jaula) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (jaula-nn e0 x)))
(B (name mazmorra) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (mazmorra-nn e0 x)))
(B (name calabozo) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (calabozo-nn e0 x)))
(B (name penitenciario) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (penitenciario-nn e0 x)))
(B (name presidio) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (presidio-nn e0 x)))
(B (name callejón-sin-salida) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%CONFINED_SPACE x e0 :0.45)) (^ (callejón-nn e0 x) (sin-in e1 x y) (salida-nn e2 y))))

(B (name encarcelar) (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2) (R#CONFINEMENT-AGENT x e0 :0.2) (R#CONFINEMENT-PATIENT y e0 :0.2)) (encarcelar-vb e0 x y u)))
(B (name confinar) (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2) (R#CONFINEMENT-AGENT x e0 :0.2) (R#CONFINEMENT-PATIENT y e0 :0.2)) (confinar-vb e0 x y u)))
(B (name aprisionar) (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%CONFINED_SPACE e0 e0 :0.2) (R#CONFINEMENT-AGENT x e0 :0.2) (R#CONFINEMENT-PATIENT y e0 :0.2)) (aprisionar-vb e0 x y u)))

; RESTRAINTS
(B (name trampa) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (trampa-nn e0 x)))
(B (name sifón) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (sifón-nn e0 x)))
(B (name neto) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (neto-nn e0 x)))
(B (name esposas) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (esposas-nn e0 x)))
(B (name cadena) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (cadena-nn e0 x)))
(B (name cautiverio) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (cautiverio-nn e0 x)))
(B (name cautiverio) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%RESTRAINTS x e0 :0.45)) (cinturón-nn e0 x)))

(B (name atrapar) (=> (^ (S#CONFINEMENT e0 :0.2) (SS#CONFINEMENT%RESTRAINTS e0 e0 :0.2) (R#CONFINEMENT-AGENT x e0 :0.2) (R#CONFINEMENT-PATIENT y e0 :0.2)) (atrapar-vb e0 x y u)))

; EXIT
(B (name puerta) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (puerta-nn e0 x)))
(B (name escelara) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (escelara-nn e0 x)))
(B (name cuerda) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (cuerda-nn e0 x)))
(B (name trampolín) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (trampolín-nn e0 x)))
(B (name línea-de-vida) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (^ (línea-nn e0 x) (de-in e1 x y) (vida-nn e2 y))))
(B (name escape) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (escape-nn e0 x)))
(B (name escape) (=> (^ (S#CONFINEMENT e0 :0.45) (SS#CONFINEMENT%EXIT x e0 :0.45)) (evasión-nn e0 x)))

(B (name escapar) (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3) (R#ESCAPE-AGENT x e0 :0.3)) (escapar-vb e0 x y u)))
(B (name escapar) (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3) (R#ESCAPE-AGENT x e0 :0.3)) (evadir-vb e0 x y u)))
(B (name salir-de) (=> (^ (S#CONFINEMENT e0 :0.3) (SS#CONFINEMENT%EXIT e0 e0 :0.3) (R#ESCAPE-AGENT x e0 :0.3)) (^ (salir-vb e0 x y u) (de-in e1 e0 z))))
(B (name liberar) (=> (^ (S#CONFINEMENT e0 :0.23) (SS#CONFINEMENT%EXIT e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23) (R#EXIT-PATIENT y e0 :0.23)) (liberar-vb e0 x y u)))

(B (name confinamientomap) (=> (I#CONFINEMENT x :0.9) (S#CONFINEMENT x)))
(B (name espaciosonfinadomap) (=> (I#CONFINEMENT%CONFINED_SPACE x y :0.9) (SS#CONFINEMENT%CONFINED_SPACE x y)))
(B (name restriccionesmap) (=> (I#CONFINEMENT%RESTRAINTS x y :0.9) (SS#CONFINEMENT%RESTRAINTS x y)))
(B (name salidamap) (=> (I#CONFINEMENT%EXIT x y :0.9) (SS#CONFINEMENT%EXIT x y)))

; ENSLAVEMENT
;SERVANT
(B (name esclavo) (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3) (R#ENSLAVEMENT-PATIENT x e0 :0.3)) (esclavo-nn e0 x)))
(B (name esclava) (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3) (R#ENSLAVEMENT-PATIENT x e0 :0.3)) (esclava-nn e0 x)))
(B (name criado) (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%SERVANT e0 e0 :0.3) (R#ENSLAVEMENT-PATIENT x e0 :0.3)) (criado-nn e0 x)))

;OPPRESSION
(B (name esclavitude) (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45)) (esclavitude-nn e0 x)))
(B (name esclavizado) (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45)) (esclavizado-nn e0 x)))
(B (name esclavizar) (=> (^ (S#ENSLAVEMENT e0 :0.2) (SS#ENSLAVEMENT%OPPRESSION e0 e0 :0.2) (R#ENSLAVEMENT-PATIENT y e0 :0.2) (R#ENSLAVEMENT-AGENT x e0 :0.2)) (esclavizar-nn e0 x y u)))

(B (name opresivo) (=> (^ (S#ENSLAVEMENT e0 :0.45) (SS#ENSLAVEMENT%OPPRESSION x e0 :0.45)) (opresivo-adj e0 x)))

;MASTER
(B (name jefe) (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%MASTER e0 e0 :0.3) (R#ENSLAVEMENT-AGENT x e0 :0.3)) (jefe-nn e0 x)))
(B (name negrero) (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%MASTER e0 e0 :0.3) (R#ENSLAVEMENT-AGENT x e0 :0.3)) (negrero-nn e0 x)))
(B (name capataz-de-esclavos) (=> (^ (S#ENSLAVEMENT e0 :0.3) (SS#ENSLAVEMENT%MASTER e0 e0 :0.3) (R#ENSLAVEMENT-AGENT x e0 :0.3)) (^ (capataz-nn e0 x) (de-in e1 x y) (esclavo-nn e2 y))))

(B (name reinar) (=> (^ (S#ENSLAVEMENT e0 :0.33) (SS#ENSLAVEMENT%MASTER e0 e0 :0.33) (R#ENSLAVEMENT-AGENT x e0 :0.33)) (reinar-vb e0 x y u)))

(B (name enslavementmap) (=> (I#ENSLAVEMENT x :0.9) (S#ENSLAVEMENT x)))
(B (name servantmap) (=> (I#ENSLAVEMENT%SERVANT x y :0.9) (SS#ENSLAVEMENT%SERVANT x y)))
(B (name oppressionmap) (=> (I#ENSLAVEMENT%OPPRESSION x y :0.9) (SS#ENSLAVEMENT%OPPRESSION x y)))
(B (name mastermap) (=> (I#ENSLAVEMENT%MASTER x y :0.9) (SS#ENSLAVEMENT%MASTER x y)))


; BODY-OF-WATER

(B (name agua) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45)) (agua-nn e0 x)))
(B (name agua) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45)) (espuma-nn e0 x)))
(B (name agua-de-mar) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45)) (^ (agua-nn e0 x) (de-in e1 x y) (mar-nn e2 y))))

(B (name mar) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45)) (mar-nn e0 y)))
(B (name océano) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45)) (océano-nn e0 y)))
(B (name río) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%TYPE x e0 :0.45)) (río-nn e0 y)))

; OF - BODY_OF_WATER
; (B (name of-body-of-water) (=> (R#MATTER x y :0.9) (^ (SS#TYPE y) (de-in e1 y x))))


; DRINK
; (B (name beber) (=> (^ (S#BODY_OF_WATER u :0.2) (BODY_OF_WATER-DRINK e0 y :0.2) (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2)) (beber-vb e0 x y u2)))
; (B (name engullir) (=> (^ (S#BODY_OF_WATER u :0.2) (BODY_OF_WATER-DRINK e0 y :0.2) (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))  (engullir-vb e0 x y u2)))
; (B (name embeber) (=> (^ (S#BODY_OF_WATER u :0.2) (BODY_OF_WATER-DRINK e0 y :0.2) (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))  (embeber-vb e0 x y u2)))
; (B (name quaff) (=> (^ (S#BODY_OF_WATER u :0.2) (BODY_OF_WATER-DRINK e0 y :0.2) (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))  (quaff-vb e0 x y u2)))
; (B (name sorber) (=> (^ (S#BODY_OF_WATER u :0.2) (BODY_OF_WATER-DRINK e0 y :0.2) (R#DRINKER x e0 :0.2) (R#MATTER y u :0.2))  (sorber-vb e0 x y u2)))

; (B (name bebida) (=> (^ (S#BODY_OF_WATER y :0.45) (BODY_OF_WATER-DRINK x y :0.45)) (bebida-nn e0 x)))
; (B (name trago) (=> (^ (S#BODY_OF_WATER y :0.45) (BODY_OF_WATER-DRINK x y :0.45)) (trago-nn e0 x)))
; (B (name sorbo) (=> (^ (S#BODY_OF_WATER y :0.45) (BODY_OF_WATER-DRINK x y :0.45)) (sorbo-nn e0 x)))
; (B (name tragantada) (=> (^ (S#BODY_OF_WATER y :0.45) (BODY_OF_WATER-DRINK x y :0.45)) (tragantada-nn e0 x)))

; THIRST
; (B (name sed) (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%THIRST x e0 y :0.3) (R#DRINKER x e0 :0.3)) (sed-nn e0 x)))
; (B (name sediento) (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%THIRST e0 e0 y :0.3) (R#DRINKER x e0 :0.3)) (sediento-adj e0 x)))

; OF - THIRST
; (B (name of-thirst) (=> (R#THIRST-OBJECT y x :0.9) (^ (SS#THIRST x e) (de-in e1 x y))))


; MOVEMENT
(B (name fluir) (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.3) (R#STREAMING x e0 :0.3)) (fluir-vb e0 x u1 u2)))
(B (name filtrarse) (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.3) (R#STREAMING x e0 :0.3)) (filtrarse-vb e0 x u1 u2)))
(B (name gotear) (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.3) (R#STREAMING x e0 :0.3)) (gotear-vb e0 x u1 u2)))
(B (name stagnant) (=> (^ (S#BODY_OF_WATER e0 :0.3) (SS#BODY_OF_WATER%MOVEMENT e0 e0 :0.3) (R#STILL x e0 :0.3)) (estancar-vb e0 x u1 u2)))


(B (name corriente) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45)) (corriente-nn e0 y)))
(B (name flujo) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45)) (flujo-nn e0 y)))
(B (name fuga) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45)) (fuga-nn e0 y)))
(B (name onda) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45)) (onda-nn e0 y)))
(B (name marea) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%MOVEMENT y e0 :0.45)) (marea-nn e0 y)))

; OF - MOVEMENT
(B (name of-stream) (=> (R#STREAMING y x :0.9) (^ (SS#MOVEMENT x e) (of-in e1 x y))))

; DANGER
(B (name tsunami) (=> (^ (S#BODY_OF_WATER e0 :0.47) (SS#BODY_OF_WATER%DANGER y e0 :0.47)) (tsunami-nn e0 y)))
(B (name swamp) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45)) (pantano-nn e0 y)))
(B (name mire) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45)) (fango-nn e0 y)))
(B (name submarino) (=> (^ (S#BODY_OF_WATER e0 :0.45) (SS#BODY_OF_WATER%DANGER y e0 :0.45)) (submarino-nn e0 y)))

(B (name drown) (=> (^ (S#BODY_OF_WATER y :0.3) (SS#BODY_OF_WATER%DANGER e0 y :0.3) (R#DROWN-PATIENT x e0 :0.3)) (ahogar-vb e0 x u1 u2)))
(B (name drown) (=> (^ (S#BODY_OF_WATER y :0.3) (SS#BODY_OF_WATER%DANGER e0 y :0.3) (R#DROWN-PATIENT x e0 :0.3)) (sumir-vb e0 x u1 u2)))

(B (name aguamap) (=> (I#BODY_OF_WATER x :0.9) (S#BODY_OF_WATER x)))
;(B (name aguatipomap) (=> (I#BODY_OF_WATER%TYPE x y :0.9) (SS#BODY_OF_WATER%TYPE x y)))
(B (name bebermap) (=> (I#BODY_OF_WATER%DANGER x y :0.9) (SS#BODY_OF_WATER%DANGER x y)))
(B (name fluirmap) (=> (I#BODY_OF_WATER%MOVEMENT x y :0.9) (SS#BODY_OF_WATER%MOVEMENT x y)))

; MATERIAL

; CUT
; (B (name cortar) (=> (^ (S#MATERIAL_MATERIAL e0 :0.3) (SS#MATERIAL_MATERIAL%CORTAR_CUT e0 e0 y :0.3) (R#CUT-AGENT x e0 :0.3)) (cortar-vb e0 x y u2)))
; (B (name cortada) (=> (^ (S#MATERIAL_MATERIAL e0 :0.45) (SS#MATERIAL_MATERIAL%CORTAR_CUT e0 e0 y :0.45)) (^ (nn e1 x y) (cortada-nn e0 x))))
; ;(B (name cortada) (=> (^ (S#MATERIAL_MATERIAL e0 :0.45) (SS#MATERIAL_MATERIAL%CORTAR_CUT e0 e0 y :0.45)) (^ (de-in e1 x y) (cut-nn e0 x))))
; (B (name cortada) (=> (^ (S#MATERIAL_MATERIAL e0 :0.48) (SS#MATERIAL_MATERIAL%CORTAR_CUT e0 e0 y :0.48)) (cortada-nn e0 x)))

; (B (name materialmap) (=> (I#MATERIAL x :0.9) (S#MATERIAL_MATERIAL x)))
; (B (name cutmap) (=> (I#MATERIAL_MATERIAL%CUT x y y :0.9) (SS#MATERIAL_MATERIAL%CORTAR_CUT x y y)))

; ; ORGANISM

; ; GROWTH
; (B (name crecer) (=> (^ (S#ORGANISMO_ORGANISM e0 :0.45) (SS#ORGANISMO_ORGANISM%CRECER_GROW e0 e0 x :0.45)) (crecer-vb e0 x u1 u2)))
; ;(B (name crecimiento2) (=> (^ (S#ORGANISMO_ORGANISM e0 :0.45) (SS#ORGANISMO_ORGANISM%CRECER_GROW e0 e0 y :0.45)) (^ (nn e1 x y) (crecimiento-nn e0 x))))
; ;(B (name de-crecimiento) (=> (^ (S#ORGANISMO_ORGANISM e0 :0.45) (SS#ORGANISMO_ORGANISM%CRECER_GROW e0 e0 y :0.45)) (^ (de-in e1 x y) (crecimiento-nn e0 x))))
; (B (name crecimiento) (=> (^ (S#ORGANISMO_ORGANISM e0 :0.47) (SS#ORGANISMO_ORGANISM%CRECER_GROW e0 e0 y :0.47)) (crecimiento-nn e0 x)))

; (B (name organismmap) (=> (I#ORGANISM x :0.9) (S#ORGANISMO_ORGANISM x)))
; (B (name growmap) (=> (I#ORGANISMO_ORGANISM%GROW x y y :0.9) (SS#ORGANISMO_ORGANISM%CRECER_GROW x y y)))

; BATTLE

(B (name guerra) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (guerra-nn e0 x)))
(B (name lucha) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (lucha-nn e0 x)))
(B (name palea) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (palea-nn e0 x)))
(B (name forcejeo) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (forcejeo-nn e0 x)))
(B (name combate) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (combate-nn e0 x)))
(B (name batalla) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (batalla-nn e0 x)))
(B (name cruzada) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (cruzada-nn e0 x)))

(B (name ataque) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (ataque-nn e0 x)))
;(B (name asalto) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (asalto-nn e0 x)))
(B (name bombardeo-aéreo) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (^ (bombardeo-nn e0 x) (aéreo-adj e1 x))))
(B (name bombardeo) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (bombardeo-nn e0 x)))
(B (name invasión) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%TYPE x e0 :0.45)) (invasión-nn e0 x)))

(B (name combatir) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#BATTLE-AGENT x e0 :0.3)) (combatir-vb e0 x u1 u2)))
(B (name forcejear) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#BATTLE-AGENT x e0 :0.3)) (forcejear-vb e0 x u1 u2)))
(B (name luchar-contra) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#BATTLE-AGENT x e0 :0.3)) (^ (luchar-vb e0 x u1 u2) (contra-in e1 e0 z))))
(B (name luchar) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%TYPE e0 e0 :0.3) (R#BATTLE-AGENT x e0 :0.3)) (luchar-vb e0 x u1 u2)))

(B (name atacar) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (atacar-vb e0 x y u2)))
(B (name asaltar) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (asaltar-vb e0 x y u2)))
(B (name invadir) (=> (^ (S#STRUGGLE e0 :0.2) (SS#STRUGGLE%TYPE e0 e0 :0.2) (R#BATTLE-AGENT x e0 :0.2) (R#BATTLE-ENEMY y e0 :0.2)) (invadir-vb e0 x y u2)))

(B (name luchar-con) (=> (R#BATTLE-ENEMY y x :0.90) (^ (SS#TYPE x) (con-in x y))))
(B (name luchar-contra) (=> (R#BATTLE-ENEMY y x :0.90) (^ (SS#TYPE x) (contra-in x y))))
(B (name luchar-de) (=> (R#BATTLE-AGENT y x :0.90) (^ (SS#TYPE x) (de-in x y))))
(B (name luchar-en) (=> (R#BATTLE-AGENT y x :0.90) (^ (SS#TYPE x) (en-in x y))))

(B (name enemigo) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3) (R#BATTLE-ENEMY x u :0.3)) (enemigo-nn e1 x)))
(B (name adversario) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3) (R#BATTLE-ENEMY x u :0.3)) (adversario-nn e1 x)))
(B (name rival) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3) (R#BATTLE-ENEMY x u :0.3)) (rival-nn e1 x)))
(B (name contrincante) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3) (R#BATTLE-ENEMY x u :0.3)) (contrincante-nn e1 x)))
(B (name contrario) (=> (^ (S#STRUGGLE e0 :0.3) (SS#STRUGGLE%ADVERSARY x e0 :0.3) (R#BATTLE-ENEMY x u :0.3)) (contrario-nn e1 x)))

(B (name enemigo-de) (=> (R#BATTLE-AGENT y e0 :0.90) (^ (R#BATTLE-ENEMY x e0) (de-in e1 x y))))


(B (name soldado) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY y e0 :0.45)) (soldado-nn e0 y)))
(B (name militar) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY y e0 :0.45)) (militar-nn e0 y)))
(B (name ejército) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%ADVERSARY y e0 :0.45)) (ejército-nn e0 y)))



; (B (name armo) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (armo-nn e0 y)))
; (B (name pistola) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (pistola-nn e0 y)))
; (B (name cañón) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (cañón-nn e0 y)))
; (B (name fusil) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (fusil-nn e0 y)))
; (B (name cuchillo) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (cuchillo-nn e0 y)))
; (B (name bomba) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (bomba-nn e0 y)))
; (B (name escopeta) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (escopeta-nn e0 y)))
; (B (name arma-de-fuego) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (^ (arma-nn e0 y) (de-in e1 y z) (fuego-nn e2 z))))
; (B (name artillería) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (artillería-nn e0 y)))
; (B (name revólver) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (revólver-nn e0 y)))
; (B (name espada) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (espada-nn e0 y)))
; (B (name estoque) (=> (^ (S#STRUGGLE e0 :0.45) (SS#STRUGGLE%WEAPON y e0 :0.45)) (estoque-nn e0 y)))

;(B (name weapon) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (weapon-nn e0 x)))

(B (name armo) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (armo-nn e0 x)))
(B (name pistola) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (pistola-nn e0 x)))
(B (name cañón) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (cañón-nn e0 x)))
(B (name fusil) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (fusil-nn e0 x)))
(B (name cuchillo) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (cuchillo-nn e0 x)))
(B (name bomba) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (bomba-nn e0 x)))
(B (name escopeta) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (escopeta-nn e0 x)))
(B (name arma-de-fuego) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (^ (arma-nn e0 x) (de-in e1 x z) (fuego-nn e2 z))))
(B (name artillería) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (artillería-nn e0 x)))
(B (name revólver) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (revólver-nn e0 x)))
(B (name espada) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (espada-nn e0 x)))
(B (name estoque) (=> (^ (S#STRUGGLE e0 :0.33) (SS#STRUGGLE%TYPE x e0 :0.33) (R#WEAPON x e0 :0.33)) (estoque-nn e0 x)))

(B (name battlemap) (=> (I#STRUGGLE x :0.9) (S#STRUGGLE x)))
;(B (name fightmap) (=> (I#STRUGGLE%TYPE x y :0.9) (SS#STRUGGLE%STYPE x y)))
(B (name enemymap) (=> (I#STRUGGLE%ADVERSARY x y y :0.9) (SS#STRUGGLE%ADVERSARY x y y)))
;(B (name weaponmap) (=> (I#STRUGGLE%WEAPON x y y :0.9) (SS#STRUGGLE%WEAPON x y y)))


; ABYSS
;TYPE
(B (name abismo) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (abismo-nn e0 x)))
(B (name infierno) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (infierno-nn e0 x)))
(B (name sumidero) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (sumidero-nn e0 x)))
(B (name sima) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (sima-nn e0 x)))
(B (name pozo) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (pozo-nn e0 x)))
(B (name hoyo) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (hoyo-nn e0 x)))
(B (name foso) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (foso-nn e0 x)))
(B (name fosa) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (fosa-nn e0 x)))
(B (name cueva) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (cueva-nn e0 x)))
(B (name caverna) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (caverna-nn e0 x)))
(B (name abysm) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (abysm-nn e0 x)))
(B (name zanja) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (zanja-nn e0 x)))
(B (name hueco) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (hueco-nn e0 x)))
(B (name hoyo-negro) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (^ (hoyo-nn e1 x) (negro-adj e0 x))))
(B (name agujero-negro) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE x e0 :0.45)) (^ (agujero-nn e1 x) (negro-adj e0 x))))

(B (name abisal) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 e0 :0.45)) (abisal-adj e0 x)))
(B (name abismal) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 e0 :0.45)) (abismal-adj e0 x)))
(B (name hueco-adj) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%TYPE e0 e0 e0 :0.45)) (hueco-adj e0 x)))

; DEPTH
(B (name profundidad) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45)) (profundidad-nn e0 x)))
(B (name deep) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH x e0 :0.45)) (deep-nn e0 x)))
(B (name profundo) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (profundo-adj e0 x)))
(B (name hondo) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%DEPTH e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (hondo-adj e0 x)))
(B (name profundamente) (=> (^ (S#ABYSS e0 :0.45) (SS#ABYSS%DEPTH e0 e0 :0.45)) (profundamente-rb e0 x)))

#(B (name depth-of) (=> (R#ABYSS-THEME y x :0.90) (^ (SS#DEPTH x) (of-in e1 x y))))

; ENTRANCE
WEALTH_AND_SOCIAL_CLASS

(B (name empujar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (empujar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name empujar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (empujar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name empujar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (empujar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name empujar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (empujar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name empujar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (empujar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name conducir-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (conducir-vb e0 x y u2) (en-in e1 e0 z))))
(B (name conducir-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (conducir-vb e0 x y u2) (en-in e1 e0 z))))
(B (name conducir-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (conducir-vb e0 x y u2) (en-in e1 e0 z))))
(B (name conducir-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (conducir-vb e0 x y u2) (a-in e1 e0 z))))
(B (name conducir-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (conducir-vb e0 x y u2) (a-in e1 e0 z))))
(B (name chupar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (chupar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name chupar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (chupar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name chupar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (chupar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name chupar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (chupar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name chupar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (chupar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name arrastrar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (arrastrar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name arrastrar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (arrastrar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name arrastrar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (arrastrar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name arrastrar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (arrastrar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name arrastrar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (arrastrar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name descender-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (descender-vb e0 x y u2) (en-in e1 e0 z))))
(B (name descender-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (descender-vb e0 x y u2) (en-in e1 e0 z))))
(B (name descender-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (descender-vb e0 x y u2) (en-in e1 e0 z))))
(B (name descender-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (descender-vb e0 x y u2) (a-in e1 e0 z))))
(B (name descender-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (descender-vb e0 x y u2) (a-in e1 e0 z))))
(B (name hundirse-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (hundirse-vb e0 x y u2) (en-in e1 e0 z))))
(B (name hundirse-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (hundirse-vb e0 x y u2) (en-in e1 e0 z))))
(B (name hundirse-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (hundirse-vb e0 x y u2) (en-in e1 e0 z))))
(B (name hundirse-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (hundirse-vb e0 x y u2) (a-in e1 e0 z))))
(B (name hundirse-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (hundirse-vb e0 x y u2) (a-in e1 e0 z))))
(B (name caída-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (caída-vb e0 x y u2) (en-in e1 e0 z))))
(B (name caída-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (caída-vb e0 x y u2) (en-in e1 e0 z))))
(B (name caída-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (caída-vb e0 x y u2) (en-in e1 e0 z))))
(B (name caída-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (caída-vb e0 x y u2) (a-in e1 e0 z))))
(B (name caída-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (caída-vb e0 x y u2) (a-in e1 e0 z))))
(B (name tirar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (tirar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name tirar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (tirar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name tirar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (tirar-vb e0 x y u2) (en-in e1 e0 z))))
(B (name tirar-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (tirar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name tirar-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (tirar-vb e0 x y u2) (a-in e1 e0 z))))
(B (name caer-en) (=> (^ (SS#ABYSS%ENTRANCE e0 e2 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (S#ABYSS e2) (SS#TYPE z e2) (caer-vb e0 x y u2) (en-in e1 e0 z))))
(B (name caer-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#POVERTY z) (caer-vb e0 x y u2) (en-in e1 e0 z))))
(B (name caer-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.2) (R#ABYSS-THEME y e2 :0.2) (R#ABYSS-CAUSE x e2 :0.2)) (^ (TS#WEALTH_AND_SOCIAL_CLASS z) (caer-vb e0 x y u2) (en-in e1 e0 z))))

(B (name caer-en) (=> (^ (S#ABYSS e0 :0.2) (SS#ABYSS%ENTRANCE e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (^ (caer-vb e0 x y u2) (en-in e1 e0 z))))

; EXIT
; Not sure about the translations of these for Spanish

(B (name superarla) (=> (^ (S#ABYSS e0 :0.3) (SS#ABYSS%EXIT e0 e0 :0.3) (R#ABYSS-THEME x e0 :0.3)) (superarla-vb e0 x y u)))

(B (name abyssmap) (=> (I#ABYSS x :0.9) (S#ABYSS x)))
;(B (name abysstypemap) (=> (I#ABYSS%TYPE x y :0.9) (SS#ABYSS%TYPE x y)))
(B (name abysstypemap) (=> (I#ABYSS%DEPTH x y :0.9) (SS#ABYSS%DEPTH x y)))
(B (name abyssmap) (=> (I#ABYSS%ENTRANCE x y :0.9) (SS#ABYSS%ENTRANCE x y)))
(B (name abismosalidamap) (=> (I#ABYSS%EXIT x y :0.9) (SS#ABYSS%EXIT x y)))

; PHYSICAL_BURDEN
; WEIGHT
(B (name carga) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (carga-nn e0 x)))
(B (name peso) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (peso-nn e0 x)))
(B (name cargo) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (cargo-nn e0 x)))
(B (name gravamen) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (gravamen-nn e0 x)))
(B (name lastre) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (lastre-nn e0 x)))
(B (name anchor) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT x e0 :0.45)) (ancla-nn e0 x)))

(B (name pesado) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45)) (pesado-adj e0 x)))

(B (name cargar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2) (R#BURDEN-CAUSE x e0 :0.2) (R#BURDEN-VICTIM y e0 :0.2)) (cargar-vb e0 x y u)))
(B (name arrastrar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2) (R#BURDEN-CAUSE x e0 :0.2) (R#BURDEN-VICTIM y e0 :0.2)) (arrastrar-vb e0 x y u)))
(B (name cargarse) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.2) (R#BURDEN-CAUSE x e0 :0.2) (R#BURDEN-VICTIM y e0 :0.2)) (cargarse-vb e0 x y u)))
(B (name ponderar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45)) (ponderar-vb e0 x y u)))
(B (name pesar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%WEIGHT e0 e0 :0.45)) (pesar-vb e0 x y u)))

;RELIEF
(B (name alivio) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (alivio-nn e0 x)))
(B (name facilidad) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (facilidad-nn e0 x)))
(B (name socorro) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.45)) (socorro-nn e0 x)))

(B (name aligerar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.2) (R#CAUSE-RELIEF x e0) (R#BURDEN-VICTIM y e0 :0.2)) (aligerar-vb e0 x y u)))
(B (name aliviar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.2) (SS#PHYSICAL_BURDEN%RELIEF x e0 :0.2) (R#CAUSE-RELIEF x e0) (R#BURDEN-VICTIM y e0 :0.2)) (aliviar-vb e0 x y u)))



:PHYSICAL DISTRESS
(B (name insostenible) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45)) (insostenible-adj e0 y)))
(B (name incómodo) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.45)) (incómodo-adj e0 y)))

(B (name presión) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS x e0 :0.45)) (presión-nn e0 x)))
(B (name tensión) (=> (^ (S#PHYSICAL_BURDEN e0 :0.45) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS x e0 :0.45)) (tensión-nn e0 x)))

(B (name abrumar) (=> (^ (S#PHYSICAL_BURDEN e0 :0.3) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.3) (R#BURDEN-CAUSE x e0 :0.3)) (abrumar-vb e0 x y u)))
(B (name suffer) (=> (^ (S#PHYSICAL_BURDEN e0 :0.3) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS e0 e0 :0.3) (R#BURDEN-PATIENT x e0 :0.3)) (sufrir-vb e0 x y u)))

(B (name burdenmap) (=> (I#PHYSICAL_BURDEN  x :0.9) (S#PHYSICAL_BURDEN x)))
(B (name weightmap) (=> (I#PHYSICAL_BURDEN%WEIGHT x y :0.9) (SS#PHYSICAL_BURDEN%WEIGHT x y)))
(B (name reliefmap) (=> (I#PHYSICAL_BURDEN%RELIEF x y :0.9) (SS#PHYSICAL_BURDEN%RELIEF x y)))
(B (name physical-distressmap) (=> (I#PHYSICAL_BURDEN%PHYSICAL_DISTRESS x y :0.9) (SS#PHYSICAL_BURDEN%PHYSICAL_DISTRESS x y)))

; PHYSICAL HARM
; TYPE
(B (name lastimar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (lastimar-vb e0 x y u2)))
(B (name lastimarían) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (lastimarían-vb e0 x y u2)))
(B (name pegar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (pegar-vb e0 x y u2)))
(B (name herir) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (herir-vb e0 x y u2)))
(B (name golpear) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (golpear-vb e0 x y u2)))
(B (name dañar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (dañar-vb e0 x y u2)))
(B (name aplastar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (aplastar-vb e0 x y u2)))
(B (name perjudicar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (perjudicar-vb e0 x y u2)))
(B (name atornillar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (atornillar-vb e0 x y u2)))
(B (name torturar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (torturar-vb e0 x y u2)))
(B (name mutilar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (mutilar-vb e0 x y u2)))
(B (name traumatizar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (traumatizar-vb e0 x y u2)))
(B (name lesionar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (lesionar-vb e0 x y u2)))
(B (name cojear) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (cojear-vb e0 x y u2)))
(B (name doler) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (doler-vb e0 x y u2)))
;##RI: I had to add this, even though I think it's incorrect spanish, because the tagger thinks this is the lemma for "hurt"
(B (name doler) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (dolar-vb e0 x y u2)))
(B (name flagelar) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.2) (R#HARM-VICTIM y e0 :0.2) (R#HARM-AGENT x e0 :0.2)) (flagelar-vb e0 x y u2)))


(B (name dolientes) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.3) (R#HARM-VICTIM x e0 :0.3)) (dolientes-adj e0 x)))
(B (name doliente) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%TYPE e0 e0 :0.3) (R#HARM-VICTIM x e0 :0.3)) (dolientes-adj e0 x)))

(B (name lacerante) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (lacerante-nn e0 x)))

(B (name daño) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (daño-nn e0 x)))
(B (name aglomeración) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (aglomeración-nn e0 x)))
(B (name perjuicio) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (perjucio-nn e0 x)))
(B (name tortura) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (tortura-nn e0 x)))
(B (name trauma) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (trauma-nn e0 x)))
(B (name lesión) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (lesión-nn e0 x)))
(B (name tornillo) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (tornillo-nn e0 x)))
(B (name hit) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%TYPE x e0 :0.45)) (golpe-nn e0 x)))



;RESTRAINT
(B (name cojear) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRICTION e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (cojear-vb e0 x y u)))
(B (name abrumared) (=> (^ (S#PHYSICAL_HARM e0 :0.23) (SS#PHYSICAL_HARM%RESTRICTION e0 e0 :0.23) (R#HARM-AGENT x e0 :0.23) (R#HARM-VICTIM y e0 :0.23)) (abrumar-vb e0 x y u)))

;PROTECTION
(B (name escudo) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (escudo-nn e0 x)))
(B (name abrigo) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (abrigo-nn e0 x)))
(B (name protección) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (protección-nn e0 x)))

(B (name proteger) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.2) (R#PROTECT-PATIENT y e0 :0.2) (R#PROTECT-AGENT x e0 :0.2)) (proteger-vb e0 x y u2)))
(B (name cubrir) (=> (^ (S#PHYSICAL_HARM e0 :0.2) (SS#PHYSICAL_HARM%PROTECTION e0 e0 :0.2) (R#PROTECT-PATIENT y e0 :0.2) (R#PROTECT-AGENT x e0 :0.2)) (cubrir-vb e0 x y u2)))

(B (name evasión) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (evasión-nn e0 x)))
(B (name evasión-de-impuestos) (=> (^ (S#PHYSICAL_HARM e0 :0.45) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.45)) (^ (evasión-nn e0 x) (de-in e1 y e2) (impuesto-vb e2 u v w))))

(B (name evadir) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.3) (R#EVADE-AGENT x e0 :0.3)) (evadir-vb e0 x y u)))
(B (name eludir) (=> (^ (S#PHYSICAL_HARM e0 :0.3) (SS#PHYSICAL_HARM%PROTECTION x e0 :0.3) (R#EVADE-AGENT x e0 :0.3)) (eludir-vb e0 x y u)))

(B (name from-theft) (=> (R#HARM-VICTIM y :0.9) (^ (S#PHYSICAL_HARM-PROTECTION e0) (from-in e1 e0 y))))

(B (name physical-harm-map) (=> (I#PHYSICAL_HARM  x :0.9) (S#PHYSICAL_HARM x)))
;(B (name physical-harm-map) (=> (I#PHYSICAL_HARM%TYPE x y :0.9) (SS#PHYSICAL_HARM%TYPE x y)))
(B (name restraint-map) (=> (I#PHYSICAL_HARM%RESTRAINT x y :0.9) (SS#PHYSICAL_HARM%RESTRAINT x y)))
(B (name physical-harm-protectionmap) (=> (I#PHYSICAL_HARM%PROTECTION x y :0.9) (SS#PHYSICAL_HARM%PROTECTION x y)))

; MAZE
; CONFUSING PATHWAYS
(B (name telaraña) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (telaraña-nn e0 x)))
(B (name nudo) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (nudo-nn e0 x)))
(B (name laberinto) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%CONFUSING_PATHWAYS x e0 :0.45)) (laberinto-nn e0 x)))

; NAVIGATION
(B (name navegar-por) (=> (^ (S#MAZE e0 :0.3) (SS#MAZE%NAVIGATION e0 e0 :0.3) (R#NAVIGATION-AGENT x e0 :0.3)) (^ (navegar-vb e0 x y u) (por-in e1 e0 z))))

; OBSTRUCTION
(B (name enredo) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45)) (enredo-nn e0 x)))
(B (name captura) (=> (^ (S#MAZE e0 :0.45) (SS#MAZE%OBSTRUCTION x e0 :0.45)) (captura-nn e0 x)))

(B (name coger) (=> (^ (S#MAZE e0 :0.23) (SS#MAZE%OBSTRUCTION e0 e0 :0.23) (R#OBSTRUCTION-AGENT x e0 :0.23) (R#OBSTRUCTION-PATIENT y e0 :0.23)) (coger-vb e0 x y u)))
(B (name enredo) (=> (^ (S#MAZE e0 :0.3) (SS#MAZE%OBSTRUCTION e0 e0 :0.3) (R#OBSTRUCTION-PATIENT y e0 :0.3)) (enredo-vb e0 u y u1)))

(B (name mazemap) (=> (I#MAZE x :0.9) (S#MAZE x)))
(B (name confusing-pathwaysmap) (=> (I#MAZE%CONFUSING_PATHWAYS x :0.9) (SS#MAZE%CONFUSING_PATHWAYS x)))
(B (name navigatemap) (=> (I#MAZE%NAVIGATION x y :0.9) (SS#MAZE%NAVIGATION x y)))
(B (name obstructionmap) (=> (I#MAZE%OBSTRUCTION x y :0.9) (SS#MAZE%OBSTRUCTION x y)))

; LOW POINT
; BOTTOM OF ECONOMIC SCALE
(B (name bajo-la-linea) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x e0 :0.45)) (^ (bajo-nn e0 x) (la-in e1 x y) (linea-nn e2 y))))
(B (name fondo) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x e0 :0.45)) (fondo-nn e0 x)))
;(B (name low) (=> (^ (S#LOW_POINT e0 :0.45) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE e0 e0 :0.45)) (bajo-adj e0 x)))

;MOVEMENT DOWNWARD
(B (name deslizar) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (deslizar-vb e0 x y z))))
(B (name caer) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (caer-vb e0 x y z))))
(B (name deslizarse) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (deslizarse-vb e0 x y z))))
(B (name caerse) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (caerse-vb e0 x y z))))
(B (name voltear) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (voltear-vb e0 x y z))))
(B (name hundir) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (hundir-vb e0 x y z))))
(B (name hundirse) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (hundirse-vb e0 x y z))))
(B (name sumergir) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (sumergir-vb e0 x y z))))
(B (name sumergirse) (=> (^ (SS#LOW_POINT%MOVEMENT_DOWNWARD e0 e1 :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (sumergirse-vb e0 x y z))))

;MOVEMENT UPWARD
(B (name sobreponer-a) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 e2 :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e2) (SS#BOTTOM_OF_ECONOMIC_SCALE u e2 ) (sobreponer-vb e0 x y z) (a-in e1 e0 y))))
(B (name resurgir-de) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 e2 :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e2) (SS#BOTTOM_OF_ECONOMIC_SCALE u e2 ) (resurgir-vb e0 x y z) (de-in e1 e0 y))))
(B (name subir) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 e1 :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (subir-vb e0 x y z))))
(B (name saltar) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 e1 :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (saltar-vb e0 x y z))))
(B (name brincar) (=> (^ (SS#LOW_POINT%MOVEMENT_UPWARD e0 e1 :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#LOW_POINT e1) (SS#BOTTOM_OF_ECONOMIC_SCALE u e1 ) (brincar-vb e0 x y z))))

(B (name bajo-puntomap) (=> (I#LOW-POINT x :0.9) (S#LOW_POINT x)))
(B (name parte-inferior-econ-scale-map) (=> (I#LOW_POINT%BOTTOM-OF-ECONOMIC-SCALE x y :0.9) (SS#LOW_POINT%BOTTOM_OF_ECONOMIC_SCALE x y)))
(B (name movimiento-hacia-abajomap) (=> (I#LOW_POINT%MOVEMENT_DOWNWARD x y :0.9) (SS#LOW_POINT%MOVEMENT_DOWNWARD x y)))
(B (name movimiento-ascendentemap) (=> (I#LOW_POINT%MOVEMENT_UPWARD x y :0.9) (SS#LOW_POINT%MOVEMENT_UPWARD x y)))

; HIGH POINT

; TOP OF ECONOMIC SCALE

(B (name pico) (=> (^ (S#HIGH_POINT e0 :0.45) (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45)) (pico-nn e0 x)))
(B (name cima) (=> (^ (S#HIGH_POINT e0 :0.45) (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45)) (cima-nn e0 x)))
(B (name cumbre) (=> (^ (S#HIGH_POINT e0 :0.45) (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45)) (cumbre-nn e0 x)))
(B (name cresta) (=> (^ (S#HIGH_POINT e0 :0.45) (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45)) (cresta-nn e0 x)))
(B (name cresta) (=> (^ (S#HIGH_POINT e0 :0.45) (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x e0 :0.45)) (^ (parte-nn e0 x) (superior-adj e1 x))))

;MOVEMENT BACKWARD DOWNWARD

(B (name caer) (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (caer-vb e0 x y u1))))
(B (name bajar) (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (bajar-vb e0 x y u1))))
(B (name deslizar) (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (deslizar-vb e0 x y u1))))
(B (name deslizarse) (=> (^ (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD e0 a :0.3) (R#MOVE-D-PATIENT x e0 :0.3)) (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (deslizarse-vb e0 x y u1))))

;MOVEMENT FORWARD UPWARD

(B (name escalar) (=> (^ (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (escalar-vb e0 x y u1))))
(B (name subir) (=> (^ (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD e0 a :0.3) (R#MOVE-U-PATIENT x e0 :0.3)) (^ (S#HIGH_POINT a) (SS#TOP_OF_ECONOMIC_SCALE b a) (subir-vb e0 x y u1))))

(B (name highpointmap) (=> (I#HIGH_POINT x :0.9) (S#HIGH_POINT x)))
(B (name top-of-econ-scale-map) (=> (I#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x y :0.9) (SS#HIGH_POINT%TOP_OF_ECONOMIC_SCALE x y)))
(B (name movement-downwardmap) (=> (I#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD x y :0.9) (SS#HIGH_POINT%MOVEMENT_BACKWARD_DOWNWARD x y)))
(B (name movement-upwardmap) (=> (I#HIGH_POINT%MOVEMENT_FORWARD_UPWARD x y :0.9) (SS#HIGH_POINT%MOVEMENT_FORWARD_UPWARD x y)))

: RESOURCE
; SUBSTANCE
(B (name masa) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%RESOURCE_SUBSTANCE x e0 :0.45)) (masa-nn e0 x)))
(B (name material) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%RESOURCE_SUBSTANCE x e0 :0.45)) (material-nn e0 x)))
(B (name concentración) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%RESOURCE_SUBSTANCE x e0 :0.45)) (concentración-nn e0 x)))
(B (name concentrado) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%RESOURCE_SUBSTANCE x e0 :0.45)) (concentrado-nn e0 x)))

;QUANTITY
(B (name caudal) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.45)) (caudal-nn e0 x)))
(B (name cut) (=> (^ (S#RESOURCE e0 :0.47) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.47)) (recorte-nn e0 x)))
(B (name reduction) (=> (^ (S#RESOURCE e0 :0.47) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.47)) (reducción-nn e0 x)))
(B (name reduction) (=> (^ (S#RESOURCE e0 :0.47) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.47)) (^ (reducción-nn e0 x) (TS#TAXATION u))))
(B (name tax-cuts) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE x e0 :0.45)) (^ (recorte-nn e0 x) (TS#TAXATION u))))

(B (name agotar) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45)) (agotar-vb e0 x y u)))
(B (name agotar) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%QUANTITY_SIZE y e0 :0.45)) (cortar-vb e0 x y u)))

;DEVELOP RESOURCES
(B (name inertir) (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.3) (R#DEVELOPER x e0 :0.3)) (inertir-vb e0 x y u)))
(B (name depósito) (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.3) (R#DEVELOPER x e0 :0.3)) (depósito-vb e0 x y u)))
;(B (name crecer) (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.3) (R#DEVELOPER x e0 :0.3)) (crecer-vb e0 x y u)))
(B (name acumular) (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.3) (R#DEVELOPER x e0 :0.3)) (acumular-vb e0 x y u)))
(B (name acumular) (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.3) (R#DEVELOPER x e0 :0.3)) (amasar-vb e0 x y u)))
(B (name acumular) (=> (^ (S#RESOURCE e0 :0.3) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.3) (R#DEVELOPER x e0 :0.3)) (^ (TS#WEALTH y) (ampliar-vb e0 x y u))))

(B (name banco) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45)) (banco-nn e0 x)))
(B (name inversión) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45)) (inversión-nn e0 x)))
(B (name acumulación) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45)) (acumulación-nn e0 x)))
(B (name crecimiento) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DEVELOP_RESOURCES x e0 :0.45)) (crecimiento-nn e0 x)))

;DISTRIBUTION
(B (name transferir) (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION x e0 :0.33) (R#DISTRIBUTOR x e0 :0.33)) (transferir-vb e0 x y u)))
(B (name distribuir) (=> (^ (S#RESOURCE e0 :0.33) (SS#RESOURCE%DISTRIBUTION x e0 :0.33) (R#DISTRIBUTOR x e0 :0.33)) (distribuir-vb e0 x y u)))

(B (name distribución) (=> (^ (S#RESOURCE e0 :0.45) (SS#RESOURCE%DISTRIBUTION x e0 :0.45)) (distribución-nn e0 x)))

(B (name resourcemap) (=> (I#RESOURCE x :0.9) (S#RESOURCE x)))
(B (name substancemap) (=> (I#RESOURCE%SUBSTANCE x y :0.9) (SS#RESOURCE%RESOURCE_SUBSTANCE x y)))


(B (name quantitymap) (=> (I#RESOURCE%QUANTITY_SIZE x y :0.9) (SS#RESOURCE%QUANTITY_SIZE x y)))
(B (name distributionmap) (=> (I#RESOURCE%DISTRIBUTION x y :0.9) (SS#RESOURCE%DISTRIBUTION x y)))
(B (name develop-resourcesmap) (=> (I#RESOURCE%DEVELOP_RESOURCES x y :0.9) (SS#RESOURCE%DEVELOP_RESOURCES x y)))

; ;HUMAN-BODY
; ;DEATH
; (B (name dying) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (die-vb e0 x y u)))
; (B (name breathe-last-breath) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (breathe-vb e0 x y u) (last-adj e1 y) (breath-nn e2 y))))
; (B (name buy-the-farm) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (buy-vb e0 x y u) (farm-nn e1 y))))
; (B (name croak) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (croak-vb e0 x y u)))
; (B (name decay) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (decay-vb e0 x y u)))
; (B (name expire) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (expire-vb e0 x y u)))
; (B (name pass-away) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (pass-vb e0 x y u) (away-rb e1 e0))))
; (B (name perish) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (perish-vb e0 x y u)))
; (B (name rot) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (rot-vb e0 x y u)))
; (B (name rot-away) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (rot-vb e0 x y u) (away-rb e1 e0))))
; (B (name take-last-breath) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (^ (take-vb e0 x y u) (last-adj e1 y) (breath-nn e2 y))))
; (B (name wither) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (wither-vb e0 x y u)))
; (B (name dead) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (dead-adj e0 x)))
; (B (name deceased) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (deceased-adj e0 x)))
; (B (name death) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATHx :0.3 e0) (R#DEATH-PATIENT x e0 :0.3)) (death-nn e0 x)))
; (B (name deceasedn) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATH e0 e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (deceased-nn e0 x)))
; (B (name fatality) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%DEATHx :0.3 e0) (R#DEATH-PATIENT x e0 :0.3)) (fatality-nn e0 x)))

; ;LIVING
; (B (name live) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (live-vb e0 x y u)))
; (B (name thrive) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (thrive-vb e0 x y u)))
; (B (name flourish) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (flourish-vb e0 x y u)))
; (B (name alive) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%LIVING e0 e0 :0.3) (R#LIVING-PATIENT x e0 :0.3)) (alive-adj e0 y)))

; ;HEALTH
; (B (name reviving) (=> (^ (S#HUMAN-BODY e0 :0.3) (SS#HUMAN-BODY%HEALTH x e0 :0.3) (R#DEATH-PATIENT x e0 :0.3)) (revive-vb e0 x y u)))

; ;COMPONENT
; ;##RI: probably different inferences for different components
; (B (name backbone) (=> (^ (S#HUMAN-BODY e0 :0.45) (SS#HUMAN-BODY%COMPONENT x e0 :0.45)) (backbone-nn e0 x)))
; (B (name face) (=> (^ (S#HUMAN-BODY e0 :0.45) (SS#HUMAN-BODY%COMPONENT x e0 :0.45)) (face-nn e0 x)))
; (B (name hand) (=> (^ (S#HUMAN-BODY e0 :0.45) (SS#HUMAN-BODY%COMPONENT x e0 :0.45)) (hand-nn e0 x)))

; (B (name human-bodymap) (=> (I#HUMAN-BODY x :0.9) (S#HUMAN-BODY x)))
; (B (name human-body-deathmap) (=> (I#HUMAN-BODY%HUMAN-BODY-DEATHx :0.9) (SS#HUMAN-BODY%DEATH x y)))
; (B (name human-body-livingmap) (=> (I#HUMAN-BODY%HUMAN-BODY-LIVINGx :0.9) (SS#HUMAN-BODY%LIVING x y)))
; (B (name human-body-healthmap) (=> (I#HUMAN-BODY%HUMAN-BODY-HEALTH x y :0.9) (SS#HUMAN-BODY%HEALTH x y)))
; (B (name human-body-componentmap) (=> (I#HUMAN-BODY%HUMAN-BODY-COMPONENT x y :0.9) (SS#HUMAN-BODY%COMPONENT x y)))

; ;VICTIM
; ;SUFFERER
; (B (name threatened) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%SUFFERER x e0 :0.3) (R#VICTIMIZE-PATIENT x e0 :0.3)) (threatened-adj e0 x)))
; (B (name victim) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%SUFFERER x e0 :0.3) (R#VICTIMIZE-PATIENT x e0 :0.3)) (victim-nn e0 x)))
; (B (name prey) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%SUFFERER x e0 :0.3) (R#VICTIMIZE-PATIENT x e0 :0.3)) (prey-nn e0 x)))
; (B (name sufferer) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%SUFFERER x:0.3 e0) (R#VICTIMIZE-PATIENT x e0 :0.3)) (sufferer-nn e0 x)))
; ;VICTIMIZER
; (B (name vampire) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%VICTIMIZER x e0 :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (vampire-nn e0 x)))
; (B (name victimizer) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%VICTIMIZER x e0 :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (victimizer-nn e0 x)))
; (B (name dracula) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%VICTIMIZER x e0 :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (dracula-nn e0 x)))
; (B (name victimize) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%VICTIMIZER e0 e0 :0.3) (R#VICTIMIZE-AGENT x e0 :0.3)) (victimize-vb e0 x y u)))
; ;CHAMPION
; (B (name champion) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%CHAMPION x e0 :0.3) (R#CHAMPION x e0 :0.3)) (champion-nn e0 x)))
; (B (name knight) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%CHAMPION x e0 :0.3) (R#CHAMPION x e0 :0.3)) (knight-nn e0 x)))
; (B (name superman) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%CHAMPION x e0 :0.3) (R#CHAMPION x e0 :0.3)) (superman-nn e0 x)))
; (B (name superhero) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%CHAMPION x e0 :0.3) (R#CHAMPION x e0 :0.3)) (superhero-nn e0 x)))
; (B (name save) (=> (^ (S#VICTIM_ES e0 :0.3) (SS#VICTIM_ES%CHAMPION e0 e0 :0.3) (R#CHAMPION x e0 :0.3)) (victimize-vb e0 x y u)))

; (B (name victimmap) (=> (I#VICTIM x :0.9) (S#VICTIM_ES x)))
; (B (name sufferermap) (=> (I#VICTIM_ES%SUFFERER x y :0.9) (SS#VICTIM_ES%SUFFERER x y)))
; (B (name victimizermap) (=> (I#VICTIM_ES%VICTIMIZER x y :0.9) (SS#VICTIM_ES%VICTIMIZER x y)))
; (B (name championmap) (=> (I#VICTIM_ES%CHAMPION x y :0.9) (SS#VICTIM_ES%CHAMPION x y)))

; BUILDING
; TYPE
(B (name casa) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (casa-nn e0 x)))
(B (name palacio) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (palacio-nn e0 x)))
(B (name factory) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE e0 e0 :0.45)) (fabricá-vb e0 x y z)))
(B (name factory) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%TYPE x e0 :0.45)) (fabricá-nn e0 x)))

; STRUCTURE
(B (name estructura) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (estructura-nn e0 x)))
(B (name edificio) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (edificio-nn e0 x)))
;(B (name fundación) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (fundación-nn e0 x)))
(B (name sótano) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (sótano-nn e0 x)))
(B (name construcción) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (construcción-nn e0 x)))
;(B (name form) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (forma-nn e0 x)))

; CREATION_DESTRUCTION
(B (name construir) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (construir-vb e0 x y u)))
(B (name edificar) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (edificar-vb e0 x y u)))
(B (name generar) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (^ (TS#WEALTH y) (generar-vb e0 x y u))))
(B (name crear) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (crear-vb e0 x y u)))
(B (name crear) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (fabricar-vb e0 x y u)))
(B (name crear) (=> (^ (S#BUILDING e0 :0.3) (SS#BUILDING%CREATION_DESTRUCTION e0 e0 :0.3) (R#CREATING e0 e0 :0.3)) (formar-vb e0 x y u)))

(B (name generación) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.45)) (^ (generación-nn e0 x) (de-in e1 x y) (TS#WEALTH y))))
(B (name creación) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%CREATION_DESTRUCTION x e0 :0.45)) (creación-nn e0 x)))

; COMPONENTS
(B (name base) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%STRUCTURE x e0 :0.45)) (base-nn e0 x)))
(B (name cemento) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (cemento-nn e0 x)))
(B (name ladrillo) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (ladrillo-nn e0 x)))
(B (name hormigón) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (hormigón-nn e0 x)))
(B (name mortero) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (mortero-nn e0 x)))
;##RI: arena might evoke weakness as opposed to support?
;(B (name arena) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (arena-nn e0 x)))
(B (name piedra) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (piedra-nn e0 x)))
(B (name piedra-clave) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (^ (piedra-nn e0 x) (clave-nn e1 y))))
(B (name pared) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (pared-nn e0 x)))
(B (name muro) (=> (^ (S#BUILDING e0 :0.45) (SS#BUILDING%COMPONENTS x e0 :0.45)) (muro-nn e0 x)))

(B (name buildingmap) (=> (I#BUILDING x :0.9) (S#BUILDING x)))
(B (name structuremap) (=> (I#BUILDING%STRUCTURE x y :0.9) (SS#BUILDING%STRUCTURE x y)))
(B (name creation_destructionmap) (=> (I#BUILDING%CREATION_DESTRUCTION x y :0.9) (SS#BUILDING%CREATION_DESTRUCTION x y)))
(B (name componentsmap) (=> (I#BUILDING%COMPONENTS x y :0.9) (SS#BUILDING%COMPONENTS x y)))

; PATHWAY
; TYPE
(B (name camino) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (camino-nn e0 x)))
;(B (name road-to) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (^ (road-nn e0 x) (to-in e1 x z))))
(B (name cerratera) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (cerratera-nn e0 x)))
(B (name puente) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (puente-nn e0 x)))
(B (name pasaje) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (pasaje-nn e0 x)))
(B (name ruta) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (ruta-nn e0 x)))
(B (name calle) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (calle-nn e0 x)))
(B (name avenida) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (avenida-nn e0 x)))
(B (name rastro) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (rastro-nn e0 x)))
(B (name sendero) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (sendero-nn e0 x)))
(B (name corredor) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (corredor-nn e0 x)))
(B (name pasarela) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (pasarela-nn e0 x)))
;(B (name way-out) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%TYPE x e0 :0.45)) (^ (way-nn e0 x) (out-in e1 x u))))

;OPEN PATH
(B (name camino-claro) (=> (SS#PATHWAY%OPEN_PATH e0 e0 :0.9) (^ (S#PATHWAY e1) (SS#TYPE x e1) (claro-adj e0 x))))

;OBSTRUCTED PATH
(B (name obstruido-path) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.90) (^ (S#PATHWAY e1) (SS#TYPE x e1) (obstruido-adj e0 x))))
(B (name path-bloqueado) (=> (SS#PATHWAY%OBSTRUCTED_PATH e0 e0 :0.90) (^ (S#PATHWAY e1) (SS#TYPE x e1) (bloqueado-adj e0 x))))

(B (name barricada) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45)) (barricada-nn e0 x)))
(B (name barricada) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45)) (barrera-nn e0 x)))
(B (name barricada) (=> (^ (S#PATHWAY e0 :0.45) (SS#PATHWAY%OBSTRUCTED_PATH x e0 :0.45)) (impedimento-nn e0 x)))

(B (name pathwaymap) (=> (I#PATHWAY x :0.9) (S#PATHWAY x)))
;(B (name pathway-typemap) (=> (I#PATHWAY%TYPE x y :0.9) (SS#PATHWAY%TYPE x y)))
(B (name open-pathmap) (=> (I#PATHWAY%OPEN_PATH x y :0.9) (SS#PATHWAY%OPEN_PATH x y)))
(B (name obstructed-pathmap) (=> (I#PATHWAY%OBSTRUCTED_PATH x y :0.9) (SS#PATHWAY%OBSTRUCTED_PATH x y)))

;PORTAL
;MEANS OF ENTRY
(B (name entrada) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (entrada-nn e0 x)))
(B (name puerta) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (puerta-nn e0 x)))
(B (name umbral) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (umbral-nn e0 x)))
(B (name ingreso) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (ingreso-nn e0 x)))
(B (name portal) (=> (^ (S#PORTAL e0 :0.45) (SS#PORTAL%MEANS_OF_ENTRY x e0 :0.45)) (portal-nn e0 x)))

;OBSTACLES
(B (name estrecho) (=> (SS#PORTAL%OBSTACLES e0 :0.90) (^ (S#PORTAL e0) (SS#MEANS_OF_ENTRY x) (estrecho-adj e0 x))))

(B (name obstruido-path) (=> (SS#PORTAL%OBSTACLES e0 e0 :0.90) (^ (S#PORTAL e1) (SS#MEANS_OF_ENTRY x e1) (obstruido-adj e0 x))))
(B (name path-bloqueado) (=> (SS#PORTAL%OBSTACLES e0 e0 :0.90) (^ (S#PORTAL e1) (SS#MEANS_OF_ENTRY x e1) (bloqueado-adj e0 x))))


(B (name portalmap) (=> (I#PORTAL x :0.9) (S#PORTAL x)))
(B (name meansofentrymap) (=> (I#PORTAL%MEANS_OF_ENTRY x y :0.9) (SS#PORTAL%MEANS_OF_ENTRY x y)))
(B (name obstaclesmap) (=> (I#PORTAL%OBSTACLES x y :0.9) (SS#PORTAL%OBSTACLES x y)))

;PHYSICAL OBJECT
; PHYSICAL OBJECT TYPE
(B (name mass) (=> (^ (S#PHYSICAL_OBJECT e0 :0.45) (SS#PHYSICAL_OBJECT%PHYSTICAL-OBJECT-TYPE x e0 :0.45)) (masa-nn e0 x)))
(B (name polygon) (=> (^ (S#PHYSICAL_OBJECT e0 :0.45) (SS#PHYSICAL_OBJECT%PHYSTICAL-OBJECT-TYPE x e0 :0.45)) (polígono-nn e0 x)))

;POSSESSION
;##RI: "have" is likely very important here, but might generate a lot of FPs.
(B (name poseer) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%POSSESSION e0 e0 :0.33) (R#POSSESSOR x e0 :0.33)) (poseer-vb e0 x y u)))

(B (name propiedad) (=> (^ (S#PHYSICAL_OBJECT y :0.45) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.45)) (propiedad-n e0 x)))
(B (name posesión) (=> (^ (S#PHYSICAL_OBJECT y :0.45) (SS#PHYSICAL_OBJECT%POSSESSION e0 y :0.45)) (posesión-n e0 x)))

;TRANSFER
;(B (name reciber) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.33) (R#RECEIVER x e0 :0.33)) (reciber-vb e0 x y u)))
;(B (name obtener) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.33) (R#RECEIVER x e0 :0.33)) (obtener-vb e0 x y u)))
;(B (name entregar) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (entregar-vb e0 x y u)))
;(B (name lanzar) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (lanzar-vb e0 x y u)))
;(B (name tirar) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (tirar-vb e0 x y u)))

; ##RI: These will overgenerate like crazy, so I'm not adding them.
;(B (name get) (=> (^ (S#PHYSICAL_OBJECT e0 :0.33) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.33) (R#RECEIVER x e0 :0.33)) (get-vb e0 x y u)))
;(B (name give) (=> (^ (S#PHYSICAL_OBJECT e0 :0.23) (SS#PHYSICAL_OBJECT%TRANSFER e0 e0 :0.23) (R#GIVER x e0 :0.23) (R#RECEIVER u e0 :0.23)) (give-vb e0 x y u)))

(B (name physical-objectmap) (=> (I#PHYSICAL_OBJECT x :0.9) (S#PHYSICAL_OBJECT x)))
;(B (name physical-object-typemap) (=> (I#PHYSICAL_OBJECT%TYPE x y :0.9) (SS#PHYSICAL_OBJECT%TYPE x y)))
(B (name possessionmap) (=> (I#PHYSICAL_OBJECT%POSSESSION x y :0.9) (SS#PHYSICAL_OBJECT%POSSESSION x y)))
(B (name transfermap) (=> (I#PHYSICAL_OBJECT%TRANSFER x y :0.9) (SS#PHYSICAL_OBJECT%TRANSFER x y)))

;DARKNESS
(B (name oscuridad) (=> (^ (S#DARKNESS e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (oscuridad-nn e0 x)))
(B (name tinieblas) (=> (^ (S#DARKNESS e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (tinieblas-nn e0 x)))
(B (name cueva) (=> (^ (S#DARKNESS e0 :0.45) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (cueva-nn e0 x)))
; (B (name dark-days) (=> (^ (S#DARKNESS e0 :0.3) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.3) (R#DARK x e0 :0.3)) (^ (dark-adj e0 x) (day-nn e1 x))))
; (B (name dark-cloud) (=> (^ (S#DARKNESS e0 :0.3) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT e0 e0 :0.3) (R#DARK x e0 :0.3)) (^ (dark-adj e0 x) (cloud-nn e1 x))))
(B (name oscuro) (=> (^ (S#DARKNESS e0 e0 :0.3) (SS#DARKNESS%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#DARK x e0 :0.3)) (oscuro-adj e0 x)))

;MOVEMENT
; (B (name darken) (=> (^ (S#DARKNESS e0 e0 :0.3) (SS#DARKNESS%MOVEMENT x e0 :0.3) (R#DARK y e0 :0.3)) (darken-vb e0 x y u)))
; (B (name enlighten) (=> (^ (S#DARKNESS e0 e0 :0.3) (SS#DARKNESS%MOVEMENT x e0 :0.3) (R#DARK y e0 :0.3)) (enlighten-vb e0 x y u)))

;LIGHT

(B (name luz) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (luz-nn e0 x)))
(B (name light) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (iluminación-nn e0 x)))
(B (name sol) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (sol-nn e0 x)))
(B (name brillantez) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (brillantez-nn e0 x)))
(B (name resplandor) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (resplandor-nn e0 x)))
(B (name destello) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (destello-nn e0 x)))
(B (name deslumbramiento) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (deslumbramiento-nn e0 x)))
(B (name luster) (=> (^ (S#LIGHT e0 :0.45) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.45)) (lustre-nn e0 x)))

(B (name light-a) (=> (^ (S#LIGHT x e0 :0.3) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#LIGHT x e0 :0.3)) (^ (de-in e1 e2 x) (luz-nn e0 x))))
(B (name soleado) (=> (^ (S#LIGHT x e0 :0.3) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#LIGHT x e0 :0.3)) (soleado-adj e0 x)))
(B (name brillante) (=> (^ (S#LIGHT x e0 :0.3) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x e0 :0.3) (R#LIGHT x e0 :0.3)) (brillante-adj e0 x)))


(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%MOVEMENT e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (aclarar-vb e0 x y z)))

; ILLUMINATION
(B (name brillar) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (brillar-vb e0 x y z)))
(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%MOVEMENT e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (iluminar-vb e0 x y z)))
(B (name dark) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%MOVEMENT e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (reflejar-vb e0 x y z)))
(B (name reflection) (=> (^ (S#LIGHT e0 e0 :0.3) (SS#LIGHT%ILLUMINATION e0 e0 :0.3) (R#LIGHT x e0 :0.3)) (reflexión-nn e0 x)))

(B (name darknessmap) (=> (I#DARKNESS x :0.9) (S#DARKNESS x)))
(B (name dark-end-of-rangemap) (=> (I#LIGHT%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x y :0.9) (SS#LIGHT%DARK_END_OF_RANGE_OF_DARKNESS_LIGHT x y)))
(B (name darkness-movementmap) (=> (I#LIGHT%MOVEMENT x y :0.9) (SS#LIGHT%MOVEMENT x y)))

(B (name lightmap) (=> (I#LIGHT x :0.9) (S#LIGHT x)))
(B (name dark-end-of-rangemap) (=> (I#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x y :0.9) (SS#LIGHT%LIGHT_END_OF_RANGE_OF_DARKNESS_LIGHT x y)))
(B (name light-movementmap) (=> (I#LIGHT%MOVEMENT x y :0.9) (SS#LIGHT%MOVEMENT x y)))


;OBESITY
;EXCESS BODY WEIGHT
(B (name hinchado) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (hinchado-adj e0 x)))
(B (name mas-gordo) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (^ (mas-rb e0 x) (gordo-adj e1 x))))
(B (name circunferencia) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_BODY_WEIGHT x e0 :0.45)) (circunferencia-nn e0 x)))

;EXCESS CONSUMPTION
(B (name gula) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.45)) (gula-nn e0 x)))
(B (name glotonería) (=> (^ (S#OBESITY e0 :0.45) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.45)) (glotonería-nn e0 x)))
(B (name ungullir) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (ungullir-vb e0 x y u)))
;##RI: This will probably over-generate
;(B (name eat) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (eat-vb e0 x y u)))
(B (name voraz) (=> (^ (S#OBESITY e0 :0.3) (SS#OBESITY%EXCESS_CONSUMPTION x e0 :0.3) (R#OVERWEIGHT x e0 :0.3)) (voraz-adj e0 x)))

(B (name obesitymap) (=> (I#OBESITY x :0.9) (S#OBESITY x)))
(B (name excess-body-weightmap) (=> (I#OBESITY%EXCESS_BODY_WEIGHT x y :0.9) (SS#OBESITY%EXCESS_BODY_WEIGHT x y)))
(B (name excess-consumptionmap) (=> (I#OBESITY%EXCESS_CONSUMPTION x y :0.9) (SS#OBESITY%EXCESS_CONSUMPTION x y)))

; PARASITE
; DESTRUCTIVE BEING
(B (name sanguijuela) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (sanguijuela-nn e0 x)))
(B (name parásito) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (parásito-nn e0 x)))
(B (name piojo) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (piojo-nn e0 x)))
(B (name mosquito) (=> (^ (S#PARASITE e0 :0.45) (SS#PARASITE%DESTRUCTIVE_BEING x e0 :0.45)) (mosquito-nn e0 x)))

;(B (name drain-the-lifeblood) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%DESTRUCTIVE_BEING e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (drain-vb e0 x y u) (lifeblood-nn e1 y))))
;(B (name suck-the-lifeblood) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%DESTRUCTIVE_BEING e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (suck-vb e0 x y u) (lifeblood-nn e1 y))))
(B (name drenar-la-sangre) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%DESTRUCTIVE_BEING e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (drenar-vb e0 x y u) (sangre-nn e1 y))))
(B (name chupar-la-sangre) (=> (^ (S#PARASITE e0 :0.33) (SS#PARASITE%DESTRUCTIVE_BEING e0 e0 :0.33) (R#PARASITE-AGENT x e0 :0.33)) (^ (chupar-vb e0 x y u) (sangre-nn e1 y))))
;(B (name leech) (=> (^ (S#PARASITE e0 :0.3) (SS#PARASITE%DESTRUCTIVE_BEING e0 e0 :0.3) (R#PARASITE-AGENT x e0 :0.3)) (leech-vb e0 x y u)))

(B (name parasitemap) (=> (I#PARASITE x :0.9) (S#PARASITE x)))
(B (name destructive-beingmap) (=> (I#PARASITE%DESTRUCTIVE_BEING x y :0.9) (SS#PARASITE%DESTRUCTIVE_BEING x y)))

;VISION
;BLINDNESS
(B (name ciego) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS x e0 :0.3) (R#BLIND x e0 :0.3)) (ciego-adj e0 x)))
(B (name ceguera) (=> (^ (S#VISION e0 :0.45) (SS#VISION%BLINDNESS x e0 :0.45)) (ceguera-nn e0 x)))
(B (name ceguera) (=> (^ (S#VISION e0 :0.45) (SS#VISION%BLINDNESS x e0 :0.45)) (disfrazados-nn e0 x)))
(B (name cegarvb) (=> (^ (S#VISION e0 :0.3) (SS#VISION%BLINDNESS e0 e0 :0.3) (R#BLIND y e0 :0.3)) (cegar-vb e0 x y z)))

;SEEING
(B (name abiertos-ojos) (=> (^ (S#VISION e0 :0.45) (SS#VISION%SEEING x e0 :0.45)) (^ (abiertos-adj e0 x) (ojos-nn e1 x))))
(B (name exhibitionism) (=> (^ (S#VISION e0 :0.45) (SS#VISION%SEEING x e0 :0.45)) (exhibicionismo-nn e0 x)))
;(B (name ver) (=> (^ (S#VISION e0 :0.3) (SS#VISION%SEEING e0 e0 :0.3) (R#SIGHTED y e0 :0.3)) (ver-vb e0 x y z)))

(B (name visionmap) (=> (I#VISION x :0.9) (S#VISION x)))
(B (name blindnessmap) (=> (I#VISION%VISION-BLINDNESS x y :0.9) (SS#VISION%BLINDNESS x y)))
(B (name seeingmap) (=> (I#VISION%VISION-SEEING x y :0.9) (SS#VISION%SEEING x y)))

; MONSTER
; TYPE
(B (name monstruo) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (monstruo-nn e0 x)))
(B (name frankenstein) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (frankenstein-nn e0 x)))
(B (name chupacabra) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (chupacabra-nn e0 x)))
(B (name bestia) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (bestia-nn e0 x)))
(B (name criatura) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (criatura-nn e0 x)))
(B (name demonio) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (demonio-nn e0 x)))
(B (name gigante) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (gigante-nn e0 x)))
(B (name gnomo) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (gnomo-nn e0 x)))
(B (name hombre-lobo) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (hombre-lobo-nn e0 x)))
(B (name zombi) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (zombi-nn e0 x)))
(B (name vampiro) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (vampiro-nn e0 x)))
(B (name dragón) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (dragón-nn e0 x)))
(B (name godzilla) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%TYPE x e0 :0.45)) (godzilla-nn e0 x)))

; ACTION
(B (name asustar) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (asustar-vb e0 x y u)))
(B (name chupar) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (chupar-vb e0 x y u)))

(B (name terrify) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (aterrorizar-vb e0 x y u)))
(B (name devour) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (devorar-vb e0 x y u)))
(B (name threaten) (=> (^ (S#MONSTER e0 :0.45) (SS#MONSTER%ACTION e0 e0 :0.45)) (amenaza-vb e0 x y u)))



(B (name monstermap) (=> (I#MONSTER x :0.9) (S#MONSTER x)))
;(B (name monster-typemap) (=> (I#MONSTER%TYPE x y :0.9) (SS#MONSTER%TYPE x y)))
(B (name monster-typemap) (=> (I#MONSTER%ACTION x y :0.9) (SS#MONSTER%ACTION x y)))

; SCHISM
;TYPE
(B (name cisma) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (cisma-nn e0 x)))
(B (name brecha) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (brecha-nn e0 x)))
(B (name separación) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (separación-nn e0 x)))
(B (name divisoria) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (divisoria-nn e0 x)))
(B (name extensión) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE x e0 :0.45)) (extensión-nn e0 x)))
(B (name extensión) (=> (^ (S#SCHISM e0 :0.45) (SS#SCHISM%TYPE e0 e0 :0.45)) (polarizar-vb e0 x y z)))

; DISTANCES

(B (name schismmap) (=> (I#SCHISM x :0.9) (S#SCHISM x)))
;(B (name schism-typemap) (=> (I#SCHISM%TYPE x y :0.9) (SS#SCHISM%TYPE x y)))
(B (name schism-distancesmap) (=> (I#SCHISM%DISTANCES x y :0.9) (SS#SCHISM%DISTANCES x y)))

; FORCEFUL EXTRACTION
; TYPE
(B (name exprimir) (=> (^ (S#FORCEFUL_EXTRACTION e0 e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (exprimir-vb e0 x y u)))
(B (name erradicar) (=> (^ (S#FORCEFUL_EXTRACTION e0 e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (erradicar-vb e0 x y u)))
(B (name escurrir) (=> (^ (S#FORCEFUL_EXTRACTION e0 e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (escurrir-vb e0 x y u)))
(B (name extraer) (=> (^ (S#FORCEFUL_EXTRACTION e0 e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (extraer-vb e0 x y u)))
(B (name arrebatar) (=> (^ (S#FORCEFUL_EXTRACTION e0 e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (arrebatar-vb e0 x y u)))
(B (name milk) (=> (^ (S#FORCEFUL_EXTRACTION x e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (ordeñar-vb e0 x y u)))
(B (name skin) (=> (^ (S#FORCEFUL_EXTRACTION x e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (pelar-vb e0 x y u)))
(B (name fleece) (=> (^ (S#FORCEFUL_EXTRACTION x e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (esquilar-vb e0 x y u)))
(B (name wring) (=> (^ (S#FORCEFUL_EXTRACTION x e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (estrujan-vb e0 x y u)))

(B (name tug) (=> (^ (S#FORCEFUL_EXTRACTION e0 e0 :0.3) (SS#FORCEFUL_EXTRACTION%TYPE e0 e0 :0.3) (R#EXTRACTION-AGENT x e0 :0.3)) (tug-vb e0 x y u)))
(B (name extraction) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (extraction-nn e0 x)))
(B (name extortion) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (extortion-nn e0 x)))
(B (name erradicación) (=> (^ (S#FORCEFUL_EXTRACTION e0 :0.45) (SS#FORCEFUL_EXTRACTION%TYPE x e0 :0.45)) (erradicación-nn e0 x)))

(B (name forceful-extractionmap) (=> (I#FORCEFUL_EXTRACTION x :0.9) (S#FORCEFUL_EXTRACTION x)))
;(B (name forceful-extraction-typemap) (=> (I#FORCEFUL_EXTRACTION%TYPE x y :0.9) (SS#FORCEFUL_EXTRACTION%TYPE x y)))

; NATURAL PHYSICAL FORCE
; TYPE
(B (name avalancha) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (avalancha-nn e0 x)))
(B (name rain) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (lluvia-nn e0 x)))
(B (name downpour) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (aguacero-nn e0 x)))
(B (name rain-shower) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (chaparrón-nn e0 x)))

(B (name tsunami) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (tsunami-nn e0 x)))
(B (name diluvio) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (diluvio-nn e0 x)))
(B (name inundación) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (inundación-nn e0 x)))
(B (name tornado) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (tornado-nn e0 x)))
(B (name huracán) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (huracán-nn e0 x)))
(B (name ciclón) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (ciclón-nn e0 x)))
(B (name natural-disaster) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (naturales-adj e0 x) (desastres-nn e1 x))))
(B (name tifón) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (tifón-nn e0 x)))
(B (name terremoto) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (terremoto-nn e0 x)))
(B (name erupción) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (erupción-nn e0 x)))
(B (name granizada) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (granizada-nn e0 x)))
(B (name tormenta) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (tormenta-nn e0 x)))
(B (name sequía) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (sequía-nn e0 x)))
(B (name vorágine) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (vorágine-nn e0 x)))
(B (name heat-wave) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (ola-nn e0 x) (de-in e1 x y) (calor-nn e2 x))))
(B (name rock-slide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (deslizamiento-nn e0 x) (de-in e1 x y) (rocas-nn e2 x))))
(B (name mud-slide) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (^ (avalancha-nn e0 x) (de-in e1 x y) (lodo-nn e2 x))))

(B (name devastadores) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE e0 e0 :0.45)) (devastadores-adj e0 x)))
(B (name devastadores) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.45) (SS#NATURAL_PHYSICAL_FORCE%TYPE x e0 :0.45)) (devastadores-nn e0 x)))

; RESULT
(B (name destruir) (=> (^ (S#NATURAL_PHYSICAL_FORCE e0 :0.23) (SS#NATURAL_PHYSICAL_FORCE%RESULT e0 e0 :0.23) (R#DESTROY-AGENT x e0 :0.23) (R#DESTROY-PATIENT y e0 :0.23)) (destruir-vb e0 x y u)))

(B (name natural-physical-forcemap) (=> (I#NATURAL_PHYSICAL_FORCE x :0.9) (S#NATURAL_PHYSICAL_FORCE x)))
;(B (name natural-physical-force-typemap) (=> (I#NATURAL_PHYSICAL_FORCE%TYPE x y :0.9) (SS#NATURAL_PHYSICAL_FORCE%TYPE x y)))
(B (name natural-physical-force-resultmap) (=> (I#NATURAL_PHYSICAL_FORCE%RESULT x y :0.9) (SS#NATURAL_PHYSICAL_FORCE%RESULT x y)))

; PHYSICAL LOCATION
; DEFINED-REGION
(B (name límite) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (límite-nn e0 x)))
(B (name destino) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (destino-nn e0 x)))
(B (name borde) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (borde-nn e0 x)))
(B (name margen) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (margen-nn e0 x)))
(B (name franja) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (franja-nn e0 x)))
(B (name frontera) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION x e0 :0.45)) (frontera-nn e0 x)))

(B (name vivir-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (vivir-vb e0 x y z) (en-in e1 e0 w))))
(B (name vivir-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#WEALTH w) (vivir-vb e0 x y z) (en-in e1 e0 w))))
(B (name reside-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (residir-vb e0 x y z) (en-in e1 e0 w))))
(B (name permanecer-in) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (permanecer-vb e0 x y z) (en-in e1 e0 w))))
(B (name permanecer) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (permanecer-vb e0 x y z))))
(B (name nacido-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%DEFINED_REGION e0 e0 w :0.45)) (^ (TS#POVERTY w) (nacido-adj e0 x) (en-in e1 x w))))

;MOVEMENT_INTO
(B (name empuje) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x e0 :0.45)) (empuje-nn e0 x)))


(B (name empujar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (empujar-vb e0 x y z) (en-in e1 e0 w))))
(B (name empujar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (empujar-vb e0 x y z) (a-in e1 e0 w))))
(B (name conducir-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (conducir-vb e0 x y z) (en-in e1 e0 w))))
(B (name conducir-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (conducir-vb e0 x y z) (a-in e1 e0 w))))
(B (name dibujar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (dibujar-vb e0 x y z) (en-in e1 e0 w))))
(B (name dibujar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (dibujar-vb e0 x y z) (a-in e1 e0 w))))
(B (name arrestre-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (arrestre-vb e0 x y z) (en-in e1 e0 w))))
(B (name arrestre-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (arrestre-vb e0 x y z) (a-in e1 e0 w))))
(B (name forzar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (forzar-vb e0 x y z) (en-in e1 e0 w))))
(B (name forzar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (forzar-vb e0 x y z) (a-in e1 e0 w))))
(B (name mover-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVERMENT-INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (move-vb e0 x y z) (en-in e1 e0 w))))
(B (name mover-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVERMENT-INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (move-vb e0 x y z) (a-in e1 e0 w))))
(B (name tirar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (tirar-vb e0 x y z) (en-in e1 e0 w))))
(B (name tirar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (tirar-vb e0 x y z) (a-in e1 e0 w))))
(B (name detener-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (detener-vb e0 x y z) (en-in e1 e0 w))))
(B (name detener-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (detener-vb e0 x y z) (a-in e1 e0 w))))
(B (name lanzar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (lanzar-vb e0 x y z) (en-in e1 e0 w))))
(B (name lanzar-en) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#POVERTY w) (lanzar-vb e0 x y z) (a-in e1 e0 w))))
(B (name reach) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#WEALTH_AND_SOCIAL_CLASS y) (alcanzar-vb e0 x y z))))
(B (name reach) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (^ (TS#WEALTH y) (alcanzar-vb e0 x y z))))
;(B (name reach) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO e0 e0 :0.23) (R#PROPEL-AGENT x e0 :0.23) (R#PROPEL-PATIENT y e0 :0.23)) (alcanzar-vb e0 x y z)))

;EXIT
(B (name surgir) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23)) (surgir-vb e0 x y u)))
(B (name emerger) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23)) (emerger-vb e0 x y u)))
(B (name emerger) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.45)) (emergente-adj e0 x)))
(B (name salir) (=> (^ (S#PHYSICAL_LOCATION e0 :0.23) (SS#PHYSICAL_LOCATION%EXIT e0 e0 :0.23) (R#EXIT-AGENT x e0 :0.23)) (^ (salir-vb e0 x y u) (de-in e1 e0 w))))
(B (name pasaporte) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (pasaporte-nn e0 x)))
(B (name billete) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (billete-nn e0 x)))
(B (name salida) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%SALIDA x e0 :0.45)) (exit-nn e0 x)))
(B (name free-pass) (=> (^ (S#PHYSICAL_LOCATION e0 :0.45) (SS#PHYSICAL_LOCATION%EXIT x e0 :0.45)) (^ (libre-adj e0 x) (pase-nn e1 x))))

(B (name physical-locationmap) (=> (I#PHYSICAL_LOCATION x :0.9) (S#PHYSICAL_LOCATION x)))
(B (name defined-regionmap) (=> (I#PHYSICAL_LOCATION%DEFINED_REGION x y :0.9) (SS#PHYSICAL_LOCATION%DEFINED_REGION x y)))
(B (name movement-intomap) (=> (I#PHYSICAL_LOCATION%MOVEMENT_INTO x y :0.9) (SS#PHYSICAL_LOCATION%MOVEMENT_INTO x y)))
(B (name physical-location-exitmap) (=> (I#PHYSICAL_LOCATION%EXIT x y :0.9) (SS#PHYSICAL_LOCATION%EXIT x y)))

; VERTICAL SCALE
; POSITION ON A SCALE
(B (name nivel) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (nivel-nn e0 x)))
(B (name línea) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (línea-nn e0 x)))
(B (name punto) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (punto-nn e0 x)))

(B (name medular) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (medular-nn e0 x)))

(B (name low) (=> (^ (S#VERTICAL_SCALE e0 :0.33) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.33) (R#FIXED-POINT x e0 :0.33)) (bajo-adj e0 x)))
(B (name high) (=> (^ (S#VERTICAL_SCALE e0 :0.33) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.33) (R#FIXED-POINT x e0 :0.33)) (alto-adj e0 x)))

(B (name low) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (bajo-adj e0 x) (TS#TAXATION u))))
(B (name high) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (alto-adj e0 x) (TS#TAXATION u))))
(B (name low) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (bajo-adj e0 x) (TS#WEALTH_AND_SOCIAL_CLASS x))))
(B (name high) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (alto-adj e0 x) (TS#WEALTH_AND_SOCIAL_CLASS x))))
(B (name middle) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE e0 e0 :0.3) (R#FIXED-POINT x e0 :0.3)) (^ (media-adj e0 x) (TS#WEALTH_AND_SOCIAL_CLASS x))))

; MOVEMENT ON THE SCALE
(B (name subir) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (subir-vb e0 x y u)))
(B (name escalar) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (escalar-vb e0 x y u)))
(B (name ascender) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (ascender-vb e0 x y u)))
(B (name ascenso) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x e0 :0.3) (R#MOVE-UP x e0 :0.3)) (ascenso-nn e0 x)))

(B (name elevate) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (elevar-vb e0 x y u)))
(B (name elevate) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (elevado-adj e0 x)))

(B (name elevate) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.3) (R#MOVE-UP e0 e0 :0.3)) (verticalmente-rb e0 x)))


(B (name increase) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-UP e0 e0 :0.23) (R#MOVER x e0 :0.23)) (^ (TS#TAXATION w) (aumentar-vb e0 x y z))))
(B (name increase-nn) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x e0 :0.3) (R#MOVE-UP x e0 :0.3)) (^ (TS#TAXATION w) (aumento-nn e0 x))))

(B (name decrease-nn) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x e0 :0.3) (R#MOVE-DOWN x e0 :0.3)) (^ (TS#TAXATION w) (disminución-nn e0 x))))
(B (name disminuir) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (^ (TS#TAXATION w) (disminuir-vb e0 x y u))))
(B (name caer) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (caer-vb e0 x y u)))
(B (name soltar) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (soltar-vb e0 x y u)))
(B (name plomada) (=> (^ (S#VERTICAL_SCALE e0 :0.23) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE e0 e0 :0.23) (R#MOVE-DOWN e0 e0 :0.23) (R#MOVER x e0 :0.23)) (plomada-vb e0 x y u)))


; CONTRAST OF POSITIONS

(B (name superior) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#ABOVE x e0 :0.3)) (superior-adj e0 x)))
(B (name arriba) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#ABOVE x e0 :0.3)) (arriba-in e0 x)))

(B (name bajar) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#BELOW x e0 :0.3)) (bajar-adj e0 x)))
(B (name abajo) (=> (^ (S#VERTICAL_SCALE e0 :0.3) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS e0 e0 :0.3) (R#ABAJO x e0 :0.3)) (below-in e0 x y)))

(B (name vertical-scalemap) (=> (I#VERTICAL_SCALE x :0.9) (S#VERTICAL_SCALE x)))
(B (name position-on-a-scalemap) (=> (I#VERTICAL_SCALE%POSITION_ON_A_SCALE x y :0.9) (SS#VERTICAL_SCALE%POSITION_ON_A_SCALE x y)))
(B (name movement-on-the-scalemap) (=> (I#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x y :0.9) (SS#VERTICAL_SCALE%MOVEMENT_ON_THE_SCALE x y)))
(B (name contrast-of-positionsmap) (=> (I#VERTICAL_SCALE%CONTRAST_OF_POSITIONS x y :0.9) (SS#VERTICAL_SCALE%CONTRAST_OF_POSITIONS x y)))

; MORAL DUTY
; REMUNERATION
(B (name deber) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (deber-nn e0 x)))
(B (name debido) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (debido-nn e0 x)))
(B (name obligation) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (obligación-nn e0 x)))
(B (name obligation) (=> (^ (S#MORAL_DUTY e0 :0.45) (SS#MORAL_DUTY%REMUNERATION x e0 :0.45)) (obligación-nn e0 x)))

(B (name moral-dutymap) (=> (I#MORAL_DUTY x :0.9) (S#MORAL_DUTY x)))
(B (name remunerationmap) (=> (I#MORAL_DUTY%REMUNERATION x y :0.9) (SS#MORAL_DUTY%REMUNERATION x y)))

; MEDICINE
; ADMINISTRATION
(B (name inyectar) (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45) (R#ADMINISTRATION-AGENT x e0 :0.33)) (inyectar-vb e0 x y z)))
;(B (name shot) (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45)) (shot-nn e0 x)))
(B (name injection) (=> (^ (S#MEDICINE e0 :0.45) (SS#MEDICINE%ADMINISTRATION x e0 :0.45)) (inyección-nn e0 x)))

(B (name medicinemap) (=> (I#MEDICINE x :0.9) (S#MEDICINE x)))
(B (name administrationmap) (=> (I#MEDICINE%ADMINISTRATION x y :0.9) (SS#MEDICINE%ADMINISTRATION x y)))

;RIGHT
;TYPE
(B (name derecho-a) (=> (^ (S#RIGHT e0 :0.45) (SS#RIGHT%TYPE x e0 :0.45)) (^ (derecho-nn e0 x) (a-in e1 x y ))))
(B (name inalienable-derecho) (=> (^ (S#RIGHT e0 :0.45) (SS#RIGHT%TYPE x e0 :0.45)) (^ (inalienable-adj e0 x) (derecho-nn e1 x ))))

(B (name rightmap) (=> (I#RIGHT x :0.9) (S#RIGHT x)))
;(B (name right-typemap) (=> (I#RIGHT%TYPE x y :0.9) (SS#RIGHT%TYPE x y)))

;COMPETITION
;TYPE
;##RI: I doubt this translates exactly
;(B (name fair-shot-at) (=> (^ (S#COMPETITION e0 :0.45) (SS#COMPETITION%COMPONENT x e0 :0.45)) (^ (fair-adj e0 x) (shot-nn e1 x) (at-in e3 x y))))

(B (name competitionmap) (=> (I#COMPETITION x :0.9) (S#COMPETITION x)))
(B (name competition-componentmap) (=> (I#COMPETITION%COMPONENT x y :0.9) (SS#COMPETITION%COMPONENT x y)))

;GOAL DIRECTED
;TYPE
;(B (name objetivo) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (objetivo-nn e0 x)))
;(B (name meta) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (meta-nn e0 x)))
;(B (name fuerza) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (fuerza-nn e0 x)))
;(B (name logro) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE x e0 :0.45)) (achievement-nn e0 x)))

(B (name reach) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE e0 e0 :0.45)) (llegar-vb e0 x y z)))
(B (name strive) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%TYPE e0 e0 :0.45)) (esforzase-vb e0 x y z)))
;RISK
;(B (name high-stakes-bet) (=> (^ (S#GOAL_DIRECTED e0 :0.45) (SS#GOAL_DIRECTED%RISK e0 e0 :0.45)) (^ (high-stakes-adj e0 x) (bet-nn e1 x))))

;OBSTACLES


(B (name goal-directedmap) (=> (I#GOAL_DIRECTED x :0.9) (S#GOAL_DIRECTED x)))
;(B (name goal-directed-typemap) (=> (I#GOAL_DIRECTED%TYPE x y :0.9) (SS#GOAL_DIRECTED%TYPE x y)))
(B (name goal-directed-riskmap) (=> (I#GOAL_DIRECTED%RISK x y :0.9) (SS#GOAL_DIRECTED%RISK x y)))
(B (name goal-directed-obstaclesmap) (=> (I#GOAL_DIRECTED%OBSTACLES x y :0.9) (SS#GOAL_DIRECTED%OBSTACLES x y)))

;FOOD

(B (name comida) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (comida-nn e0 x)))
(B (name pan) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (pan-nn e0 x)))
(B (name meat) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (carne-nn e0 x)))
(B (name carrot) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (zanahoria-nn e0 x)))
(B (name corn) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (maíz-nn e0 x)))
(B (name potato) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (patata-nn e0 x)))
(B (name tortilla) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%TYPE x e0 :0.45)) (tortilla-nn e0 x)))

;TYPE
;CONSUMPTION
(B (name sabor) (=> (^ (S#FOOD e0 :0.45) (SS#FOOD%CONSUMPTION x e0 :0.45)) (sabor-nn e0 x)))
(B (name taste-of) (=> (^ (S#FOOD e0 :0.3) (SS#FOOD%CONSUMPTION x e0 :0.3) (R#TASTE-OBJECT y e0 :0.3)) (^ (sabor-nn e0 x) (de-in e1 x y))))


(B (name probar) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (probar-vb e0 x y u)))
(B (name consumir) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (consumir-vb e0 x y u))))
(B (name consumir) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (consumir-vb e0 x y u)))
(B (name comer) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (comer-vb e0 x y u))))
(B (name tragarse) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (tragarse-vb e0 x y u))))
(B (name masticar) (=> (^ (S#FOOD e0 :0.23) (SS#FOOD%CONSUMPTION e0 e0 :0.23) (R#TASTE-AGENT x e0 :0.23) (R#TASTE-OBJECT y e0 :0.23)) (^ (TS#WEALTH y) (masticar-vb e0 x y u))))


(B (name foodmap) (=> (I#FOOD x :0.9) (S#FOOD x)))
;(B (name food-typemap) (=> (I#FOOD%TYPE x y :0.9) (SS#FOOD%TYPE x y)))
(B (name food-consumptionmap) (=> (I#FOOD%CONSUMPTION x y :0.9) (SS#FOOD%CONSUMPTION x y)))

; ADDICTION
; TYPE
; (B (name adicción) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45)) (adicción-nn e0 x)))
(B (name droga) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%TYPE x e0 :0.3) (R#SUBSTANCE x e0 :0.3)) (droga-nn e0 x)))
(B (name intoxicación) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%TYPE x e0 :0.45)) (intoxicación-nn e0 x)))
(B (name borracho) (=> (^ (S#ADDICTION e0 :0.3) (SS#ADDICTION%TYPE e0 e0 :0.3) (R#ADDICTED x e0 :0.3)) (borracho-adj e0 x)))

; COMPULSION
(B (name adicción) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45)) (adicción-nn e0 x)))
(B (name hábito) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45)) (hábito-nn e0 x)))
(B (name adicto) (=> (^ (S#ADDICTION e0 :0.45) (SS#ADDICTION%COMPULSION x e0 :0.45)) (adicto-adj e0 x)))
; RESULT

(B (name addictionmap) (=> (I#ADDICTION x :0.9) (S#ADDICTION x)))
;(B (name addiction-typemap) (=> (I#ADDICTION%TYPE x y :0.9) (SS#ADDICTION%TYPE x y)))
(B (name addiction-compulsionmap) (=> (I#ADDICTION%COMPULSION x y :0.9) (SS#ADDICTION%COMPULSION x y)))
(B (name addiction-resultmap) (=> (I#ADDICTION%RESULT x y :0.9) (SS#ADDICTION%RESULT x y)))

; BLOOD-SYSTEM
; COMPONENT
(B (name sangre) (=> (^ (S#BLOOD_SYSTEM e0 :0.3) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.3) (R#BLOOD x e0 :0.3)) (sangre-nn e0 x)))
(B (name vena) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.45)) (vena-nn e0 x)))
(B (name ateria) (=> (^ (S#BLOOD_SYSTEM e0 :0.45) (SS#BLOOD_SYSTEM%COMPONENT x e0 :0.45)) (ateria-nn e0 x)))

; MOVEMENT

(B (name blood-systemmap) (=> (I#BLOOD_SYSTEM x :0.9) (S#BLOOD_SYSTEM x)))
(B (name blood-system-componentmap) (=> (I#BLOOD_SYSTEM%COMPONENT x y :0.9) (SS#BLOOD_SYSTEM%COMPONENT x y)))
(B (name blood-system-movementmap) (=> (I#BLOOD_SYSTEM%MOVEMENT x y :0.9) (SS#BLOOD_SYSTEM%MOVEMENT x y)))

; ENERGY
; TYPE
(B (name energía) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (energía-nn e0 x)))
(B (name electricity) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (electricidad-nn e0 x)))
(B (name fuel) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (combustible-nn e0 x)))
(B (name fuel) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (carburante-nn e0 x)))
(B (name battery) (=> (^ (S#ENERGY e0 :0.45) (SS#ENERGY%TYPE x e0 :0.45)) (batería-nn e0 x)))

; RESULT
(B (name energize) (=> (^ (S#ENERGY e0 :0.23) (SS#ENERGY%RESULT e0 e0 :0.23) (R#RESULT-AGENT x e0 :0.23) (R#RESULT-PATIENT x e0 :0.23)) (energizar-vb e0 x y z)))

(B (name energymap) (=> (I#ENERGY x :0.9) (S#ENERGY x)))
;(B (name energy-typemap) (=> (I#ENERGY%TYPE x y :0.9) (SS#ENERGY%TYPE x y)))
(B (name energy-resultmap) (=> (I#ENERGY%RESULT x y :0.9) (SS#ENERGY%RESULT x y)))

; GOD
; TYPE
(B (name dios) (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45)) (dios-nn e0 x)))
(B (name ídolo) (=> (^ (S#A_GOD e0 :0.45) (SS#A_GOD%TYPE x e0 :0.45)) (ídolo-nn e0 x)))

; VENERATION
(B (name adorar) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (adorar-vb e0 x y u)))
(B (name orar) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (orar-vb e0 x y u)))
(B (name rezar) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (rezar-vb e0 x y u)))
(B (name someterse-to) (=> (^ (S#A_GOD e0 :0.3) (SS#A_GOD%VENERATION e0 e0 :0.3) (R#WORSHIP-AGENT x e0 :0.3)) (^ (someterse-vb e0 x y u) (a-in e1 e0 z))))

(B (name godmap) (=> (I#GOD x :0.9) (S#A_GOD x)))
;(B (name god-typemap) (=> (I#A_GOD%TYPE x y :0.9) (SS#A_GOD%TYPE x y)))
(B (name god-venerationmap) (=> (I#A_GOD%VENERATION x y :0.9) (SS#A_GOD%VENERATION x y)))

; ACCIDENT
; TYPE
(B (name accidente) (=> (^ (S#ACCIDENT e0 :0.45) (SS#ACCIDENT%TYPE x e0 :0.45)) (accidente-nn e0 x)))

(B (name accidentmap) (=> (I#ACCIDENT x :0.9) (S#ACCIDENT x)))
;(B (name accident-typemap) (=> (I#ACCIDENT%TYPE x y :0.9) (SS#ACCIDENT%TYPE x y)))

; PLANT
; TYPE
(B (name planta) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (planta-nn e0 x)))
(B (name árbol) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (árbol-nn e0 x)))
(B (name weed) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%TYPE x e0 :0.3) (R#UNWANTED x e0 :0.3)) (^ (mala-adj e0 x) (hierba-nn e1 x))))
(B (name flor) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (flor-nn e0 x)))
(B (name hierba) (=> (^ (S#PLANT e0 :0.45) (SS#PLANT%TYPE x e0 :0.45)) (hierba-nn e0 x)))

; PARTS
(B (name raíz) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-ROOT x e0 :0.3)) (raíz-nn e0 x)))
(B (name fruta) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-EXTERNAL x e0 :0.3)) (fruta-nn e0 x)))
(B (name semilla) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-GENESIS x e0 :0.3)) (semilla-nn e0 x)))
(B (name hoja) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%PARTS x e0 :0.3) (R#PLANT-EXTERNAL x e0 :0.3)) (hoja-nn e0 x)))

; CHANGE-OF-STATE
(B (name crecer) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#POVERTY x) (crecer-vb e0 x y u))))
(B (name crecer) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#TAXATION w) (crecer-vb e0 x y u))))
(B (name crecer) (=> (^ (S#PLANT e0 :0.2) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.2) (R#CHANGING-THING x e0 :0.2)) (crecer-vb e0 x y u)))
(B (name crecer) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH x) (crecer-vb e0 x y u))))
(B (name crecer) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH_AND_SOCIAL_CLASS x) (crecer-vb e0 x y u))))
(B (name medrar) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#POVERTY x) (medrar-vb e0 x y u))))
(B (name medrar) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH x) (medrar-vb e0 x y u))))
(B (name medrar) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE e0 e0 :0.3) (R#CHANGING-THING x e0 :0.3)) (^ (TS#WEALTH_AND_SOCIAL_CLASS x) (medrar-vb e0 x y u))))

(B (name grow) (=> (^ (S#PLANT e0 :0.3) (SS#PLANT%CHANGE_OF_STATE x e0 :0.3)) (crecimiento-nn e0 x)))

(B (name plantmap) (=> (I#PLANT x :0.9) (S#PLANT x)))
;(B (name plant-typemap) (=> (I#PLANT%TYPE x y :0.9) (SS#PLANT%TYPE x y)))
(B (name plant-partsmap) (=> (I#PLANT%PARTS x y :0.9) (SS#PLANT%PARTS x y)))
(B (name plant-change-of-statemap) (=> (I#PLANT%CHANGE_OF_STATE x y :0.9) (SS#PLANT%CHANGE_OF_STATE x y)))

; ANIMAL
;TYPE
(B (name animal) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (animal-nn e0 x)))
(B (name beast) (=> (^ (S#ANIMAL e0 :0.4) (SS#ANIMAL%TYPE x e0 :0.4)) (bestia-nn e0 x)))
(B (name bear) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (oso-nn e0 x)))
(B (name dog) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (perro-nn e0 x)))
(B (name cat) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (gato-nn e0 x)))
(B (name lion) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (león-nn e0 x)))
(B (name tiger) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (tigre-nn e0 x)))
(B (name shark) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (tiburón-nn e0 x)))
(B (name whale) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (ballena-nn e0 x)))
(B (name bird) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (pájaro-nn e0 x)))
(B (name bird) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (ave-nn e0 x)))
(B (name wolf) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (lobo-nn e0 x)))
(B (name lamb) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (cordero-nn e0 x)))
(B (name sheep) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (oveja-nn e0 x)))
(B (name deer) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (ciervo-nn e0 x)))

(B (name gorilla) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (gorila-nn e0 x)))
(B (name monkey) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (mono-nn e0 x)))
(B (name goat) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (cabra-nn e0 x)))
(B (name horse) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (caballo-nn e0 x)))
(B (name turtle) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (tortuga-nn e0 x)))
(B (name cow) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (vaca-nn e0 x)))
(B (name bull) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (toro-nn e0 x)))
(B (name snake) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (serpiente-nn e0 x)))
(B (name fox) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (zorro-nn e0 x)))
(B (name beaver) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (castor-nn e0 x)))
(B (name bee) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (abeja-nn e0 x)))
(B (name hornet) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (avispón-nn e0 x)))
(B (name wasp) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (avispa-nn e0 x)))
(B (name mole) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (topo-nn e0 x)))
(B (name owl) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (búho-nn e0 x)))
(B (name owl) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (lechuza-nn e0 x)))
(B (name elephant) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (elefante-nn e0 x)))
(B (name hound) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (sabueso-nn e0 x)))
(B (name cuckoo) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (cuco-nn e0 x)))
(B (name otter) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (nutria-nn e0 x)))
(B (name hyena) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (hiena-nn e0 x)))
(B (name chicken) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%TYPE x e0 :0.45)) (pollo-nn e0 x)))

; COMPONENT
(B (name cara) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (cara-nn e0 x)))
(B (name rasgo) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (rasgo-nn e0 x)))
(B (name huella) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (huella-nn e0 x)))
(B (name mano) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (mano-nn e0 x)))
(B (name mano-mece-cuna) (=> (^ (S#ANIMAL e0 :0.45) (SS#ANIMAL%COMPONENT x e0 :0.45)) (^ (mano-nn e0 x) (mece-vb e1 u y z) (cuna-nn e2 y))))


; FUNCTION
(B (name tragarse) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%FUNCTION e0 e0 :0.23) (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23)) (tragarse-vb e0 x y u)))

; ACTION
(B (name comer) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (comer-vb e0 x y u))))
(B (name comer) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION w) (comer-vb e0 x y u))))
(B (name masticar) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (masticar-vb e0 x y u))))
(B (name masticar) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION w) (masticar-vb e0 x y u))))
(B (name digerir) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (digerir-vb e0 x y u))))
(B (name digerir) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION w) (digerir-vb e0 x y u))))
(B (name tragarse) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#POVERTY x) (tragarse-vb e0 x y u))))
(B (name tragarse) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (^ (TS#TAXATION w) (tragarse-vb e0 x y u))))


(B (name tocar) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (tocar-vb e0 x y u)))
(B (name ladrar) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (ladrar-vb e0 x y u)))
(B (name rugir) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (rugir-vb e0 x y u)))
(B (name swim) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (nadar-vb e0 x y u)))
(B (name reproduce) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (reproduzca-vb e0 x y u)))
(B (name stampede) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (estampida-vb e0 x y u)))
(B (name galop) (=> (^ (S#ANIMAL e0 :0.23) (SS#ANIMAL%ACTION e0 e0 :0.23) (R#ACTION-AGENT x e0 :0.23) (R#ACTION-PATIENT y e0 :0.23)) (galopar-vb e0 x y u)))

(B (name stampede) (=> (^ (S#ANIMAL e0 :0.3) (SS#ANIMAL%ACTION e0 e0 :0.3) (R#ACTION-AGENT x e0 :0.3)) (galopante-adj e0 x )))
(B (name stampede) (=> (^ (S#ANIMAL e0 :0.3) (SS#ANIMAL%ACTION e0 e0 :0.3) (R#ACTION-AGENT x e0 :0.3)) (galope-nn e0 x )))
(B (name stampede) (=> (^ (S#ANIMAL e0 :0.3) (SS#ANIMAL%ACTION e0 e0 :0.3) (R#ACTION-AGENT x e0 :0.3)) (galopante-nn e0 x )))
(B (name stampede) (=> (^ (S#ANIMAL e0 :0.3) (SS#ANIMAL%ACTION e0 e0 :0.3) (R#ACTION-AGENT x e0 :0.3)) (reproducción-nn e0 x )))

(B (name animalmap) (=> (I#ANIMAL x :0.9) (S#ANIMAL x)))
;(B (name animal-typemap) (=> (I#ANIMAL%TYPE x y :0.9) (SS#ANIMAL%TYPE x y)))
(B (name animal-componentmap) (=> (I#ANIMAL%COMPONENT x y :0.9) (SS#ANIMAL%COMPONENT x y)))
(B (name animal-functionmap) (=> (I#ANIMAL%FUNCTION x y :0.9) (SS#ANIMAL%FUNCTION x y)))
(B (name animal-actionmap) (=> (I#ANIMAL%ACTION x y :0.9) (SS#ANIMAL%ACTION x y)))

; MACHINE
; TYPE
(B (name máquina) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (máquina-nn e0 x)))
(B (name mecanismo) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (mecanismo-nn e0 x)))
(B (name bulldozer) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (excavadora-nn e0 x)))
(B (name steamroller) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (apisonadora-nn e0 x)))
(B (name car) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (coche-nn e0 x)))
(B (name truck) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (camión-nn e0 x)))
(B (name crane) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%TYPE x e0 :0.45)) (grúa-nn e0 x)))


; PARTS
(B (name motor) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45)) (motor-nn e0 x)))
(B (name engine) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45)) (rueda-nn e0 x)))
(B (name brake) (=> (^ (S#MACHINE e0 :0.45) (SS#MACHINE%PARTS x e0 :0.45)) (freno-nn e0 x)))

; FUNCTION
(B (name girar) (=> (^ (S#MACHINE e0 :0.23) (SS#MACHINE%FUNCTION e0 e0 :0.23) (R#FUNCTION-AGENT x e0 :0.23) (R#FUNCTION-PATIENT y e0 :0.23))  (^ (motor-nn e1 x) (girar-vb e0 x y u))))

(B (name machinemap) (=> (I#MACHINE x :0.9) (S#MACHINE x)))
;(B (name machine-typemap) (=> (I#MACHINE%TYPE x y :0.9) (SS#MACHINE%TYPE x y)))
(B (name machine-partsmap) (=> (I#MACHINE%PARTS x y :0.9) (SS#MACHINE%PARTS x y)))
(B (name machine-functionmap) (=> (I#MACHINE%FUNCTION x y :0.9) (SS#MACHINE%FUNCTION x y)))

; DESTROYER
; DESTRUCTIVE FORCE
(B (name destructor) (=> (^ (S#DESTROYER e0 :0.45) (SS#DESTROYER%DESTRUCTIVE_FORCE x e0 :0.45)) (destructor-nn e0 x)))
(B (name destrucción) (=> (^ (S#DESTROYER e0 :0.45) (SS#DESTROYER%DESTRUCTIVE_FORCE x e0 :0.45)) (destrucción-nn e0 x)))
(B (name destruir) (=> (^ (S#DESTROYER e0 :0.23) (SS#DESTROYER%DESTRUCTIVE_FORCE e0 e0 :0.23) (R#DESTRUCTIVE-FORCE-AGENT x e0 :0.23) (R#DESTRUCTIVE-FORCE-PATIENT y e0 :0.23)) (destruir-vb e0 x y u)))

(B (name destroyermap) (=> (I#DESTROYER x :0.9) (S#DESTROYER x)))
(B (name destroyer-destructive-forcemap) (=> (I#DESTROYER%DESTRUCTIVE_FORCE x y :0.9) (SS#DESTROYER%DESTRUCTIVE_FORCE x y)))

; GEOGRAPHIC FEATURE
; TYPE
(B (name montaña) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#MOUNTAIN x e0 :0.3)) (mountain-nn e0 x)))
(B (name himalayas) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#MOUNTAIN x e0 :0.3)) (himalayas-nn e0 x)))
(B (name alps) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#MOUNTAIN x e0 :0.3)) (alps-nn e0 x)))
;(B (name océano) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#OCEAN x e0 :0.3)) (ocean-nn e0 x)))
;(B (name mar) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#OCEAN x e0 :0.3)) (mar-nn e0 x)))
(B (name pradera) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#VALLEY x e0 :0.3)) (pradera-nn e0 x)))
(B (name valle) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#VALLEY x e0 :0.3)) (valle-nn e0 x)))
(B (name valle) (=> (^ (S#GEOGRAPHIC_FEATURE e0 :0.3) (SS#GEOGRAPHIC_FEATURE%TYPE x e0 :0.3) (R#VALLEY x e0 :0.3)) (cascada-nn e0 x)))

(B (name geographic-featuremap) (=> (I#GEOGRAPHIC_FEATURE x :0.9) (S#GEOGRAPHIC_FEATURE x)))
;(B (name geographic-feature-typemap) (=> (I#GEOGRAPHIC_FEATURE%TYPE x y :0.9) (SS#GEOGRAPHIC_FEATURE%TYPE x y)))

; ENABLER
; LUBRICANT
(B (name lubricación) (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45)) (lubricación-nn e0 x)))
(B (name lubricante) (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45)) (lubricante-nn e0 x)))
(B (name aceite) (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45)) (aceite-nn e0 x)))
(B (name petróleo) (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45)) (aceite-nn e0 x)))
(B (name grasa) (=> (^ (S#ENABLER e0 :0.45) (SS#ENABLER%LUBRICANT x e0 :0.45)) (grasa-nn e0 x)))
(B (name greasevb) (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3) (R#LUBRICATED y e0 :0.3)) (engrasar-vb e0 x y u)))
(B (name lubricate) (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3) (R#LUBRICATED y e0 :0.3)) (lubricar-vb e0 x y u)))
(B (name oilvb) (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3) (R#LUBRICATED y e0 :0.3)) (aceitar-vb e0 x y u)))
;(B (name grease-the-wheels) (=> (^ (S#ENABLER e0 :0.3) (SS#ENABLER%LUBRICANT e0 e0 :0.3) (R#LUBRICATED y e0 :0.3)) (^ (grease-vb e0 x y u) (wheel-nn e1 y))))

(B (name enablermap) (=> (I#ENABLER x :0.9) (S#ENABLER x)))
(B (name enabler-lubricantmap) (=> (I#ENABLER%LUBRICANT x y :0.9) (SS#ENABLER%LUBRICANT x y)))

; GAME
; TYPE
(B (name ajedrez) (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45)) (ajedrez-nn e0 x)))
(B (name chess-game) (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45)) (^ (ajedrez-nn e0 x) (de-in e1 y x) (juego-nn e2 y))))
(B (name chess-match) (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45)) (^ (ajedrez-nn e0 x) (de-in e1 y x) (partida-nn e2 y))))
(B (name póker) (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45)) (póker-nn e0 x)))
(B (name puzzle) (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45)) (rompecabezas-nn e0 x)))
(B (name póker-game) (=> (^ (S#GAME e0 :0.45) (SS#GAME%TYPE x e0 :0.45)) (^ (póker-nn e0 x) (de-in e1 y x) (juego-nn e2 y))))

; COMPONENTS
(B (name chip) (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45)) (chip-nn e0 x)))
(B (name peón) (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45)) (peón-nn e0 x)))
(B (name puzzle-piece) (=> (^ (S#GAME e0 :0.45) (SS#GAME%COMPONENTS x e0 :0.45)) (^ (pieza-nn e0 x) (del-in e1 x y) (rompecabezas-nn e2 y))))

; ACTIONS
(B (name jugada) (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONSx :0.45 e0)) (jugada-nn e0 x)))
(B (name jugar) (=> (^ (S#GAME e0 :0.3) (SS#GAME%ACTIONS e0 e0 :0.3) (R#PLAYER x e0 :0.3)) (jugar-vb e0 x y u)))
(B (name premiar) (=> (^ (S#GAME e0 :0.45) (SS#GAME%ACTIONS e0 e0 :0.45)) (premiar-vb e0 x y u)))

; OUTCOMES
(B (name ganar) (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES e0 e0 :0.3) (R#PLAYER x e0 :0.3)) (ganar-vb e0 x y u)))
(B (name perder) (=> (^ (S#GAME e0 :0.3) (SS#GAME%OUTCOMES e0 e0 :0.3) (R#PLAYER x e0 :0.3)) (perder-vb e0 x y u)))

(B (name win) (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45)) (^ (S#GAME a) (SS#TYPE b a) (ganador-nn e0 x))))
(B (name lose) (=> (^ (SS#GAME%OUTCOMES e0 a :0.45) (R#PLAYER x e0 :0.45)) (^ (S#GAME a) (SS#TYPE b a) (perdedor-nn e0 x))))

(B (name gamemap) (=> (I#GAME x :0.9) (S#GAME x)))
;(B (name game-typemap) (=> (I#GAME%TYPE x y :0.9) (SS#GAME%TYPE x y)))
(B (name game-componentsmap) (=> (I#GAME%COMPONENTS x y :0.9) (SS#GAME%COMPONENTS x y)))
(B (name game-actionsmap) (=> (I#GAME%ACTIONS x y :0.9) (SS#GAME%ACTIONS x y)))
(B (name game-outcomesmap) (=> (I#GAME%OUTCOMES x y :0.9) (SS#GAME%OUTCOMES x y)))

; CROP
; PLANTING
(B (name semilla) (=> (^ (S#CROP e0 :0.3) (SS#CROP%PLANTING x e0 :0.3) (R#CROP x e0 :0.3)) (semilla-nn e0 x)))
(B (name cultivo) (=> (^ (S#CULTIVO e0 :0.3) (SS#CULTIVO%PLANTING x e0 :0.3) (R#CROP x e0 :0.3)) (crop-nn e0 x)))
(B (name sembrar) (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23)) (sembrar-vb e0 x y u)))
(B (name plantar) (=> (^ (S#CROP e0 :0.23) (SS#CROP%PLANTING e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23)) (plantar-vb e0 x y u)))

; CULTIVATION
(B (name crecer) (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23)) (^ (TS#WEALTH y) (crecer-vb e0 x y u))))
(B (name fertitlize) (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23)) (fertilizar-vb e0 x y u)))
(B (name water) (=> (^ (S#CROP e0 :0.23) (SS#CROP%CULTIVATION e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP y e0 :0.23)) (regar-vb e0 x y u)))


; OUTCOME
(B (name cosechar) (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23)) (cosechar-vb e0 x y u)))
(B (name profit) (=> (^ (S#CROP e0 :0.23) (SS#CROP%OUTCOME e0 e0 :0.23) (R#GARDENER x e0 :0.23) (R#CROP x e0 :0.23)) (lucrar-vb e0 x y u)))
(B (name cosecha) (=> (^ (S#CROP e0 :0.3) (SS#CROP%OUTCOME x e0 :0.3) (R#CROP y e0 :0.3)) (cosecha-nn e0 x)))

(B (name cropmap) (=> (I#CROP x :0.9) (S#CROP x)))
(B (name crop-plantingmap) (=> (I#CROP%PLANTING x y :0.9) (SS#CROP%PLANTING x y)))
(B (name crop-cultivationmap) (=> (I#CROP%CULTIVATION x y :0.9) (SS#CROP%CULTIVATION x y)))
(B (name crop-outcomemap) (=> (I#CROP%OUTCOME x y :0.9) (SS#CROP%OUTCOME x y)))


;MOVEMENT
;MOVEMENT
(B (name movement) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45)) (movimiento-nn e0 x)))
(B (name mobility) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45)) (movilidad-nn e0 x)))
(B (name mobility) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45)) (paso-nn e0 x)))
(B (name mobility) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT x e0 :0.45)) (círculo-nn e0 x)))

(B (name move) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45)) (mover-vb e0 x y z)))
(B (name move) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45)) (pasar-vb e0 x y z)))
(B (name move) (=> (^ (S#MOVEMENT e0 :0.45) (SS#MOVEMENT%MOVEMENT e0 e0 :0.45)) (circular-vb e0 x y z)))
